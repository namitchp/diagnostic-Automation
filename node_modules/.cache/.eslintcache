[{"F:\\React code\\diagnostic\\src\\index.js":"1","F:\\React code\\diagnostic\\src\\App.js":"2","F:\\React code\\diagnostic\\src\\reportWebVitals.js":"3","F:\\React code\\diagnostic\\src\\_redux\\middleware\\index.js":"4","F:\\React code\\diagnostic\\src\\_redux\\reducers\\index.js":"5","F:\\React code\\diagnostic\\src\\layouts\\layout.js":"6","F:\\React code\\diagnostic\\src\\pages\\Auth\\Login.js":"7","F:\\React code\\diagnostic\\src\\pages\\index.js":"8","F:\\React code\\diagnostic\\src\\_redux\\middleware\\auth.saga.js":"9","F:\\React code\\diagnostic\\src\\_redux\\middleware\\common.saga.js":"10","F:\\React code\\diagnostic\\src\\_redux\\reducers\\auth.reducer.js":"11","F:\\React code\\diagnostic\\src\\_redux\\reducers\\common.reducer.js":"12","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\materialcode.saga.js":"13","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\configuration.saga.js":"14","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\product.saga.js":"15","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\account.reducer.js":"16","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\configuration.reducer.js":"17","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\materialcode.reducer.js":"18","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\product.reducer.js":"19","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\all.reducer.js":"20","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\account.saga.js":"21","F:\\React code\\diagnostic\\src\\routes.js":"22","F:\\React code\\diagnostic\\src\\components\\RouteWithSubRoutes.js":"23","F:\\React code\\diagnostic\\src\\components\\breadcrumbs.js":"24","F:\\React code\\diagnostic\\src\\components\\header.js":"25","F:\\React code\\diagnostic\\src\\components\\sidebar.js":"26","F:\\React code\\diagnostic\\src\\components\\GlobalAlert.js":"27","F:\\React code\\diagnostic\\src\\_redux\\actions\\common.action.js":"28","F:\\React code\\diagnostic\\src\\_redux\\actions\\auth.action.js":"29","F:\\React code\\diagnostic\\src\\_redux\\controller\\auth.controller.js":"30","F:\\React code\\diagnostic\\src\\_redux\\controller\\common.controller.js":"31","F:\\React code\\diagnostic\\src\\layouts\\Support.js":"32","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\materialcode.controller.js":"33","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\product.controller.js":"34","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\configuration.controller.js":"35","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\account.controller.js":"36","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\account.action.js":"37","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\materialcode.action.js":"38","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\product.action.js":"39","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\all.action.js":"40","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\configuration.action.js":"41","F:\\React code\\diagnostic\\src\\components\\sub_menu.js":"42","F:\\React code\\diagnostic\\src\\components\\main_menu.js":"43","F:\\React code\\diagnostic\\src\\components\\appbar.js":"44","F:\\React code\\diagnostic\\src\\layouts\\Stock.js":"45","F:\\React code\\diagnostic\\src\\layouts\\Sales.js":"46","F:\\React code\\diagnostic\\src\\layouts\\Profile.js":"47","F:\\React code\\diagnostic\\src\\layouts\\Masters.js":"48","F:\\React code\\diagnostic\\src\\layouts\\Logistics.js":"49","F:\\React code\\diagnostic\\src\\services.js":"50","F:\\React code\\diagnostic\\src\\pages\\Stock\\stockBrowse.js":"51","F:\\React code\\diagnostic\\src\\pages\\Stock\\serialLedgerBrowse.js":"52","F:\\React code\\diagnostic\\src\\pages\\Stock\\itemLedgerBrowse.js":"53","F:\\React code\\diagnostic\\src\\pages\\Profile\\profile.js":"54","F:\\React code\\diagnostic\\src\\pages\\Master\\user rights\\browse.js":"55","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\browse.js":"56","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\browse.js":"57","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\index.js":"58","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\index.js":"59","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\index.js":"60","F:\\React code\\diagnostic\\src\\config.js":"61","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\index.js":"62","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\index.js":"63","F:\\React code\\diagnostic\\src\\components\\common.js":"64","F:\\React code\\diagnostic\\src\\components\\CustomPagination.js":"65","F:\\React code\\diagnostic\\src\\components\\customRowComponent.js":"66","F:\\React code\\diagnostic\\src\\pages\\DC\\index.js":"67","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\index.js":"68","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\index.js":"69","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\index.js":"70","F:\\React code\\diagnostic\\src\\components\\dateFilter.js":"71","F:\\React code\\diagnostic\\src\\components\\action-buttons.js":"72","F:\\React code\\diagnostic\\src\\components\\loader.js":"73","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\browse.js":"74","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\addTicket.js":"75","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\tcBrowse.js":"76","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\addCommericial.js":"77","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\browse.js":"78","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\browse.js":"79","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\addProduct.js":"80","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\browse.js":"81","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\browse.js":"82","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\addItem.js":"83","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\browse.js":"84","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\addMaterialCode.js":"85","F:\\React code\\diagnostic\\src\\pages\\DC\\browse.js":"86","F:\\React code\\diagnostic\\src\\pages\\DC\\form.js":"87","F:\\React code\\diagnostic\\src\\components\\table-picker.js":"88","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\dc-add.js":"89","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\other.js":"90","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\general.js":"91","F:\\React code\\diagnostic\\src\\components\\basic-table.js":"92","F:\\React code\\diagnostic\\src\\pages\\Profile\\changePassword.js":"93","F:\\React code\\diagnostic\\src\\pages\\Profile\\attendance.js":"94","F:\\React code\\diagnostic\\src\\layouts\\Dashboard.js":"95","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\index.js":"96","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\index.js":"97","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\index.js":"98","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\index.js":"99","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\index.js":"100","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\index.js":"101","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\browse.js":"102","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\form.js":"103","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\addEntry.js":"104","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\browse.js":"105","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\addEntry.js":"106","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\browse.js":"107","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\browse.js":"108","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\addCombo.js":"109","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\tnc.js":"110","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\generalInfo.js":"111","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\contact_person.js":"112","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\index.js":"113","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\index.js":"114","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\index.js":"115","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\general.js":"116","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\index.js":"117","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\other.js":"118","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\index.js":"119","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\index.js":"120","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\index.js":"121","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\index.js":"122","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\index.js":"123","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\index.js":"124","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\index.js":"125","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\index.js":"126","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\index.js":"127","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\index.js":"128","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\index.js":"129","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\index.js":"130","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\index.js":"131","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\index.js":"132","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\index.js":"133","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\index.js":"134","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\index.js":"135","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\index.js":"136","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\index.js":"137","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\index.js":"138","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\form.js":"139","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\browse.js":"140","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\form.js":"141","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\browse.js":"142","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\browse.js":"143","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\form.js":"144","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\form.js":"145","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\browse.js":"146","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\browse.js":"147","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\form.js":"148","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\form.js":"149","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\browse.js":"150","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\browse.js":"151","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\form.js":"152","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\form.js":"153","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\form.js":"154","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\browse.js":"155","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\form.js":"156","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\browse.js":"157","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\form.js":"158","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\browse.js":"159","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\browse.js":"160","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\form.js":"161","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\form.js":"162","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\browse.js":"163","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\browse.js":"164","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\form.js":"165","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\browse.js":"166","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\form.js":"167","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\browse.js":"168","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\form.js":"169","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\form.js":"170","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\browse.js":"171","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\browse.js":"172","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\form.js":"173","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\browse.js":"174","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\form.js":"175","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\browse.js":"176","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\browse.js":"177","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\form.js":"178","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\index.js":"179","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\browse.js":"180","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\mdc-add.js":"181","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\index.js":"182","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\index.js":"183","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\add.js":"184","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\browse.js":"185","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\index.js":"186","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\add.js":"187","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\browse.js":"188","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\index.js":"189","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\subIndex.js":"190","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\add.js":"191","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\browse.js":"192","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\index.js":"193","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\index.js":"194","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\subIndex.js":"195","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\subIndex.js":"196","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\add.js":"197","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\browse.js":"198","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\add.js":"199","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\browse.js":"200","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\index.js":"201","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\add.js":"202","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\browse.js":"203","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\index.js":"204","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\index.js":"205","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\browse.js":"206","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\add.js":"207","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\add.js":"208","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\browse.js":"209","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\index.js":"210","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\add.js":"211","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\browse.js":"212","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\index.js":"213","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\add.js":"214","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\browse.js":"215","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\index.js":"216","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\add.js":"217","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\browse.js":"218","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\browse.js":"219","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\add.js":"220","F:\\React code\\diagnostic\\src\\components\\third_menu.js":"221","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\index.js":"222","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\index.js":"223","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\browse.js":"224","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\browse.js":"225","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\index.js":"226","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\browse.js":"227","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\index.js":"228","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\browse.js":"229","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\index.js":"230","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\browse.js":"231","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\index.js":"232","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\index.js":"233","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\index.js":"234","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\browse.js":"235","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\browse.js":"236","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\browse.js":"237","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\index.js":"238","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\index.js":"239","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\fright\\index.js":"240","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\ldClause\\index.js":"241","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\insurance\\index.js":"242","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\octrol\\index.js":"243","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\loading\\index.js":"244","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\boarding\\index.js":"245","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\travelCharge\\index.js":"246","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\delivery\\index.js":"247","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\paymentTerms\\index.js":"248","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\p&f\\index.js":"249","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\modeOfDispatch\\index.js":"250","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\validity\\index.js":"251","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\inspection\\index.js":"252","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\conveyance\\index.js":"253","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\fright\\browse.js":"254","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\ldClause\\browse.js":"255","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\ldClause\\form.js":"256","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\insurance\\browse.js":"257","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\fright\\form.js":"258","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\octrol\\browse.js":"259","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\insurance\\form.js":"260","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\octrol\\form.js":"261","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\boarding\\form.js":"262","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\boarding\\browse.js":"263","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\loading\\browse.js":"264","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\travelCharge\\browse.js":"265","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\travelCharge\\form.js":"266","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\delivery\\browse.js":"267","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\delivery\\form.js":"268","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\paymentTerms\\browse.js":"269","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\paymentTerms\\form.js":"270","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\p&f\\browse.js":"271","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\p&f\\form.js":"272","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\modeOfDispatch\\browse.js":"273","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\modeOfDispatch\\form.js":"274","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\validity\\browse.js":"275","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\loading\\form.js":"276","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\validity\\form.js":"277","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\inspection\\form.js":"278","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\conveyance\\browse.js":"279","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\conveyance\\form.js":"280","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\inspection\\browse.js":"281","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\subIndex.js":"282","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\form.js":"283","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\browse.js":"284","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\index.js":"285","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\subIndex.js":"286","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\browse.js":"287","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\form.js":"288","F:\\React code\\diagnostic\\src\\components\\leftModal.js":"289","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\tcs.js":"290","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\menustructure\\index.js":"291","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\menustructure\\browse.js":"292","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\menustructure\\form.js":"293"},{"size":969,"mtime":1673714205649,"results":"294","hashOfConfig":"295"},{"size":1997,"mtime":1673404743572,"results":"296","hashOfConfig":"295"},{"size":362,"mtime":1664465247078,"results":"297","hashOfConfig":"295"},{"size":725,"mtime":1672746138564,"results":"298","hashOfConfig":"295"},{"size":871,"mtime":1672739760215,"results":"299","hashOfConfig":"295"},{"size":3275,"mtime":1672937868439,"results":"300","hashOfConfig":"295"},{"size":7492,"mtime":1664465250715,"results":"301","hashOfConfig":"295"},{"size":2150,"mtime":1664465250481,"results":"302","hashOfConfig":"295"},{"size":1598,"mtime":1664465247717,"results":"303","hashOfConfig":"295"},{"size":3512,"mtime":1673088887549,"results":"304","hashOfConfig":"295"},{"size":2141,"mtime":1672894915970,"results":"305","hashOfConfig":"295"},{"size":1710,"mtime":1673793795430,"results":"306","hashOfConfig":"295"},{"size":1206,"mtime":1664465247861,"results":"307","hashOfConfig":"295"},{"size":2759,"mtime":1664465247902,"results":"308","hashOfConfig":"295"},{"size":3654,"mtime":1673763812954,"results":"309","hashOfConfig":"295"},{"size":1742,"mtime":1673793957029,"results":"310","hashOfConfig":"295"},{"size":3355,"mtime":1664465248757,"results":"311","hashOfConfig":"295"},{"size":1151,"mtime":1664465248687,"results":"312","hashOfConfig":"295"},{"size":2597,"mtime":1664465248647,"results":"313","hashOfConfig":"295"},{"size":2021,"mtime":1664465248794,"results":"314","hashOfConfig":"295"},{"size":2562,"mtime":1671513552935,"results":"315","hashOfConfig":"295"},{"size":935,"mtime":1665123133297,"results":"316","hashOfConfig":"295"},{"size":352,"mtime":1667539144668,"results":"317","hashOfConfig":"295"},{"size":1487,"mtime":1672940051723,"results":"318","hashOfConfig":"295"},{"size":3016,"mtime":1673411418256,"results":"319","hashOfConfig":"295"},{"size":1418,"mtime":1665121322768,"results":"320","hashOfConfig":"295"},{"size":821,"mtime":1664465249262,"results":"321","hashOfConfig":"295"},{"size":1882,"mtime":1673086137441,"results":"322","hashOfConfig":"295"},{"size":987,"mtime":1664465248256,"results":"323","hashOfConfig":"295"},{"size":1700,"mtime":1664465247989,"results":"324","hashOfConfig":"295"},{"size":6752,"mtime":1673531968708,"results":"325","hashOfConfig":"295"},{"size":854,"mtime":1664465249876,"results":"326","hashOfConfig":"295"},{"size":2593,"mtime":1664465248174,"results":"327","hashOfConfig":"295"},{"size":4659,"mtime":1673797726315,"results":"328","hashOfConfig":"295"},{"size":3237,"mtime":1664465248133,"results":"329","hashOfConfig":"295"},{"size":3000,"mtime":1673240487759,"results":"330","hashOfConfig":"295"},{"size":1280,"mtime":1671107283547,"results":"331","hashOfConfig":"295"},{"size":854,"mtime":1664465248435,"results":"332","hashOfConfig":"295"},{"size":1791,"mtime":1664465248304,"results":"333","hashOfConfig":"295"},{"size":5215,"mtime":1671453507416,"results":"334","hashOfConfig":"295"},{"size":2654,"mtime":1664465248341,"results":"335","hashOfConfig":"295"},{"size":2555,"mtime":1672935282388,"results":"336","hashOfConfig":"295"},{"size":1362,"mtime":1672939652842,"results":"337","hashOfConfig":"295"},{"size":8235,"mtime":1672103449180,"results":"338","hashOfConfig":"295"},{"size":752,"mtime":1664465249719,"results":"339","hashOfConfig":"295"},{"size":2763,"mtime":1669093367840,"results":"340","hashOfConfig":"295"},{"size":747,"mtime":1664465249565,"results":"341","hashOfConfig":"295"},{"size":5031,"mtime":1673766623140,"results":"342","hashOfConfig":"295"},{"size":3932,"mtime":1672644068048,"results":"343","hashOfConfig":"295"},{"size":4513,"mtime":1673531084750,"results":"344","hashOfConfig":"295"},{"size":9862,"mtime":1664465255812,"results":"345","hashOfConfig":"295"},{"size":7009,"mtime":1664465255771,"results":"346","hashOfConfig":"295"},{"size":7019,"mtime":1664465255727,"results":"347","hashOfConfig":"295"},{"size":4098,"mtime":1664465250835,"results":"348","hashOfConfig":"295"},{"size":13010,"mtime":1672472036044,"results":"349","hashOfConfig":"295"},{"size":8206,"mtime":1669024172465,"results":"350","hashOfConfig":"295"},{"size":4828,"mtime":1664465251386,"results":"351","hashOfConfig":"295"},{"size":1503,"mtime":1671089471287,"results":"352","hashOfConfig":"295"},{"size":1714,"mtime":1671089286052,"results":"353","hashOfConfig":"295"},{"size":1245,"mtime":1671088781246,"results":"354","hashOfConfig":"295"},{"size":338,"mtime":1673680153316,"results":"355","hashOfConfig":"295"},{"size":1302,"mtime":1664465250669,"results":"356","hashOfConfig":"295"},{"size":1380,"mtime":1667992264500,"results":"357","hashOfConfig":"295"},{"size":1938,"mtime":1672937527970,"results":"358","hashOfConfig":"295"},{"size":1598,"mtime":1673768736560,"results":"359","hashOfConfig":"295"},{"size":3385,"mtime":1673261600696,"results":"360","hashOfConfig":"295"},{"size":1263,"mtime":1664465255644,"results":"361","hashOfConfig":"295"},{"size":1510,"mtime":1664465255132,"results":"362","hashOfConfig":"295"},{"size":1655,"mtime":1673785947156,"results":"363","hashOfConfig":"295"},{"size":1523,"mtime":1671090696149,"results":"364","hashOfConfig":"295"},{"size":2869,"mtime":1669015899837,"results":"365","hashOfConfig":"295"},{"size":601,"mtime":1666166562902,"results":"366","hashOfConfig":"295"},{"size":288,"mtime":1664465249473,"results":"367","hashOfConfig":"295"},{"size":12991,"mtime":1671088750094,"results":"368","hashOfConfig":"295"},{"size":10100,"mtime":1671089007349,"results":"369","hashOfConfig":"295"},{"size":6231,"mtime":1671089082877,"results":"370","hashOfConfig":"295"},{"size":10200,"mtime":1671089330684,"results":"371","hashOfConfig":"295"},{"size":6572,"mtime":1664465251099,"results":"372","hashOfConfig":"295"},{"size":14747,"mtime":1671091301387,"results":"373","hashOfConfig":"295"},{"size":4641,"mtime":1673752607362,"results":"374","hashOfConfig":"295"},{"size":20836,"mtime":1673846313930,"results":"375","hashOfConfig":"295"},{"size":5606,"mtime":1671090699409,"results":"376","hashOfConfig":"295"},{"size":19350,"mtime":1664465254657,"results":"377","hashOfConfig":"295"},{"size":6543,"mtime":1672383966568,"results":"378","hashOfConfig":"295"},{"size":18387,"mtime":1672384733903,"results":"379","hashOfConfig":"295"},{"size":4529,"mtime":1664465255602,"results":"380","hashOfConfig":"295"},{"size":12382,"mtime":1666079914071,"results":"381","hashOfConfig":"295"},{"size":10586,"mtime":1665129638317,"results":"382","hashOfConfig":"295"},{"size":19602,"mtime":1665059518731,"results":"383","hashOfConfig":"295"},{"size":7219,"mtime":1664465254437,"results":"384","hashOfConfig":"295"},{"size":10195,"mtime":1671090353875,"results":"385","hashOfConfig":"295"},{"size":3230,"mtime":1666157690356,"results":"386","hashOfConfig":"295"},{"size":3659,"mtime":1664465250912,"results":"387","hashOfConfig":"295"},{"size":6210,"mtime":1664465250876,"results":"388","hashOfConfig":"295"},{"size":197,"mtime":1664465249948,"results":"389","hashOfConfig":"295"},{"size":2767,"mtime":1673675418451,"results":"390","hashOfConfig":"295"},{"size":1545,"mtime":1664465251430,"results":"391","hashOfConfig":"295"},{"size":4524,"mtime":1672911462358,"results":"392","hashOfConfig":"295"},{"size":1606,"mtime":1671090124281,"results":"393","hashOfConfig":"295"},{"size":1562,"mtime":1664465255324,"results":"394","hashOfConfig":"295"},{"size":1273,"mtime":1671091105449,"results":"395","hashOfConfig":"295"},{"size":16532,"mtime":1673850484158,"results":"396","hashOfConfig":"295"},{"size":7194,"mtime":1673716730593,"results":"397","hashOfConfig":"295"},{"size":3530,"mtime":1671090117127,"results":"398","hashOfConfig":"295"},{"size":5913,"mtime":1664465255468,"results":"399","hashOfConfig":"295"},{"size":5753,"mtime":1671089837864,"results":"400","hashOfConfig":"295"},{"size":9560,"mtime":1671091102076,"results":"401","hashOfConfig":"295"},{"size":4820,"mtime":1671089840975,"results":"402","hashOfConfig":"295"},{"size":8814,"mtime":1671089643462,"results":"403","hashOfConfig":"295"},{"size":10985,"mtime":1673624331903,"results":"404","hashOfConfig":"295"},{"size":12321,"mtime":1673714232072,"results":"405","hashOfConfig":"295"},{"size":7281,"mtime":1673547111485,"results":"406","hashOfConfig":"295"},{"size":1661,"mtime":1664465251530,"results":"407","hashOfConfig":"295"},{"size":1820,"mtime":1664465253800,"results":"408","hashOfConfig":"295"},{"size":2081,"mtime":1670090667586,"results":"409","hashOfConfig":"295"},{"size":11537,"mtime":1671089829454,"results":"410","hashOfConfig":"295"},{"size":2589,"mtime":1670090667578,"results":"411","hashOfConfig":"295"},{"size":3575,"mtime":1671090121335,"results":"412","hashOfConfig":"295"},{"size":1693,"mtime":1670994750274,"results":"413","hashOfConfig":"295"},{"size":1696,"mtime":1671012858477,"results":"414","hashOfConfig":"295"},{"size":1701,"mtime":1671012854776,"results":"415","hashOfConfig":"295"},{"size":1687,"mtime":1670997795608,"results":"416","hashOfConfig":"295"},{"size":1699,"mtime":1670509372981,"results":"417","hashOfConfig":"295"},{"size":1702,"mtime":1670999689297,"results":"418","hashOfConfig":"295"},{"size":1699,"mtime":1670999280348,"results":"419","hashOfConfig":"295"},{"size":1699,"mtime":1671001367265,"results":"420","hashOfConfig":"295"},{"size":1687,"mtime":1670513534765,"results":"421","hashOfConfig":"295"},{"size":1690,"mtime":1670470777240,"results":"422","hashOfConfig":"295"},{"size":1687,"mtime":1670514834781,"results":"423","hashOfConfig":"295"},{"size":1681,"mtime":1671528515903,"results":"424","hashOfConfig":"295"},{"size":1444,"mtime":1670387199255,"results":"425","hashOfConfig":"295"},{"size":1690,"mtime":1670386369416,"results":"426","hashOfConfig":"295"},{"size":1693,"mtime":1670423674723,"results":"427","hashOfConfig":"295"},{"size":1693,"mtime":1670422876753,"results":"428","hashOfConfig":"295"},{"size":1708,"mtime":1670425143890,"results":"429","hashOfConfig":"295"},{"size":1696,"mtime":1670434669403,"results":"430","hashOfConfig":"295"},{"size":1705,"mtime":1670423972568,"results":"431","hashOfConfig":"295"},{"size":1706,"mtime":1670433345705,"results":"432","hashOfConfig":"295"},{"size":3263,"mtime":1671524310001,"results":"433","hashOfConfig":"295"},{"size":5864,"mtime":1671011026618,"results":"434","hashOfConfig":"295"},{"size":5596,"mtime":1671511276852,"results":"435","hashOfConfig":"295"},{"size":5715,"mtime":1671514812814,"results":"436","hashOfConfig":"295"},{"size":5874,"mtime":1671011287382,"results":"437","hashOfConfig":"295"},{"size":3282,"mtime":1671524099569,"results":"438","hashOfConfig":"295"},{"size":3264,"mtime":1671528813384,"results":"439","hashOfConfig":"295"},{"size":5882,"mtime":1670997136868,"results":"440","hashOfConfig":"295"},{"size":5919,"mtime":1672311302009,"results":"441","hashOfConfig":"295"},{"size":3252,"mtime":1671523956735,"results":"442","hashOfConfig":"295"},{"size":3309,"mtime":1671523808212,"results":"443","hashOfConfig":"295"},{"size":5972,"mtime":1672309313308,"results":"444","hashOfConfig":"295"},{"size":5914,"mtime":1672311283906,"results":"445","hashOfConfig":"295"},{"size":3203,"mtime":1671523661385,"results":"446","hashOfConfig":"295"},{"size":3321,"mtime":1671523055943,"results":"447","hashOfConfig":"295"},{"size":3263,"mtime":1671523923591,"results":"448","hashOfConfig":"295"},{"size":5983,"mtime":1672311158303,"results":"449","hashOfConfig":"295"},{"size":3645,"mtime":1671523217729,"results":"450","hashOfConfig":"295"},{"size":5940,"mtime":1672311262073,"results":"451","hashOfConfig":"295"},{"size":3244,"mtime":1671523830361,"results":"452","hashOfConfig":"295"},{"size":5928,"mtime":1672311225274,"results":"453","hashOfConfig":"295"},{"size":5959,"mtime":1672375960461,"results":"454","hashOfConfig":"295"},{"size":4796,"mtime":1671523889812,"results":"455","hashOfConfig":"295"},{"size":3211,"mtime":1671528503098,"results":"456","hashOfConfig":"295"},{"size":6112,"mtime":1672311228747,"results":"457","hashOfConfig":"295"},{"size":5812,"mtime":1671514900341,"results":"458","hashOfConfig":"295"},{"size":3191,"mtime":1671528227316,"results":"459","hashOfConfig":"295"},{"size":5820,"mtime":1671514943630,"results":"460","hashOfConfig":"295"},{"size":3268,"mtime":1671527852111,"results":"461","hashOfConfig":"295"},{"size":5859,"mtime":1671514913631,"results":"462","hashOfConfig":"295"},{"size":3234,"mtime":1671528129707,"results":"463","hashOfConfig":"295"},{"size":3214,"mtime":1671529335002,"results":"464","hashOfConfig":"295"},{"size":5832,"mtime":1671514927685,"results":"465","hashOfConfig":"295"},{"size":5739,"mtime":1671529293426,"results":"466","hashOfConfig":"295"},{"size":3304,"mtime":1671524646678,"results":"467","hashOfConfig":"295"},{"size":5907,"mtime":1670999174173,"results":"468","hashOfConfig":"295"},{"size":3197,"mtime":1671529163877,"results":"469","hashOfConfig":"295"},{"size":5751,"mtime":1671529149921,"results":"470","hashOfConfig":"295"},{"size":5886,"mtime":1671514886169,"results":"471","hashOfConfig":"295"},{"size":3331,"mtime":1671527941025,"results":"472","hashOfConfig":"295"},{"size":1421,"mtime":1666841696417,"results":"473","hashOfConfig":"295"},{"size":7288,"mtime":1668422935518,"results":"474","hashOfConfig":"295"},{"size":16052,"mtime":1671013970983,"results":"475","hashOfConfig":"295"},{"size":1238,"mtime":1669025817453,"results":"476","hashOfConfig":"295"},{"size":1726,"mtime":1667547182252,"results":"477","hashOfConfig":"295"},{"size":22329,"mtime":1666863148276,"results":"478","hashOfConfig":"295"},{"size":7323,"mtime":1669097436843,"results":"479","hashOfConfig":"295"},{"size":2294,"mtime":1669030731263,"results":"480","hashOfConfig":"295"},{"size":22310,"mtime":1667308011121,"results":"481","hashOfConfig":"482"},{"size":6240,"mtime":1669098769887,"results":"483","hashOfConfig":"295"},{"size":1786,"mtime":1667547440810,"results":"484","hashOfConfig":"295"},{"size":0,"mtime":1667547544048,"results":"485","hashOfConfig":"482"},{"size":22318,"mtime":1667450307833,"results":"486","hashOfConfig":"295"},{"size":7389,"mtime":1669099708591,"results":"487","hashOfConfig":"295"},{"size":1767,"mtime":1667545984025,"results":"488","hashOfConfig":"295"},{"size":1737,"mtime":1669107803333,"results":"489","hashOfConfig":"295"},{"size":0,"mtime":1667546008926,"results":"490","hashOfConfig":"482"},{"size":0,"mtime":1667546147352,"results":"491","hashOfConfig":"482"},{"size":22318,"mtime":1667453035832,"results":"492","hashOfConfig":"295"},{"size":6788,"mtime":1669101063275,"results":"493","hashOfConfig":"295"},{"size":22310,"mtime":1667309910121,"results":"494","hashOfConfig":"295"},{"size":6792,"mtime":1669100284688,"results":"495","hashOfConfig":"295"},{"size":1845,"mtime":1667451015930,"results":"496","hashOfConfig":"295"},{"size":22325,"mtime":1667451297886,"results":"497","hashOfConfig":"295"},{"size":7138,"mtime":1669100457690,"results":"498","hashOfConfig":"295"},{"size":1738,"mtime":1667453118288,"results":"499","hashOfConfig":"295"},{"size":1753,"mtime":1667453402663,"results":"500","hashOfConfig":"295"},{"size":6834,"mtime":1669103531690,"results":"501","hashOfConfig":"295"},{"size":22333,"mtime":1667453140755,"results":"502","hashOfConfig":"295"},{"size":22341,"mtime":1667452462569,"results":"503","hashOfConfig":"295"},{"size":6469,"mtime":1669031746012,"results":"504","hashOfConfig":"295"},{"size":1734,"mtime":1667453499743,"results":"505","hashOfConfig":"295"},{"size":22333,"mtime":1667453611629,"results":"506","hashOfConfig":"295"},{"size":7021,"mtime":1669099658663,"results":"507","hashOfConfig":"295"},{"size":1714,"mtime":1667454019466,"results":"508","hashOfConfig":"295"},{"size":22338,"mtime":1667454658415,"results":"509","hashOfConfig":"295"},{"size":6798,"mtime":1669097426929,"results":"510","hashOfConfig":"295"},{"size":1353,"mtime":1667454814781,"results":"511","hashOfConfig":"295"},{"size":22321,"mtime":1667454865819,"results":"512","hashOfConfig":"295"},{"size":6586,"mtime":1669099030035,"results":"513","hashOfConfig":"295"},{"size":7245,"mtime":1669098183832,"results":"514","hashOfConfig":"295"},{"size":22323,"mtime":1667455442730,"results":"515","hashOfConfig":"295"},{"size":2616,"mtime":1672933112840,"results":"516","hashOfConfig":"295"},{"size":1321,"mtime":1668950542070,"results":"517","hashOfConfig":"295"},{"size":1305,"mtime":1668950598983,"results":"518","hashOfConfig":"295"},{"size":15689,"mtime":1668750883399,"results":"519","hashOfConfig":"295"},{"size":15681,"mtime":1668751099955,"results":"520","hashOfConfig":"295"},{"size":1326,"mtime":1668950637114,"results":"521","hashOfConfig":"295"},{"size":15529,"mtime":1671091098175,"results":"522","hashOfConfig":"295"},{"size":1312,"mtime":1668950707997,"results":"523","hashOfConfig":"295"},{"size":15396,"mtime":1671091297991,"results":"524","hashOfConfig":"295"},{"size":1285,"mtime":1669093760575,"results":"525","hashOfConfig":"295"},{"size":15698,"mtime":1669033403415,"results":"526","hashOfConfig":"295"},{"size":1397,"mtime":1669093938615,"results":"527","hashOfConfig":"295"},{"size":1339,"mtime":1669093912796,"results":"528","hashOfConfig":"295"},{"size":1352,"mtime":1669093884619,"results":"529","hashOfConfig":"295"},{"size":15700,"mtime":1669092712976,"results":"530","hashOfConfig":"295"},{"size":15710,"mtime":1669092741763,"results":"531","hashOfConfig":"295"},{"size":15724,"mtime":1669033910888,"results":"532","hashOfConfig":"295"},{"size":3408,"mtime":1670778729874,"results":"533","hashOfConfig":"295"},{"size":1924,"mtime":1671292523513,"results":"534","hashOfConfig":"295"},{"size":1694,"mtime":1670779421814,"results":"535","hashOfConfig":"295"},{"size":1700,"mtime":1670779334939,"results":"536","hashOfConfig":"295"},{"size":1702,"mtime":1671252638249,"results":"537","hashOfConfig":"295"},{"size":1693,"mtime":1671252598081,"results":"538","hashOfConfig":"295"},{"size":1696,"mtime":1671253168629,"results":"539","hashOfConfig":"295"},{"size":1699,"mtime":1671253139567,"results":"540","hashOfConfig":"295"},{"size":1705,"mtime":1671253647378,"results":"541","hashOfConfig":"295"},{"size":1699,"mtime":1671256158706,"results":"542","hashOfConfig":"295"},{"size":1706,"mtime":1671255654286,"results":"543","hashOfConfig":"295"},{"size":1681,"mtime":1671252576795,"results":"544","hashOfConfig":"295"},{"size":1719,"mtime":1671256972864,"results":"545","hashOfConfig":"295"},{"size":1699,"mtime":1671256722514,"results":"546","hashOfConfig":"295"},{"size":1705,"mtime":1671257324687,"results":"547","hashOfConfig":"295"},{"size":1705,"mtime":1671253995181,"results":"548","hashOfConfig":"295"},{"size":5877,"mtime":1671515007200,"results":"549","hashOfConfig":"295"},{"size":5820,"mtime":1671430251999,"results":"550","hashOfConfig":"295"},{"size":3231,"mtime":1671529642812,"results":"551","hashOfConfig":"295"},{"size":5897,"mtime":1671515035703,"results":"552","hashOfConfig":"295"},{"size":3283,"mtime":1671529521507,"results":"553","hashOfConfig":"295"},{"size":5867,"mtime":1671515083946,"results":"554","hashOfConfig":"295"},{"size":3688,"mtime":1671529616090,"results":"555","hashOfConfig":"295"},{"size":3265,"mtime":1671529717290,"results":"556","hashOfConfig":"295"},{"size":3291,"mtime":1671529463996,"results":"557","hashOfConfig":"295"},{"size":5887,"mtime":1671514972429,"results":"558","hashOfConfig":"295"},{"size":5878,"mtime":1671515059075,"results":"559","hashOfConfig":"295"},{"size":5867,"mtime":1671515120027,"results":"560","hashOfConfig":"295"},{"size":3265,"mtime":1671529792486,"results":"561","hashOfConfig":"295"},{"size":5887,"mtime":1671255970110,"results":"562","hashOfConfig":"295"},{"size":3291,"mtime":1671529495455,"results":"563","hashOfConfig":"295"},{"size":5877,"mtime":1671515106263,"results":"564","hashOfConfig":"295"},{"size":3278,"mtime":1671529764972,"results":"565","hashOfConfig":"295"},{"size":5827,"mtime":1671252559442,"results":"566","hashOfConfig":"295"},{"size":3213,"mtime":1671529738876,"results":"567","hashOfConfig":"295"},{"size":5931,"mtime":1671515071307,"results":"568","hashOfConfig":"295"},{"size":3383,"mtime":1671529696617,"results":"569","hashOfConfig":"295"},{"size":5887,"mtime":1671515148411,"results":"570","hashOfConfig":"295"},{"size":3278,"mtime":1671529664967,"results":"571","hashOfConfig":"295"},{"size":3291,"mtime":1671529817369,"results":"572","hashOfConfig":"295"},{"size":3318,"mtime":1671529549821,"results":"573","hashOfConfig":"295"},{"size":5888,"mtime":1671430266552,"results":"574","hashOfConfig":"295"},{"size":3317,"mtime":1671529455251,"results":"575","hashOfConfig":"295"},{"size":5907,"mtime":1671515020426,"results":"576","hashOfConfig":"295"},{"size":1699,"mtime":1671292582632,"results":"577","hashOfConfig":"295"},{"size":3244,"mtime":1671524787124,"results":"578","hashOfConfig":"295"},{"size":5834,"mtime":1671514957475,"results":"579","hashOfConfig":"295"},{"size":1843,"mtime":1671293454952,"results":"580","hashOfConfig":"295"},{"size":1696,"mtime":1671287294702,"results":"581","hashOfConfig":"295"},{"size":5865,"mtime":1671514826963,"results":"582","hashOfConfig":"295"},{"size":3270,"mtime":1671524591407,"results":"583","hashOfConfig":"295"},{"size":11691,"mtime":1672304817669,"results":"584","hashOfConfig":"295"},{"size":6093,"mtime":1673769172638,"results":"585","hashOfConfig":"295"},{"size":1739,"mtime":1672922335320,"results":"586","hashOfConfig":"295"},{"size":6575,"mtime":1672991387718,"results":"587","hashOfConfig":"295"},{"size":5773,"mtime":1672999348068,"results":"588","hashOfConfig":"295"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},"1ckb6x1",{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"591"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605","usedDeprecatedRules":"591"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"591"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"591"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"591"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"591"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"591"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"591"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"591"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"591"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"591"},{"filePath":"693","messages":"694","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"591"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"591"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705","usedDeprecatedRules":"591"},{"filePath":"706","messages":"707","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"591"},{"filePath":"709","messages":"710","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"591"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"714","messages":"715","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"716","usedDeprecatedRules":"591"},{"filePath":"717","messages":"718","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"719","usedDeprecatedRules":"591"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"722","usedDeprecatedRules":"591"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725","usedDeprecatedRules":"591"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"591"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"731","usedDeprecatedRules":"591"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"591"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"739","usedDeprecatedRules":"591"},{"filePath":"740","messages":"741","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"742","usedDeprecatedRules":"591"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"747","messages":"748","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749","usedDeprecatedRules":"591"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"752","usedDeprecatedRules":"591"},{"filePath":"753","messages":"754","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755","usedDeprecatedRules":"591"},{"filePath":"756","messages":"757","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758","usedDeprecatedRules":"591"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"761","usedDeprecatedRules":"591"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"766","usedDeprecatedRules":"591"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"769","usedDeprecatedRules":"591"},{"filePath":"770","messages":"771","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"772","usedDeprecatedRules":"591"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"775","usedDeprecatedRules":"591"},{"filePath":"776","messages":"777","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"778","usedDeprecatedRules":"591"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"781","usedDeprecatedRules":"591"},{"filePath":"782","messages":"783","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"784","usedDeprecatedRules":"591"},{"filePath":"785","messages":"786","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787","usedDeprecatedRules":"591"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"790","messages":"791","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"792","usedDeprecatedRules":"591"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"795","usedDeprecatedRules":"591"},{"filePath":"796","messages":"797","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"798","usedDeprecatedRules":"591"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801","usedDeprecatedRules":"591"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"804","usedDeprecatedRules":"591"},{"filePath":"805","messages":"806","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"807","usedDeprecatedRules":"591"},{"filePath":"808","messages":"809","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"810","usedDeprecatedRules":"591"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"813","usedDeprecatedRules":"591"},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"822","usedDeprecatedRules":"591"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"825","usedDeprecatedRules":"591"},{"filePath":"826","messages":"827","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"828","messages":"829","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830","usedDeprecatedRules":"591"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"833","usedDeprecatedRules":"591"},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"836","messages":"837","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"838","usedDeprecatedRules":"591"},{"filePath":"839","messages":"840","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"841","usedDeprecatedRules":"591"},{"filePath":"842","messages":"843","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"844","usedDeprecatedRules":"591"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"847","messages":"848","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"849","usedDeprecatedRules":"591"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"591"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"591"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"858","usedDeprecatedRules":"591"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"861","usedDeprecatedRules":"591"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864","usedDeprecatedRules":"591"},{"filePath":"865","messages":"866","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"867","usedDeprecatedRules":"591"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"872","usedDeprecatedRules":"591"},{"filePath":"873","messages":"874","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"875","usedDeprecatedRules":"591"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"878","usedDeprecatedRules":"591"},{"filePath":"879","messages":"880","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"881","usedDeprecatedRules":"591"},{"filePath":"882","messages":"883","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"884","usedDeprecatedRules":"591"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"887","messages":"888","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"889","usedDeprecatedRules":"591"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"910","messages":"911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"932","messages":"933","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"934","usedDeprecatedRules":"591"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"937","usedDeprecatedRules":"591"},{"filePath":"938","messages":"939","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"940","usedDeprecatedRules":"591"},{"filePath":"941","messages":"942","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"943","usedDeprecatedRules":"591"},{"filePath":"944","messages":"945","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946","usedDeprecatedRules":"591"},{"filePath":"947","messages":"948","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"949","usedDeprecatedRules":"591"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"952","usedDeprecatedRules":"591"},{"filePath":"953","messages":"954","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"955","usedDeprecatedRules":"591"},{"filePath":"956","messages":"957","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"958","usedDeprecatedRules":"591"},{"filePath":"959","messages":"960","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961","usedDeprecatedRules":"591"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"964","usedDeprecatedRules":"591"},{"filePath":"965","messages":"966","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"967","usedDeprecatedRules":"591"},{"filePath":"968","messages":"969","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"970","usedDeprecatedRules":"591"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973","usedDeprecatedRules":"591"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"591"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"591"},{"filePath":"980","messages":"981","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"982","usedDeprecatedRules":"591"},{"filePath":"983","messages":"984","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"985","usedDeprecatedRules":"591"},{"filePath":"986","messages":"987","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"988","usedDeprecatedRules":"591"},{"filePath":"989","messages":"990","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"991","usedDeprecatedRules":"591"},{"filePath":"992","messages":"993","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"994","usedDeprecatedRules":"591"},{"filePath":"995","messages":"996","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"997","usedDeprecatedRules":"591"},{"filePath":"998","messages":"999","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1000","usedDeprecatedRules":"591"},{"filePath":"1001","messages":"1002","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1003","usedDeprecatedRules":"591"},{"filePath":"1004","messages":"1005","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1006","usedDeprecatedRules":"591"},{"filePath":"1007","messages":"1008","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1009","usedDeprecatedRules":"591"},{"filePath":"1010","messages":"1011","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1012","usedDeprecatedRules":"591"},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1015","usedDeprecatedRules":"591"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1018","usedDeprecatedRules":"591"},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1021","usedDeprecatedRules":"591"},{"filePath":"1022","messages":"1023","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1024","usedDeprecatedRules":"591"},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1027","usedDeprecatedRules":"591"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030","usedDeprecatedRules":"591"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1033","usedDeprecatedRules":"591"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1036","usedDeprecatedRules":"591"},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1039","usedDeprecatedRules":"591"},{"filePath":"1040","messages":"1041","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1042","usedDeprecatedRules":"591"},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1045","usedDeprecatedRules":"591"},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1048","usedDeprecatedRules":"591"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1051","usedDeprecatedRules":"591"},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1054","usedDeprecatedRules":"591"},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1057","usedDeprecatedRules":"591"},{"filePath":"1058","messages":"1059","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1060","usedDeprecatedRules":"591"},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1063","usedDeprecatedRules":"591"},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1066","usedDeprecatedRules":"591"},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1069","usedDeprecatedRules":"591"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1072","usedDeprecatedRules":"591"},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1075","usedDeprecatedRules":"591"},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1sohe9q",{"filePath":"1078","messages":"1079","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1080","usedDeprecatedRules":"591"},{"filePath":"1081","messages":"1082","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1083","usedDeprecatedRules":"591"},{"filePath":"1084","messages":"1085","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1086","usedDeprecatedRules":"1087"},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1090","usedDeprecatedRules":"591"},{"filePath":"1091","messages":"1092","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1093","usedDeprecatedRules":"591"},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1096","usedDeprecatedRules":"591"},{"filePath":"1097","messages":"1098","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1099","usedDeprecatedRules":"591"},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1102","usedDeprecatedRules":"1087"},{"filePath":"1103","messages":"1104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1105","messages":"1106","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1107","usedDeprecatedRules":"591"},{"filePath":"1108","messages":"1109","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1110","usedDeprecatedRules":"591"},{"filePath":"1111","messages":"1112","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1113","usedDeprecatedRules":"591"},{"filePath":"1114","messages":"1115","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1116","usedDeprecatedRules":"591"},{"filePath":"1117","messages":"1118","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1119","usedDeprecatedRules":"591"},{"filePath":"1120","messages":"1121","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1122","usedDeprecatedRules":"591"},{"filePath":"1123","messages":"1124","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1125","usedDeprecatedRules":"591"},{"filePath":"1126","messages":"1127","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1128","usedDeprecatedRules":"591"},{"filePath":"1129","messages":"1130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1131","usedDeprecatedRules":"591"},{"filePath":"1132","messages":"1133","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1134","usedDeprecatedRules":"591"},{"filePath":"1135","messages":"1136","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1137","usedDeprecatedRules":"591"},{"filePath":"1138","messages":"1139","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1140","usedDeprecatedRules":"591"},{"filePath":"1141","messages":"1142","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1143","usedDeprecatedRules":"591"},{"filePath":"1144","messages":"1145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1146","usedDeprecatedRules":"591"},{"filePath":"1147","messages":"1148","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1149","usedDeprecatedRules":"591"},{"filePath":"1150","messages":"1151","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1152","usedDeprecatedRules":"591"},{"filePath":"1153","messages":"1154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1155","usedDeprecatedRules":"591"},{"filePath":"1156","messages":"1157","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1158","usedDeprecatedRules":"591"},{"filePath":"1159","messages":"1160","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1161","usedDeprecatedRules":"591"},{"filePath":"1162","messages":"1163","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1164","usedDeprecatedRules":"591"},{"filePath":"1165","messages":"1166","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1167","usedDeprecatedRules":"591"},{"filePath":"1168","messages":"1169","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1170","usedDeprecatedRules":"591"},{"filePath":"1171","messages":"1172","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1173","usedDeprecatedRules":"591"},{"filePath":"1174","messages":"1175","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1176","usedDeprecatedRules":"591"},{"filePath":"1177","messages":"1178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1179","usedDeprecatedRules":"591"},{"filePath":"1180","messages":"1181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1182","usedDeprecatedRules":"591"},{"filePath":"1183","messages":"1184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1185","usedDeprecatedRules":"591"},{"filePath":"1186","messages":"1187","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1188","usedDeprecatedRules":"591"},{"filePath":"1189","messages":"1190","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1191","usedDeprecatedRules":"591"},{"filePath":"1192","messages":"1193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1194","usedDeprecatedRules":"591"},{"filePath":"1195","messages":"1196","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1197","usedDeprecatedRules":"591"},{"filePath":"1198","messages":"1199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1200","usedDeprecatedRules":"591"},{"filePath":"1201","messages":"1202","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1203","usedDeprecatedRules":"591"},{"filePath":"1204","messages":"1205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1206","usedDeprecatedRules":"591"},{"filePath":"1207","messages":"1208","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1209","usedDeprecatedRules":"591"},{"filePath":"1210","messages":"1211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1212","usedDeprecatedRules":"591"},{"filePath":"1213","messages":"1214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1215","usedDeprecatedRules":"591"},{"filePath":"1216","messages":"1217","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1218","usedDeprecatedRules":"591"},{"filePath":"1219","messages":"1220","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1221","usedDeprecatedRules":"591"},{"filePath":"1222","messages":"1223","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1224","usedDeprecatedRules":"591"},{"filePath":"1225","messages":"1226","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1227","usedDeprecatedRules":"591"},{"filePath":"1228","messages":"1229","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1230","usedDeprecatedRules":"591"},{"filePath":"1231","messages":"1232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1233","messages":"1234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1235","messages":"1236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1237","messages":"1238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1239","messages":"1240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1241","messages":"1242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1243","messages":"1244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1245","messages":"1246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1247","messages":"1248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1249","messages":"1250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1251","messages":"1252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1253","messages":"1254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1255","messages":"1256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1257","messages":"1258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1259","messages":"1260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1261","messages":"1262","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1263","usedDeprecatedRules":"591"},{"filePath":"1264","messages":"1265","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1266","usedDeprecatedRules":"591"},{"filePath":"1267","messages":"1268","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1269","usedDeprecatedRules":"591"},{"filePath":"1270","messages":"1271","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1272","usedDeprecatedRules":"591"},{"filePath":"1273","messages":"1274","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1275","usedDeprecatedRules":"591"},{"filePath":"1276","messages":"1277","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1278","usedDeprecatedRules":"591"},{"filePath":"1279","messages":"1280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1281","usedDeprecatedRules":"591"},{"filePath":"1282","messages":"1283","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1284","usedDeprecatedRules":"591"},{"filePath":"1285","messages":"1286","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1287","usedDeprecatedRules":"591"},{"filePath":"1288","messages":"1289","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1290","usedDeprecatedRules":"591"},{"filePath":"1291","messages":"1292","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1293","usedDeprecatedRules":"591"},{"filePath":"1294","messages":"1295","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1296","usedDeprecatedRules":"591"},{"filePath":"1297","messages":"1298","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1299","usedDeprecatedRules":"591"},{"filePath":"1300","messages":"1301","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1302","usedDeprecatedRules":"591"},{"filePath":"1303","messages":"1304","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1305","usedDeprecatedRules":"591"},{"filePath":"1306","messages":"1307","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1308","usedDeprecatedRules":"591"},{"filePath":"1309","messages":"1310","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1311","usedDeprecatedRules":"591"},{"filePath":"1312","messages":"1313","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1314","usedDeprecatedRules":"591"},{"filePath":"1315","messages":"1316","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1317","usedDeprecatedRules":"591"},{"filePath":"1318","messages":"1319","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1320","usedDeprecatedRules":"591"},{"filePath":"1321","messages":"1322","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1323","usedDeprecatedRules":"591"},{"filePath":"1324","messages":"1325","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1326","usedDeprecatedRules":"591"},{"filePath":"1327","messages":"1328","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1329","usedDeprecatedRules":"591"},{"filePath":"1330","messages":"1331","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1332","usedDeprecatedRules":"591"},{"filePath":"1333","messages":"1334","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1335","usedDeprecatedRules":"591"},{"filePath":"1336","messages":"1337","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1338","usedDeprecatedRules":"591"},{"filePath":"1339","messages":"1340","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1341","usedDeprecatedRules":"591"},{"filePath":"1342","messages":"1343","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1344","usedDeprecatedRules":"591"},{"filePath":"1345","messages":"1346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1347","messages":"1348","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1349","usedDeprecatedRules":"591"},{"filePath":"1350","messages":"1351","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1352","usedDeprecatedRules":"591"},{"filePath":"1353","messages":"1354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1355","messages":"1356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1357","messages":"1358","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1359","usedDeprecatedRules":"591"},{"filePath":"1360","messages":"1361","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1362","usedDeprecatedRules":"591"},{"filePath":"1363","messages":"1364","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1365","usedDeprecatedRules":"591"},{"filePath":"1366","messages":"1367","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1368","usedDeprecatedRules":"591"},{"filePath":"1369","messages":"1370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"591"},{"filePath":"1371","messages":"1372","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1373","usedDeprecatedRules":"591"},{"filePath":"1374","messages":"1375","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1376","usedDeprecatedRules":"591"},"F:\\React code\\diagnostic\\src\\index.js",[],["1377","1378"],"F:\\React code\\diagnostic\\src\\App.js",[],"F:\\React code\\diagnostic\\src\\reportWebVitals.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\index.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\index.js",[],"F:\\React code\\diagnostic\\src\\layouts\\layout.js",["1379","1380","1381","1382","1383","1384","1385","1386","1387","1388"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, Switch } from \"react-router-dom\";\r\nimport CustomBreadcrumb from \"../components/breadcrumbs\";\r\nimport Header from \"../components/header\";\r\nimport RouteWithSubRoutes from \"../components/RouteWithSubRoutes\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport routes from \"../routes\";\r\nimport {\r\n  getUserFilterList,\r\n  getUserRightList,\r\n} from \"../_redux/actions/common.action\";\r\n\r\nconst MainLayout = () => {\r\n  const dispatch = useDispatch();\r\n  const [showSideBar, setShowSidebar] = useState(false);\r\n  const [pinSidebar, setPinSidebar] = useState(false);\r\n  const [userRightListArr, setUserRightList] = useState([]);\r\n  const getuserRightListResponse = useSelector(\r\n    (state) => state.common.userRightList\r\n  );\r\n\r\n  const [subMenuList, setSubMenuList] = useState([]);\r\n  const [selectedItems, setSelectedItems] = useState({\r\n    main: null,\r\n    subMenu: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserRightList());\r\n    // dispatch(getUserFilterList());\r\n  }, []);\r\n\r\n  const groupBy = (array, key) => {\r\n    // Return the end result\r\n    return array.reduce((result, currentValue) => {\r\n      // If an array already present for key, push it to the array. Else create an array and push the object\r\n      (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n        currentValue\r\n      );\r\n      // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\r\n      return result;\r\n    }, {}); // empty object is the initial value for result object\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (getuserRightListResponse?.length > 0) {\r\n      const groupedMenu = groupBy(getuserRightListResponse, \"group_name\");\r\n\r\n      setUserRightList(getuserRightListResponse);\r\n    }\r\n  }, [getuserRightListResponse]);\r\n\r\n  const handleMenuChange = (id) => {\r\n    var tempMenuIndex = userRightListArr.findIndex((x) => x.menu_id === id);\r\n    if (tempMenuIndex > -1) {\r\n      setSubMenuList(userRightListArr[tempMenuIndex].transaction_lst);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-frame\">\r\n      <Header onHeaderClick={() => setShowSidebar(!showSideBar)} />\r\n      <div className=\"mt-5\">\r\n        <CustomBreadcrumb />\r\n        <Switch>\r\n          {routes.map((route, i) => (\r\n            <RouteWithSubRoutes key={i} {...route} />\r\n          ))}\r\n          <Redirect from=\"/\" to=\"/dashboard\" />\r\n        </Switch>\r\n      </div>\r\n      {/* <div className=\"container-fluid p-0\">\r\n        <div className=\"row\">\r\n          <div className={pinSidebar ? \"col-md-2\" : \"sidebar-fixed\"}>\r\n            <Sidebar menuList={userRightListArr} show={showSideBar} />\r\n          </div>\r\n          <div className={pinSidebar ? \"col-md-10\" : \"col-md-12\"}>\r\n            <Header onHeaderClick={() => setShowSidebar(!showSideBar)} />\r\n            <CustomBreadcrumb />\r\n            <Switch>\r\n              {routes.map((route, i) => (\r\n                <RouteWithSubRoutes key={i} {...route} />\r\n              ))}\r\n              <Redirect from=\"/\" to=\"/dashboard\" />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\nexport default MainLayout;\r\n\r\n","F:\\React code\\diagnostic\\src\\pages\\Auth\\Login.js",["1389","1390","1391","1392","1393","1394"],"import React, { useEffect, useState } from 'react';\r\nimport bg from '../../assets/image/bg-5.jpg';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport useForceUpdate from 'use-force-update';\r\nimport { FormHelperText } from '@material-ui/core';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { checkAuthCred, checkAuthOTP } from '../../_redux/actions/auth.action';\r\nimport GlobalAlert from '../../components/GlobalAlert';\r\n\r\nconst Login = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst forceUpdate = useForceUpdate();\r\n\tconst [validator , setValidator] = useState(new SimpleReactValidator())\r\n\tconst [userDetails , setUserDetails] = useState({\r\n\t\tuser_name:'',\r\n\t\tpassword:''\r\n\t});\r\n\r\n\tconst [messageAlert , setMessageAlert] = useState({\r\n\t\tshow:false,\r\n\t\tmessage:\"\",\r\n\t\ttype:\"\"\r\n\t});\r\n\r\n\tconst [isLoading , setIsLoading] = useState(false);\r\n\r\n\tconst checkAuthCredResponse = useSelector((state) => state.auth);\r\n\tconst checkAuthOtpResponse = useSelector((state) => state.auth.getOtpResponse);\r\n\r\n\tconst [otp , setOtp] = useState('');\r\n\r\n\tconst handleOtp = (event) => {\t\r\n\t\tsetOtp(event.target.value);\r\n\t}\r\n\r\n\tconst [showOtp , setShowOtp] = useState(false);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetUserDetails({...userDetails, \r\n\t\t\t[event.target.name]:event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tconst checkLogin = () => {\r\n\t\tif(validator.fieldValid('Username') && validator.fieldValid('Password')){\r\n\t\t\tdispatch(checkAuthCred(userDetails))\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvalidator.showMessages();\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tconst checkOTP = () => {\r\n\t\tif(validator.fieldValid('OTP')){\r\n\t\t\tvar login = `grant_type=password&username=${userDetails.user_name}&password=${otp}`;\r\n\t\t\tdispatch(checkAuthOTP(login));\r\n\t\t\tsetIsLoading(true);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvalidator.showMessages();\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif(checkAuthCredResponse){\r\n\t\t\tsetIsLoading(checkAuthCredResponse.loadingStatus);\r\n\t\t\tsetMessageAlert({...messageAlert,\r\n\t\t\t\tshow:checkAuthCredResponse.responseMessage !== \"\",\r\n\t\t    \tmessage:checkAuthCredResponse.responseMessage,\r\n\t\t\t\ttype:checkAuthCredResponse.isValidCred ? \"success\" : \"danger\"\r\n\t\t\t});\r\n\t\t\tsetShowOtp(checkAuthCredResponse.isValidCred);\r\n\t\t}\r\n\t},[checkAuthCredResponse]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!(Object.keys(checkAuthOtpResponse).length === 0 && checkAuthOtpResponse.constructor === Object)){\r\n\t\t\tif(checkAuthOtpResponse.valid){\r\n\t\t\t\tlocalStorage.setItem(\"token\",checkAuthOtpResponse.access_token);\r\n\t\t\t\tlocalStorage.setItem(\"login\",checkAuthOtpResponse.valid);\r\n\t\t\t\tlocalStorage.setItem(\"userName\",checkAuthOtpResponse.userName);\r\n\t\t\t\tlocalStorage.setItem(\"userId\",checkAuthOtpResponse.userId);\r\n\t\t\t\tlocalStorage.setItem(\"code\",checkAuthOtpResponse.code);\r\n\t\t\t\tlocalStorage.setItem(\"encrypt_userId\",checkAuthOtpResponse.encrypt_userId);\r\n\t\t\t\twindow.location.reload();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tsetMessageAlert({...messageAlert,\r\n\t\t\t\t\tshow:!checkAuthOtpResponse.valid,\r\n\t\t\t\t\tmessage:checkAuthOtpResponse.message,\r\n\t\t\t\t\ttype:checkAuthOtpResponse.valid ? \"success\" : \"danger\"\r\n\t\t\t\t});\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t}\r\n\t\t}\r\n\t},[checkAuthOtpResponse])\r\n\r\n    return(\r\n        <div className=\"d-flex flex-column flex-root h-100\">\r\n\t\t \r\n\t\t\t<div className=\"login login-2 login-signin-on d-flex flex-column flex-lg-row flex-column-fluid bg-white\" id=\"kt_login\">\r\n\t\t\t\t \r\n\t\t\t\t<div className=\"login-aside order-2 order-lg-1 d-flex flex-column-fluid flex-lg-row-auto bgi-size-cover bgi-no-repeat p-7 p-lg-10\">\r\n\t\t\t\t\t \r\n\t\t\t\t\t<div className=\"d-flex flex-row-fluid flex-column justify-content-between\">\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t<div className=\"d-flex flex-column-fluid flex-column flex-center mt-5 mt-lg-0\">\r\n\t\t\t\t\t\t\t<a href=\"#\" className=\"mb-15 text-center\">\r\n\t\t\t\t\t\t\t\t<img src=\"assets/media/logos/logo-letter-1.png\" className=\"max-h-75px\" alt=\"\" />\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t<div className=\"login-form login-signin\">\r\n\t\t\t\t\t\t\t\t<div className=\"text-center mb-10 mb-lg-20\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"font-weight-bold\">Sign In</h2>\r\n\t\t\t\t\t\t\t\t\t<p className=\"text-muted font-weight-bold\">{showOtp ? \"OTP sent on email and whatsapp\" : \"Enter your username and password\"}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t \t<GlobalAlert show={messageAlert.show} type={messageAlert.type} message={messageAlert.message} />\r\n\t\t\t\t\t\t\t\t<form className=\"form\" noValidate=\"novalidate\" onSubmit={(e) => {\r\n\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\tif(showOtp){\r\n\t\t\t\t\t\t\t\t\t\tcheckOTP();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\tcheckLogin();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t{!showOtp ? <React.Fragment> <div className=\"form-group py-3 m-0\">\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"form-control h-auto border-0 px-0 placeholder-dark-75\" type=\"Email\" placeholder=\"Username\" name=\"user_name\" onChange={handleChange} autoComplete=\"off\" />\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText className=\"text-danger\">{validator.message('Username', userDetails.user_name , 'required')}</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"form-group py-3 border-top m-0\">\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"form-control h-auto border-0 px-0 placeholder-dark-75\" type=\"Password\" onChange={handleChange} placeholder=\"Password\" name=\"password\" />\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText className=\"text-danger\">{validator.message('Password', userDetails.password , 'required')}</FormHelperText>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"form-group d-flex flex-wrap justify-content-between align-items-center mt-3\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"checkbox-inline\">\r\n\t\t\t\t\t\t\t\t\t\t\t<label className=\"checkbox checkbox-outline m-0 text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"remember\" />\r\n\t\t\t\t\t\t\t\t\t\t\t<span></span>Remember me</label>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<a href=\"#\" id=\"kt_login_forgot\" className=\"text-muted text-hover-primary\">Forgot Password ?</a>\r\n\t\t\t\t\t\t\t\t\t</div> </React.Fragment> : <div className=\"form-group py-3 border-top m-0\">\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"form-control h-auto border-0 px-0 placeholder-dark-75\" type=\"Password\" onChange={handleOtp} placeholder=\"OTP\"  name=\"otp\" />\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText className=\"text-danger\">{validator.message('OTP', otp , 'required|min:4|max:4')}</FormHelperText>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>}\r\n\t\t\t\t\t\t\t\t\t<div className=\"form-group d-flex flex-wrap justify-content-between align-items-center mt-2\">\r\n\t\t\t\t\t\t\t\t\t\t<button id=\"kt_login_signin_submit\" className=\"btn btn-primary font-weight-bold w-100 px-9 py-4 my-3\" disabled={isLoading}>{isLoading ? <i class=\"fas fa-spinner fa-spin\"></i> : showOtp ? \"Submit\" : \"Sign In\"}</button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t<div className=\"d-flex flex-column-auto justify-content-between mt-15\">\r\n\t\t\t\t\t\t\t<div className=\"text-dark-50 font-weight-bold order-2 order-sm-1 my-2\">Developed and maintained by Rohin Infotech</div>\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t\t \r\n\t\t\t\t<div className=\"order-1 order-lg-2 flex-column-auto flex-lg-row-fluid d-flex flex-column p-7\" style={{backgroundImage:`url(${bg})`}}>\r\n\t\t\t\t\t \r\n\t\t\t\t\t<div className=\"d-flex flex-column-fluid flex-lg-center\">\r\n\t\t\t\t\t\t<div className=\"d-flex flex-column justify-content-center\">\r\n\t\t\t\t\t\t\t<h1 className=\"display-2 font-weight-bold my-7 text-white\">ΔIAΓNO∑TIX</h1>\r\n\t\t\t\t\t\t\t{/* <p className=\"font-weight-bold font-size-lg text-white opacity-80\">The ultimate Bootstrap, Angular 8, React &amp; VueJS admin theme\r\n\t\t\t\t\t\t\t<br />framework for next generation web apps.</p> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t\t \r\n\t\t\t</div>\r\n\t\t\t \r\n\t\t</div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport  default Login;","F:\\React code\\diagnostic\\src\\pages\\index.js",["1395","1396","1397"],"import React, { useEffect } from 'react';\r\nimport MainLayout from '../layouts/layout';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { checkAuthOTP, getDecryptUserId } from '../_redux/actions/auth.action';\r\n\r\n\r\n\r\n\r\nconst SwitchApp = (props) => {\r\nconst isAuthorisedByUrl = new URLSearchParams(props.location.search).get(\"token\");\r\nconst dispatch = useDispatch();\r\nconst getDecryptUserDetailsResponse = useSelector((state) => state.auth.decryptUserDetails);\r\nconst checkAuthOtpResponse = useSelector((state) => state.auth.getOtpResponse);\r\n\r\nuseEffect(() => {\r\n    if(isAuthorisedByUrl){\r\n        const param = {\r\n            encrypt_user_id:isAuthorisedByUrl\r\n        }\r\n        dispatch(getDecryptUserId(param));\r\n    }\r\n    else{\r\n        window.location = \"/\";\r\n    }\r\n},[isAuthorisedByUrl]);\r\n\r\n\r\nuseEffect(() => {\r\n    if(getDecryptUserDetailsResponse){\r\n        console.log(getDecryptUserDetailsResponse);\r\n        var login = `grant_type=password&username=${getDecryptUserDetailsResponse.user_name}&password=${getDecryptUserDetailsResponse.password}`;\r\n        dispatch(checkAuthOTP(login));\r\n    }\r\n},[getDecryptUserDetailsResponse]);\r\n\r\nuseEffect(() => {\r\n    if(!(Object.keys(checkAuthOtpResponse).length === 0 && checkAuthOtpResponse.constructor === Object)){\r\n        if(checkAuthOtpResponse.valid){\r\n            localStorage.setItem(\"token\",checkAuthOtpResponse.access_token);\r\n            localStorage.setItem(\"login\",checkAuthOtpResponse.valid);\r\n            localStorage.setItem(\"userName\",checkAuthOtpResponse.userName);\r\n            localStorage.setItem(\"userId\",checkAuthOtpResponse.userId);\r\n            localStorage.setItem(\"code\",checkAuthOtpResponse.code);\r\n            localStorage.setItem(\"encrypt_userId\",checkAuthOtpResponse.encrypt_userId);\r\n            window.location = \"/\";\r\n        }\r\n    }\r\n},[checkAuthOtpResponse])\r\n\r\n\r\n    return  <div className=\"switch_loader\">\r\n            <div>\r\n                <CircularProgress />\r\n                <h4>Please wait....</h4>\r\n            </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default SwitchApp;","F:\\React code\\diagnostic\\src\\_redux\\middleware\\auth.saga.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\common.saga.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\auth.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\common.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\materialcode.saga.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\configuration.saga.js",["1398","1399"],"import { put, takeLatest } from \"redux-saga/effects\";\r\nimport {  deleteSelectedPincode, deleteSelectedPincodeSuccess, getAccountGroupBrowse, getAccountGroupBrowseSuccess, getCategoryList, getCategoryListSuccess, getPincodeBrowseList, getPincodeBrowseListSuccess, updateAccountGroupInfo, updateAccountGroupInfoSuccess, updatePincodeInfo } from \"../../actions/masters/configuration.action\";\r\n\r\nimport { ConfigurationMasterController } from \"../../controller/Masters/configuration.controller\";\r\n\r\nfunction* getAccountGroupBrowseSaga (action) {\r\n    try {   \r\n        const accountGroupList = yield ConfigurationMasterController.searchAccountGroupBrowse(action.payload.params);\r\n        yield put(getAccountGroupBrowseSuccess(accountGroupList));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getAccountGroupBrowseSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateAccountGroupInfoSaga (action) {\r\n    try {   \r\n        const updateAccountInfo = yield ConfigurationMasterController.updateAccountGroupInfo(action.payload.params);\r\n        yield put(updateAccountGroupInfoSuccess(updateAccountInfo));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(updateAccountGroupInfoSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getPincodeBrowseSaga (action) {\r\n    try {   \r\n        const pincodeList = yield ConfigurationMasterController.searchPincodeBrowse(action.payload.params);\r\n        yield put(getPincodeBrowseListSuccess(pincodeList));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getPincodeBrowseListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updatePincodeInfoSaga (action) {\r\n    try {   \r\n        const updateAccountInfo = yield ConfigurationMasterController.updatePincodeInfo(action.payload.params);\r\n        yield put(updateAccountGroupInfoSuccess(updateAccountInfo));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(updateAccountGroupInfoSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* deletePincodeInfoSaga (action) {\r\n    try {   \r\n        const response = yield ConfigurationMasterController.deleteSelectedPincode(action.payload.params);\r\n        yield put(deleteSelectedPincodeSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(deleteSelectedPincodeSuccess(error));\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function* ConfigurationMasterSaga () {\r\n    try {\r\n        yield takeLatest(getAccountGroupBrowse, getAccountGroupBrowseSaga);\r\n        yield takeLatest(updateAccountGroupInfo, updateAccountGroupInfoSaga);   \r\n        yield takeLatest(getPincodeBrowseList, getPincodeBrowseSaga);   \r\n        yield takeLatest(updatePincodeInfo, updatePincodeInfoSaga);   \r\n        yield takeLatest(deleteSelectedPincode, deletePincodeInfoSaga);   \r\n\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\product.saga.js",["1400","1401","1402","1403"],"import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getCategoryList, getCategoryListSuccess, getGGNameList, getGGNameListSuccess, getLPRefList, getLPRefListSuccess, getProductListBrowse, getProductListBrowseSuccess, updateProductListPrice, updateProductListPriceSuccess, updateProductLPRef, updateProductMovingNonMoving, updateProductVerifiedStatus } from \"../../actions/masters/product.action\";\r\nimport { ProductMasterController } from \"../../controller/Masters/product.controller\";\r\n\r\nfunction* getProductBrowseSaga (action) {\r\n    try {   \r\n        const listValue = yield ProductMasterController.getProductBrowse(action.payload.params, action.payload.filters);\r\n        yield put(getProductListBrowseSuccess(listValue));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getProductListBrowseSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getCategoryListSaga (action) {\r\n    try {    \r\n        const response = yield ProductMasterController.getCategoryList();\r\n        yield put(getCategoryListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getCategoryListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getLPRefListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getLPRefList();\r\n        yield put(getLPRefListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getLPRefListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getGGNameListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getGGNameList();\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductVerifiedStatusSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductVerifyStatus(action.payload.param);\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductListPriceSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductListPrice(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* updateProductLPRefSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductLpRef(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductMovingSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductMovingNonMoving(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nexport default function* ProductMasterSaga () {\r\n    try {\r\n        yield takeLatest(getProductListBrowse, getProductBrowseSaga);\r\n        yield takeLatest(getCategoryList, getCategoryListSaga);   \r\n        yield takeLatest(getLPRefList, getLPRefListSaga);   \r\n        yield takeLatest(getGGNameList, getGGNameListSaga);   \r\n        yield takeLatest(updateProductVerifiedStatus, updateProductVerifiedStatusSaga);   \r\n        yield takeLatest(updateProductListPrice, updateProductListPriceSaga);   \r\n        yield takeLatest(updateProductLPRef, updateProductLPRefSaga);   \r\n        yield takeLatest(updateProductMovingNonMoving, updateProductMovingSaga);   \r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\account.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\configuration.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\materialcode.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\product.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\all.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\account.saga.js",["1404"],"import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { AccountMasterController } from \"../../controller/Masters/account.controller\";\r\nimport { getAccountMasterFiltersList, getAccountMasterFiltersListSuccess, previewSelectedAccount, previewSelectedAccountSuccess, searchAccountMasterData, searchAccountMasterDataSuccess, setAccountHide, setAccountVerified } from '../../actions/masters/account.action';\r\nfunction* searchAccountMasterSaga (action) {\r\n    try {   \r\n        const browseAccountMaster = yield AccountMasterController.browseAccountData(action.payload.filters, action.payload.params);\r\n        yield put(searchAccountMasterDataSuccess(browseAccountMaster));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(searchAccountMasterDataSuccess(error));\r\n    }\r\n}\r\nfunction* getAccountFilterSaga (action) {\r\n    try {   \r\n        const filterList = yield AccountMasterController.getAccountMasterFilters();\r\n        yield put(getAccountMasterFiltersListSuccess(filterList));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getAccountMasterFiltersListSuccess(error));\r\n    }\r\n}\r\nfunction* previewSelectedAccountSaga (action) {\r\n    try {   \r\n        const accountDetails = yield AccountMasterController.getSelectedAccountDetails(action.payload);\r\n        yield put(previewSelectedAccountSuccess(accountDetails));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\nfunction* setAccountHideSaga (action) {\r\n    try {   \r\n        const accountEdit = yield AccountMasterController.accountHideUpdate(action.payload);\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\nfunction* setAccountVerifiedSaga (action) {\r\n    try {   \r\n        const accountEdit = yield AccountMasterController.updateAccountVerified(action.payload);\r\n        if(!accountEdit.valid){\r\n            alert(\"something went wrong\");\r\n        }\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\nexport default function* AccountMasterSaga () {\r\n    try {\r\n        yield takeLatest(searchAccountMasterData, searchAccountMasterSaga);\r\n        yield takeLatest(getAccountMasterFiltersList, getAccountFilterSaga);\r\n        yield takeLatest(previewSelectedAccount, previewSelectedAccountSaga);\r\n        yield takeLatest(setAccountHide, setAccountHideSaga);\r\n        yield takeLatest(setAccountVerified, setAccountVerifiedSaga);\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}","F:\\React code\\diagnostic\\src\\routes.js",[],"F:\\React code\\diagnostic\\src\\components\\RouteWithSubRoutes.js",[],"F:\\React code\\diagnostic\\src\\components\\breadcrumbs.js",[],"F:\\React code\\diagnostic\\src\\components\\header.js",["1405"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getUserRightList,\r\n  getUserRightListSecond,\r\n  getUserRightListThird,\r\n} from \"../_redux/actions/common.action\";\r\nimport MainBar from \"./appbar\";\r\nimport MainMenu from \"./main_menu\";\r\nimport Submenu from \"./sub_menu\";\r\nimport ThirdMenu from \"./third_menu\";\r\nconst Header = ({ onHeaderClick }) => {\r\n  const dispatch = useDispatch();\r\n  const [userRightListArr, setUserRightList] = useState([]);\r\n  const [subMenuList, setSubMenuList] = useState([]);\r\n  const [thirdMenuList, setThirdMenuList] = useState([])\r\n  \r\n  let urlLocation=window.location.pathname\r\n  .split(\"/\")\r\n  .filter((val) => val !== \"\");\r\n  // console.log(urlLocation)\r\n  const getuserRightListResponse = useSelector(\r\n    (state) => state.common.userRightList\r\n  );\r\n  const getuserLIstSecond=useSelector(\r\n    (state) => state.common.userRightListSecond\r\n  );\r\n  const getuserLIstThird=useSelector(\r\n    (state) => state.common.userRightListThird\r\n  );\r\n  useEffect(() => {\r\n    \r\n  }, []);\r\n  useEffect(()=>{\r\n    dispatch(getUserRightList());\r\n    dispatch(getUserRightListSecond(urlLocation[1]));\r\n    parseInt(urlLocation[3])===12?dispatch(getUserRightListThird(1)):dispatch(getUserRightListThird(parseInt(urlLocation[3])))\r\n  },[])\r\n  useEffect(() => {\r\n    if (getuserRightListResponse?.data?.length > 0) {\r\n      setUserRightList(getuserRightListResponse.data);\r\n    }\r\n    if (getuserLIstSecond?.data?.length > 0) {\r\n      setSubMenuList(getuserLIstSecond.data);\r\n    }\r\n    if (getuserLIstThird?.data?.length > 0) {\r\n      setThirdMenuList(getuserLIstThird.data);\r\n    }else{\r\n      setThirdMenuList([]);\r\n    }\r\n  }, [getuserRightListResponse,getuserLIstSecond,getuserLIstThird]);\r\n  \r\n  const handleMenuChange =(id) => {\r\n    var tempMenuIndex = userRightListArr.findIndex((x) => x.transaction_id === id);\r\n    if (userRightListArr[tempMenuIndex].display_name !== \"Profile\") {\r\n     dispatch(getUserRightListSecond(id));\r\n     dispatch(getUserRightListThird(1));\r\n    //  console.log(\"cvgbhn\")\r\n    //  setTimeout((tt) => {\r\n    // console.log(tt)\r\n    //   parseInt(urlLocation[3])===12?dispatch(getUserRightListThird(1)):dispatch(getUserRightListThird(parseInt(urlLocation[3])))\r\n    //   console.log(urlLocation[3])\r\n    //  },8000,urlLocation);\r\n    //  console.log(\"g\")\r\n   \r\n    }\r\n  };\r\n  const handleSubMenu = (id) => {\r\n    if(subMenuList.length>0){\r\n    id===12?dispatch(getUserRightListThird(1)):dispatch(getUserRightListThird(id))\r\n      \r\n    }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <MainBar onMenuClick={() => onHeaderClick()} />\r\n      <MainMenu list={userRightListArr} onMenuChange={handleMenuChange} />\r\n      {subMenuList.length > 0 ? <Submenu list={subMenuList} onSubMenuChange={handleSubMenu} /> : null}\r\n      {(thirdMenuList.length > 0)&&(subMenuList.length>0) ? <ThirdMenu list={thirdMenuList} list2={subMenuList} /> : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default Header;\r\n","F:\\React code\\diagnostic\\src\\components\\sidebar.js",["1406","1407"],"import React from \"react\";\n\nconst Sidebar = ({ onToggle, show, menuList }) => {\n  return (\n    <div className={`main-sidebar ${show ? \"sidebar--show\" : \"\"}`}>\n      <div className=\"top-main  d-flex align-items-center\">\n        <div className=\"logo-header mr-5\">\n          {/* <img src={logo} className=\"img-fluid\" /> */}\n          <h4 className=\"mb-0 text-white\" style={{ fontSize: 24 }}>\n            DIAGNOSTIC\n          </h4>\n          <p className=\"logo-text mb-0 text-white\">\n            <small>Diagnostic Automation</small>\n            <span className=\"ml-2\">13.5</span>\n          </p>\n        </div>\n        <img\n          src={\"/asset/icons/chevrons-left.svg\"}\n          onClick={() => onToggle()}\n          className=\"svg-menu mr-3\"\n        />\n        <img\n          src={\"/asset/icons/pin.svg\"}\n          className=\"svg-menu\"\n          onClick={() => onToggle()}\n        />\n      </div>\n      <div className=\"sidebar-menulist mt-10\">\n        {console.log(menuList)}\n        <ul className=\"list-unstyled\">\n          {menuList &&\n            menuList.map((menu, index) => {\n              return (\n                <li key={index}>\n                  {\" \"}\n                  {menu.menu_name}{\" \"}\n                  <i className=\"fas fa-chevron-right float-right\"></i>\n                </li>\n              );\n            })}\n          <li></li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","F:\\React code\\diagnostic\\src\\components\\GlobalAlert.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\common.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\auth.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\auth.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\common.controller.js",[],"F:\\React code\\diagnostic\\src\\layouts\\Support.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\materialcode.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\product.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\configuration.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\account.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\account.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\materialcode.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\product.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\all.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\configuration.action.js",[],"F:\\React code\\diagnostic\\src\\components\\sub_menu.js",["1408"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Submenu = (props) => {\r\n  const { list, onSubMenuChange } = props;\r\n  const selectedMenu = window.location.pathname.split(\"/\")[1];\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[3];\r\n  const selectedSubMenusec = window.location.pathname.split(\"/\")[2];\r\n  return (\r\n    <div className=\"header-bottom submenu\">\r\n      <div className=\"px-3\">\r\n        <div className=\"header-navs header-navs-left\">\r\n          <ul className=\"menu-nav mb-0 list-unstyled d-flex flex-wrap\">\r\n            {list.length > 0\r\n              ? list.map((item, index) => {\r\n                  if (item.level ===2) {\r\n                    // console.log(\r\n                    //   item.transaction_name\r\n                    //     .replace(/[^a-zA-Z ]/g, \"\")\r\n                    //     .replace(/\\s+/g, \"-\")\r\n                    //     .toLowerCase()\r\n                    // ); \r\n                    return (\r\n                      <li className=\"menu-item\" key={\"sublist\" + index}>\r\n                        <Link\r\n                          onClick={()=>onSubMenuChange(item.transaction_id)}\r\n                          className={\r\n                            \"menu-link py-2 px-4 rounded mr-2 d-inline-block \" +\r\n                            (selectedSubMenu ===\r\n                            item.transaction_name\r\n                              .replace(/[^a-zA-Z ]/g, \"\")\r\n                              .replace(/\\s+/g, \"-\")\r\n                              .toLowerCase()\r\n                              // ? \"active text-success\"\r\n                              ? \"bg-danger text-white\"\r\n                              : \"\")\r\n                          }\r\n                          to={`/${selectedMenu.toLowerCase()}/${selectedSubMenusec}/${item.transaction_name\r\n                            .replace(/[^a-zA-Z ]/g, \"\")\r\n                            .replace(/\\s+/g, \"-\")\r\n                            .toLowerCase()}/${item.transaction_id}`}\r\n                        >\r\n                          {\" \"}\r\n                          <span className=\"menu-text\">\r\n                            {item.transaction_name}\r\n                          </span>\r\n                        </Link>\r\n                      </li>\r\n                    );\r\n                  }\r\n                })\r\n              : null}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Submenu;\r\n\r\n// + (selectedSubMenu === (item.transaction_name.replace(/\\s+/g, '-').toLowerCase()) ? \"active\" : \"\")\r\n","F:\\React code\\diagnostic\\src\\components\\main_menu.js",[],"F:\\React code\\diagnostic\\src\\components\\appbar.js",["1409","1410","1411","1412","1413","1414","1415","1416","1417"],"import {\r\n  AppBar,\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport logo from \"../assets/image/logo.png\";\r\n\r\nimport user from \"../assets/image/user.jpg\";\r\nimport moment from \"moment\";\r\nimport AirplayIcon from \"@material-ui/icons/Airplay\";\r\nimport SwipeableTemporaryDrawer from \"./leftModal\";\r\nimport { CommonController } from \"../_redux/controller/common.controller\";\r\nimport { id } from \"date-fns/locale\";\r\nimport { nodeUrl } from \"../config\";\r\nconst auth = localStorage.getItem(\"login\");\r\nconst userName = localStorage.getItem(\"userName\");\r\nfunction CircularProgressWithLabel(props) {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress\r\n        disableShrink\r\n        size={35}\r\n        variant=\"determinate\"\r\n        {...props}\r\n      />\r\n      <Box\r\n        top={0}\r\n        left={0}\r\n        bottom={0}\r\n        right={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Typography\r\n          variant=\"h6\"\r\n          component=\"div\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.time)}`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\nconst MainBar = ({ onMenuClick }) => {\r\n  const [anchorEl, setAnchorEl] =useState(null);\r\n  const [profilePrev, setprofilePrev] = useState({right:false})\r\n  const [profileList, setprofileList] = useState(\"\")\r\n  const open = Boolean(anchorEl);\r\n  const [time, setTime] = useState({\r\n    hrs: moment().format(\"h\"),\r\n    minutes: moment().format(\"mm\"),\r\n    seconds: moment().format(\"ss\"),\r\n    hrsValue: Math.ceil((parseInt(moment().format(\"h\")) * 8 + 1) / 10) * 10,\r\n    minValue: Math.ceil((parseInt(moment().format(\"mm\")) * 2 + 1) / 10) * 10,\r\n    secValue: Math.ceil((parseInt(moment().format(\"ss\")) * 1.6 + 1) / 10) * 10,\r\n  });\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n    const profilePrevlist=async()=>{\r\n     await CommonController.commonApiCallFilter('user/profile_prev',{user_id:localStorage.getItem(\"userId\")},\"post\",\"node\")\r\n     .then(result=>{\r\n      if(result.status===200){\r\n        setprofileList(result.data)\r\n      }\r\n     }).catch(err=>{\r\n      console.log(err)\r\n     })\r\n    }\r\n  const handleClose = () => {\r\nsetprofilePrev({...profilePrev,right:true})\r\n    setAnchorEl(null);\r\n  };\r\n  const calculateTime = () => {\r\n    setInterval(() => {\r\n      setTime({\r\n        ...time,\r\n        hrsValue: Math.ceil((parseInt(moment().format(\"h\")) * 8 + 1) / 10) * 10,\r\n        hrs: moment().format(\"h\"),\r\n        secValue:\r\n          Math.ceil((parseInt(moment().format(\"ss\")) * 1.6 + 1) / 10) * 10,\r\n        seconds: moment().format(\"ss\"),\r\n        minValue:\r\n          Math.ceil((parseInt(moment().format(\"mm\")) * 2 + 1) / 10) * 10,\r\n        minutes: moment().format(\"mm\"),\r\n      });\r\n    }, 1000);\r\n  };\r\n  const handleSwitch = () => {\r\n    window.location = `http://erp.diag.in/SwitchLogin.aspx?${localStorage.getItem(\r\n      \"encrypt_userId\"\r\n    )}`;\r\n  };\r\n  useEffect(() => {\r\n    calculateTime();\r\n    profilePrevlist();\r\n  },[]);\r\n  return (\r\n    <AppBar position=\"static\" className=\"theme_bg\" elevation={0}>\r\n      <Toolbar variant=\"dense\" disableGutters>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-2 d-flex align-items-center\">\r\n              <div className=\"logo-header\">\r\n                {/* <img src={logo} className=\"img-fluid\" /> */}\r\n                <h4 className=\"mb-0\">DIAGNOSTIC</h4>\r\n                <p className=\"logo-text mb-0\">\r\n                  <small>Diagnostic Automation</small>\r\n                  <span className=\"ml-2\">13.5</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-10 text-right\">\r\n              <div className=\"row justify-content-end\">\r\n                <div className=\"col-md-1 text-center py-1 pr-0\">\r\n                  <div className=\"clock_container\">\r\n                    <p className=\"mb-0\">Week </p>\r\n                    <h2 className=\"mb-0 mt-2 mx-auto\">{moment().isoWeek()}</h2>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-2 py-1\">\r\n                  <div className=\"clock_container\">\r\n                    <p className=\"mb-2 text-center\">\r\n                      {moment().format(\"dddd DD MMM YYYY\")}\r\n                    </p>\r\n                    <div className=\"clock_circle d-flex justify-content-around\">\r\n                      <div className=\"circle_box\">\r\n                        <CircularProgressWithLabel\r\n                          className=\"hrs\"\r\n                          value={time.hrsValue}\r\n                          time={time.hrs}\r\n                        />\r\n                      </div>\r\n                      <div className=\"circle_box\">\r\n                        <CircularProgressWithLabel\r\n                          color=\"secondary\"\r\n                          value={time.minValue}\r\n                          time={time.minutes}\r\n                        />\r\n                      </div>\r\n                      <div className=\"circle_box\">\r\n                        <CircularProgressWithLabel\r\n                          className=\"seconds\"\r\n                          value={time.secValue}\r\n                          time={time.seconds}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-2 text-right d-flex align-items-center py-1\">\r\n                  <div className=\"clock_container ml-auto\">\r\n                    <p className=\"mb-0\">Switch</p>\r\n                    <Button\r\n                      variant=\"default\"\r\n                      className=\"bg-white switch_btn mx-3 mt-2\"\r\n                      // variant=\"contained\"\r\n                      onClick={handleSwitch}\r\n                      disableElevation\r\n                    >\r\n                      <AirplayIcon />\r\n                    </Button>\r\n                  </div>\r\n                  {auth && (\r\n                    <div className=\"clock_container ml-3\">\r\n                      <p className=\"mb-0\">{userName}</p>\r\n                      <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n                        className=\"pt-2 pb-0\"\r\n                        onClick={handleClose}\r\n                        color=\"inherit\"\r\n                      >\r\n                        <div className=\"user_header d-flex align-items-center\">\r\n                          <Avatar alt=\"Remy Sharp\"  src={`${nodeUrl + profileList.image_path}`} />\r\n                          {/* <span className=\"ml-3\">{userName}</span> */}\r\n                        </div>\r\n                      </IconButton>\r\n                      {/* <Menu\r\n                        id=\"menu-appbar\"\r\n                        anchorEl={anchorEl}\r\n                        getContentAnchorEl={null}\r\n                        anchorOrigin={{\r\n                          vertical: \"bottom\",\r\n                          horizontal: \"center\",\r\n                        }}\r\n                        keepMounted\r\n                        transformOrigin={{\r\n                          vertical: \"top\",\r\n                          horizontal: \"center\",\r\n                        }}\r\n                        open={open}\r\n                        onClick={handleClose}\r\n                      >\r\n                        <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                        <MenuItem onClick={handleLogOut}>Logout</MenuItem>\r\n                      </Menu> */}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Toolbar>\r\n     <SwipeableTemporaryDrawer leftTrue={profilePrev} profileList={profileList} updateImage={useCallback(()=>profilePrevlist(),[profileList])}/>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default MainBar;\r\n","F:\\React code\\diagnostic\\src\\layouts\\Stock.js",[],"F:\\React code\\diagnostic\\src\\layouts\\Sales.js",["1418"],"import React from \"react\";\r\nimport { BrowserRouter, Redirect, Switch, Route } from \"react-router-dom\";\r\nimport SalesIssueIndex from \"../pages/Sales/issues\";\r\nimport SalesMarketingIndex from \"../pages/Sales/marketingVisit\";\r\nimport SalesQuotationIndex from \"../pages/Sales/quotation\";\r\nimport SalesCostingIndex from \"../pages/Sales/Sales Costing\";\r\nimport SalesIndex from \"../pages/Sales/Sales Enquiry\";\r\nimport SalesSiDiIndex from \"../pages/Sales/salesOrder/slDI\";\r\nimport SalesSlSoPosIndex from \"../pages/Sales/salesOrder/slSoPos\";\r\nimport SalesSlSoPosSummariseIndex from \"../pages/Sales/salesOrder/slSoPosSummarise\";\r\nimport SoDetail from \"../pages/Sales/salesOrder/soDetail\";\r\nimport SalesSoAmdIndex from \"../pages/Sales/soAmedment\";\r\n\r\nconst Sales = () => {\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[2];\r\n  const menuLength=window.location.pathname.split('/').length;\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Switch>\r\n        <Route exact path=\"/sales/enquiry\" component={SalesIndex} />\r\n        <Route exact path=\"/sales/costing\" component={SalesCostingIndex} />\r\n        <Route exact path=\"/sales/quotation\" component={SalesQuotationIndex} />\r\n        <Route exact path=\"/sales/sales-order-amendment\" component={SalesSoAmdIndex} />\r\n        <Route exact path=\"/sales/marketing-visit\" component={SalesMarketingIndex} />\r\n        <Route exact path=\"/sales/issues\" component={SalesIssueIndex} />\r\n        <Route exact path=\"/sales/sales-order/so-details\" component={SoDetail} />\r\n        <Route exact path=\"/sales/sales-order/sl-so-pos\" component={SalesSlSoPosIndex} />\r\n        <Route exact path=\"/sales/sales-order/non-sl-so-pos\" component={SalesSlSoPosIndex} />\r\n        <Route exact path=\"/sales/sales-order/so-pos-summarize\" component={SalesSlSoPosSummariseIndex} />\r\n        <Route exact path=\"/sales/sales-order/sl-di\" component={SalesSiDiIndex} />\r\n        <Route exact path=\"/sales/sales-order/non-sl-di\" component={SalesSiDiIndex} />\r\n       \r\n       {(menuLength<=2||selectedSubMenu===\"enquiry\")&& <Redirect from=\"/sales\" to=\"/sales/enquiry\" />}\r\n       {(selectedSubMenu===\"costing\")&& <Redirect from=\"/sales\" to=\"/sales/costing\" />}\r\n       {(selectedSubMenu===\"quotation\")&& <Redirect from=\"/sales\" to=\"/sales/quotation\" />}\r\n       {(selectedSubMenu===\"sales-order-amendment\")&& <Redirect from=\"/sales\" to=\"/sales/sales-order-amendment\" />}\r\n       {(selectedSubMenu===\"marketing-visit\")&& <Redirect from=\"/sales\" to=\"/sales/marketing-visit\" />}\r\n       {(selectedSubMenu===\"issues\")&& <Redirect from=\"/sales\" to=\"/sales/issues\" />}\r\n       {(selectedSubMenu===\"sales-order\")&& <Redirect from=\"/sales\" to=\"/sales/sales-order/so-details\" />}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sales;\r\n","F:\\React code\\diagnostic\\src\\layouts\\Profile.js",[],"F:\\React code\\diagnostic\\src\\layouts\\Masters.js",["1419","1420","1421","1422","1423","1424","1425"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, Route, Switch, useParams } from \"react-router-dom\";\r\nimport AccountsMaster from \"../pages/Master/Accounts_Master/index\";\r\nimport ComboMLFBIndex from \"../pages/Master/combomlfb\";\r\nimport ConfigurationMaster from \"../pages/Master/Configuration\";\r\nimport EmployeeIndex from \"../pages/Master/employee\";\r\nimport GodownIndex from \"../pages/Master/godown\";\r\nimport ItemGroupIndex from \"../pages/Master/item Group\";\r\nimport MaterialCodeIndex from \"../pages/Master/Material Code\";\r\nimport ProductMasterIndex from \"../pages/Master/Product\";\r\nimport UserRightList from \"../pages/Master/user rights/browse\";\r\nimport { getAccountMasterFiltersList } from \"../_redux/actions/masters/account.action\";\r\nconst Masters = () => {\r\n  // const dispatch=useDispatch()\r\n  // useEffect(()=>{\r\n  //   dispatch(getAccountMasterFiltersList());\r\n  // },[])\r\n  const [menuList, setmenuList] = useState({\r\n    firstMenu: [],\r\n    secondMenu: [],\r\n    thirdMenu: [],\r\n  });\r\n  const selectedSubMenu = window.location.pathname\r\n    .split(\"/\")\r\n    .filter((val) => val !== \"\")[2];\r\n  const menuLength = window.location.pathname.split(\"/\").length;\r\n  console.log(menuLength)\r\n  // const firstMenu = useSelector((state) => state.common.userRightList);\r\n  // const secondMenu = useSelector((state) => state.common.userRightListSecond);\r\n  // const thirdMenu = useSelector((state) => state.common.userRightListThird);\r\n  // useEffect(() => {\r\n  //   setmenuList({\r\n  //     firstMenu: firstMenu.data,\r\n  //     secondMenu: secondMenu.data,\r\n  //     thirdMenu: thirdMenu.data,\r\n  //   });\r\n  // }, [firstMenu, secondMenu, thirdMenu]);\r\n\r\n  // const [data]=firstMenu.data.map((val)=>{return `${val.display_name.toLowerCase()}/${btoa(val.transaction_id)}`})\r\n  // console.log(data)\r\n  // console.log(...firstMenu.data.map((val)=>{return `${val.transaction_name.toLowerCase()}/${btoa(val.transaction_id)}`})+\"/\")\r\n  // console.log(...secondMenu.data.map((val)=>{return `${val.transaction_name.toLowerCase()}/${btoa(val.transaction_id)}`}))\r\n  // console.log(thirdMenu.data.map((val)=>{return `${val.transaction_name.toLowerCase()}/${btoa(val.transaction_id)}`}))\r\n  // console.log(atob(\"OQ==\"))\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      {/* {thirdMenu.status===200&& */}\r\n      <Switch>\r\n        <Route path=\"/masters/1/account-master/9/customer/15\" strict>\r\n          <AccountsMaster accountType=\"Customer\" browse_id={1}/>\r\n        </Route>\r\n        <Route path=\"/masters/1/account-master/9/supplier/16\" strict>\r\n          {\" \"}\r\n          <AccountsMaster accountType=\"Supplier\"browse_id={2} />\r\n        </Route>\r\n        <Route\r\n          path=\"/masters/1/configuration-master/12\"\r\n          exact\r\n          component={ConfigurationMaster}\r\n        />\r\n        <Route\r\n          path=\"/masters/1/product-master/10/sl/17\"\r\n          exact\r\n          component={ProductMasterIndex}\r\n        />\r\n        <Route\r\n          path=\"/masters/1/product-master/10/non-sl/18\"\r\n          exact\r\n          component={ProductMasterIndex}\r\n        />\r\n        <Route\r\n          path=\"/masters/1/material-code/13/customer/19\"\r\n          exact\r\n          component={MaterialCodeIndex}\r\n        />\r\n        <Route\r\n          path=\"/masters/1/material-code/13/supplier/20\"\r\n          exact\r\n          component={MaterialCodeIndex}\r\n        />\r\n        <Route\r\n          path=\"/masters/item-group-master\"\r\n          exact\r\n          component={ItemGroupIndex}\r\n        />\r\n        <Route path=\"/masters/combined-mlfb\" exact component={ComboMLFBIndex} />\r\n\r\n        <Route path=\"/masters/godown-master\" exact component={GodownIndex} />\r\n        <Route path=\"/masters/1/user-right/14\" exact component={UserRightList} />\r\n        <Route\r\n          path=\"/masters/1/employee-master/11/employee/21\"\r\n          exact\r\n          component={EmployeeIndex}\r\n        />\r\n        <Route\r\n          path=\"/masters/1/employee-master/11/user-rights/22\"\r\n          exact\r\n          component={UserRightList}\r\n        />\r\n        {/* {(menuLength<=3||selectedSubMenu===\"account-master\")&&<Redirect to=\"/masters/1/account-master/9/customer/15\" from=\"/masters\" />}  */}\r\n        {(selectedSubMenu===\"account-master\")&&<Redirect to=\"/masters/1/account-master/9/customer/15\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"product-master\"&&<Redirect to=\"/masters/1/product-master/10/sl/17\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"employee-master\"&&<Redirect to=\"/masters/1/employee-master/11/employee/21\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"configuration-master\"&&<Redirect to=\"/masters/1/configuration-master/12\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"material-code\"&&<Redirect to=\"/masters/1/material-code/13/customer/19\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"user-right\"&&<Redirect to=\"/masters/1/user-right/14\" from=\"/masters\" />} \r\n      </Switch>\r\n      {/* } */}\r\n    </div>\r\n  );\r\n};\r\nexport default Masters;\r\n","F:\\React code\\diagnostic\\src\\layouts\\Logistics.js",["1426","1427"],"import React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport DCIndex from \"../pages/DC\";\r\nimport CcrInIndex from \"../pages/logistics/ccr\";\r\nimport CcrIndex from \"../pages/logistics/ccr\";\r\nimport CcrOutIndex from \"../pages/logistics/ccr/ccrOut\";\r\nimport CourierInIndex from \"../pages/logistics/courier\";\r\nimport CourierIndex from \"../pages/logistics/courier\";\r\nimport CourierOutIndex from \"../pages/logistics/courier/courierOut\";\r\nimport CourierInvoiceIndex from \"../pages/logistics/courier/invoice\";\r\n// import DeliveryChallanIndex from \"../pages/logistics/delivery-challan\";\r\n// import DeliveryChallanBrowse from \"../pages/logistics/delivery-challan/browse\";\r\nimport ChallanIndexMdc from \"../pages/logistics/delivery-challan/mdc\";\r\nimport SlWipIndex from \"../pages/logistics/delivery-challan/slwip/index\";\r\nimport ChallanIndex from \"../pages/logistics/delivery-challan/index\";\r\nimport JobWorkIndex from \"../pages/logistics/job-work\";\r\nimport JobWorkOutIndex from \"../pages/logistics/job-work/jobWorkOut\";\r\nimport MrnDcIndex from \"../pages/logistics/material-receipt-note\";\r\nimport MrnPoIndex from \"../pages/logistics/material-receipt-note/mrn-po\";\r\nimport ReturnableIndex from \"../pages/logistics/returnable-gate-pass\";\r\nimport RrgpIndex from \"../pages/logistics/returnable-gate-pass/rrgp\";\r\nconst Logistics = () => {\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[2];\r\n  const menuLength=window.location.pathname.split('/').length;\r\n  // console.log(window.location.pathname.split('/').length)\r\n  // console.log(window.location.pathname.split('/'))\r\n  \r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Switch>\r\n        <Route path=\"/logistics/out/sl-dc\" exact ><ChallanIndex slType={\"SL\"}/></Route>\r\n        <Route path=\"/logistics/out/non-sl-dc\" exact><ChallanIndex slType={\"Non SL\"}/></Route>\r\n        <Route path=\"/logistics/out/mdc\" exact component={ChallanIndexMdc} />\r\n        <Route path=\"/logistics/out/sl-wip\"exact><SlWipIndex slType={\"SL\"}/></Route>\r\n        <Route path=\"/logistics/out/non-sl-wip\" exact><SlWipIndex slType={\"Non SL\"}/></Route>\r\n        <Route path=\"/logistics/out/dc-packaging\" exact component={DCIndex} />\r\n        <Route path=\"/logistics/in/mrn-dc\" exact component={MrnDcIndex} />\r\n        <Route path=\"/logistics/in/mrn-po\" exact component={MrnPoIndex} />\r\n        <Route path=\"/logistics/in/mrn-wip\" exact component={MrnDcIndex} />\r\n        <Route path=\"/logistics/rgp/rgp\" exact component={ReturnableIndex} />\r\n        <Route path=\"/logistics/rgp/rrgp\" exact component={RrgpIndex} />\r\n        <Route path=\"/logistics/jw/jwin\" exact component={JobWorkIndex} />\r\n        <Route path=\"/logistics/jw/jwo\" exact component={JobWorkOutIndex} />\r\n        <Route path=\"/logistics/ccr/ccr-in\" exact component={CcrInIndex} />\r\n        <Route path=\"/logistics/ccr/ccr-out\" exact component={CcrOutIndex} />\r\n        <Route path=\"/logistics/courier/in\" exact component={CourierInIndex} />\r\n        <Route path=\"/logistics/courier/out\" exact component={CourierOutIndex} />\r\n        <Route path=\"/logistics/courier/invoice\" exact component={CourierInvoiceIndex} />\r\n        {/* <Route\r\n          path=\"/logistics/delivery-challan\"\r\n          exact\r\n          component={DeliveryChallanIndex}\r\n        /> */}\r\n        {(menuLength<=2||selectedSubMenu===\"in\")&&<Redirect to=\"/logistics/in/mrn-dc\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"out\"&&<Redirect to=\"/logistics/out/sl-dc\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"rgp\"&&<Redirect to=\"/logistics/rgp/rgp\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"jw\"&&<Redirect to=\"/logistics/jw/jwin\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"ccr\"&&<Redirect to=\"/logistics/ccr/ccr-in\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"courier\"&&<Redirect to=\"/logistics/courier/in\" from=\"/logistics\" />}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\nexport default Logistics;\r\n","F:\\React code\\diagnostic\\src\\services.js",[],"F:\\React code\\diagnostic\\src\\pages\\Stock\\stockBrowse.js",["1428","1429"],"import { DatePicker } from \"@material-ui/pickers\";\nimport { Button, MenuItem, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { FormControlLabel, FormGroup, Checkbox } from \"@mui/material\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport moment from \"moment\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst StockBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    date: new Date(),\n    zero: false,\n    category_id: \"\",\n    product_id: \"\",\n    siemens_product: \"\",\n  });\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [categoryList, setCategoryList] = useState([]);\n  const [mlfbList, setMLFBList] = useState([]);\n  const [selectedValue, setSelectedValue] = useState({\n    category: \"\",\n    mlfb: \"\",\n  });\n\n  const handleChange = (e) => {\n    if (e.target.name === \"zero\") {\n      setBodyParam({ ...bodyParam, [e.target.name]: e.target.checked });\n    } else {\n      setBodyParam({ ...bodyParam, [e.target.name]: e.target.value });\n    }\n  };\n\n  const handleDateChange = (date) => {\n    setBodyParam({ ...bodyParam, date: date });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getMLFBList = async (id) => {\n    await CommonController.commonApiCallFilter(\n      `Dropdown/GetMlfbListInStock`,\n      {\n        category_id: id,\n      },\n      \"get\"\n    ).then((data) => setMLFBList(data));\n  };\n\n  const getCategoryList = async () => {\n    await CommonController.commonApiCallFilter(\"Dropdown/GetCategoryList\").then(\n      (data) => setCategoryList(data)\n    );\n  };\n\n  useEffect(() => {\n    getCategoryList();\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleAutoChange = (name, value) => {\n    setBodyParam({ ...bodyParam, [name]: value });\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      let body = { ...bodyParam };\n      body.date = moment(bodyParam.date).format(\"DD-MM-yyyy\");\n      body.zero = bodyParam.zero ? \"0\" : \"\";\n      await CommonController.commonApiCall(\n        \"Stock/NewDailyStockReportInStock\",\n        params,\n        body,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"Date\"\n                value={bodyParam.date}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo\"\n                options={categoryList}\n                onChange={(event, value) => {\n                  setSelectedValue({ ...selectedValue, category: value });\n                  handleAutoChange(\"category_id\", value ? value.id : null);\n                  if (value) {\n                    getMLFBList(value.id);\n                  }\n                }}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.category}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Category\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo2\"\n                options={mlfbList}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.mlfb}\n                onChange={(event, value) => {\n                  handleAutoChange(\"product_id\", value ? value.id : null);\n                  setSelectedValue({ ...selectedValue, mlfb: value });\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"MLFB No.\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <TextField\n                fullWidth\n                id=\"outlined-basic\"\n                size=\"small\"\n                onChange={(e) => {\n                  handleChange(e);\n                }}\n                name=\"siemens_product\"\n                select\n                label=\"Siemen Product\"\n                variant=\"outlined\"\n              >\n                <MenuItem value={\"siemens\"}>Siemens</MenuItem>\n                <MenuItem value={\"non-siemens\"}>Non-Siemens</MenuItem>\n              </TextField>\n            </div>\n            <div className=\"col-md-1 mb-5 mb-md-0\">\n              <FormGroup>\n                <FormControlLabel\n                  control={<Checkbox defaultChecked />}\n                  label=\"Zero\"\n                  name=\"zero\"\n                  checked={bodyParam.zero}\n                  onChange={handleChange}\n                />\n              </FormGroup>\n            </div>\n            <div className=\"col-md-2\">\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"filter_value\"\n                label=\"Search\"\n                onChange={handleParams}\n                value={params.filter_value}\n              />\n            </div>\n            <div className=\"col-md-12 text-right\">\n              <Button\n                variant=\"contained\"\n                onClick={getBrowseListData}\n                disableElevation\n              >\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"id\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"erp_code\",\n                headerName: \"ERP Code\",\n                flex: 0.1,\n              },\n              {\n                field: \"category\",\n                headerName: \"Category\",\n                flex: 0.1,\n              },\n              {\n                field: \"group\",\n                headerName: \"Group\",\n                flex: 0.1,\n              },\n              {\n                field: \"item\",\n                headerName: \"Item\",\n                flex: 0.1,\n              },\n              {\n                field: \"mlfb\",\n                headerName: \"MLFB\",\n                flex: 0.1,\n              },\n              {\n                field: \"description\",\n                headerName: \"Description\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"store_qty\",\n                headerName: \"Store Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n              {\n                field: \"di_qty\",\n                headerName: \"DI Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n              {\n                field: \"open_qty\",\n                headerName: \"Open Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n            ]}\n            pagination\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={browseListData}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default StockBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Stock\\serialLedgerBrowse.js",["1430","1431"],"import { TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst SerialLedgerBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    product_id: \"\",\n    serial_no: \"\",\n    category_id: \"\",\n  });\n  const [categoryList, setCategoryList] = useState([]);\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [mlfbList, setMLFBList] = useState([]);\n  const [selectedValue, setSelectedValue] = useState({\n    category: \"\",\n    mlfb: \"\",\n  });\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n  const getMLFBList = async (id) => {\n    await CommonController.commonApiCallFilter(\n      `Dropdown/GetMlfbListInStock`,\n      {\n        category_id: id,\n      },\n      \"get\"\n    ).then((data) => setMLFBList(data));\n  };\n\n  const getCategoryList = async () => {\n    await CommonController.commonApiCallFilter(\"Dropdown/GetCategoryList\").then(\n      (data) => setCategoryList(data)\n    );\n  };\n\n  useEffect(() => {\n    getCategoryList();\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [bodyParam]);\n\n  const handleAutoChange = (name, value) => {\n    setBodyParam({ ...bodyParam, [name]: value });\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"Stock/ProductLedgerSerialNoReport\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo\"\n                options={categoryList}\n                onChange={(event, value) => {\n                  setSelectedValue({ ...selectedValue, category: value });\n                  handleAutoChange(\"category_id\", value ? value.id : null);\n                  if (value) {\n                    getMLFBList(value.id);\n                  }\n                }}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.category}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Category\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo2\"\n                options={mlfbList}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.mlfb}\n                onChange={(event, value) => {\n                  handleAutoChange(\"product_id\", value ? value.id : null);\n                  setSelectedValue({ ...selectedValue, mlfb: value });\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"MLFB No.\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2\">\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"serial_no\"\n                label=\"Serial No\"\n                onChange={(e) =>\n                  setBodyParam({ ...bodyParam, serial_no: e.target.value })\n                }\n                value={bodyParam.serial_no}\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"id\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"entry_type\",\n                headerName: \"Entry Type\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"tran_no\",\n                headerName: \"Tran No\",\n                flex: 0.1,\n              },\n              {\n                field: \"date\",\n                headerName: \"Date\",\n                flex: 0.1,\n              },\n              {\n                field: \"party\",\n                headerName: \"Party\",\n                flex: 0.1,\n              },\n              {\n                field: \"mlfb_no\",\n                headerName: \"In Qty\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"serial_no\",\n                headerName: \"Out Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n            ]}\n            pagination\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={[]}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SerialLedgerBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Stock\\itemLedgerBrowse.js",["1432","1433","1434","1435","1436","1437","1438"],"import { DatePicker } from \"@material-ui/pickers\";\nimport { Button, MenuItem, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { FormControlLabel, FormGroup, Checkbox } from \"@mui/material\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport moment from \"moment\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst ItemLedgerBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    sdate: new Date(new Date().getTime() - 24 * 60 * 60 * 1000),\n    edate: new Date(),\n    product_id: \"\",\n  });\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [mlfbList, setMLFBList] = useState([]);\n  const [selectedValue, setSelectedValue] = useState(\"\");\n\n  const getProductList = async () => {\n    await CommonController.commonApiCallFilter(\n      \"Dropdown/GetProductMlfb\",\n      {}\n    ).then((data) => setMLFBList(data));\n  };\n\n  const handleDateChange = (name, date) => {\n    setBodyParam({ ...bodyParam, [name]: date });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getProductList();\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [bodyParam]);\n\n  const handleAutoChange = (name, value) => {\n    setBodyParam({ ...bodyParam, [name]: value });\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      let body = { ...bodyParam };\n      body.sdate = moment(bodyParam.sdate).format(\"DD-MM-yyyy\");\n      body.edate = moment(bodyParam.edate).format(\"DD-MM-yyyy\");\n      await CommonController.commonApiCall(\n        \"Stock/NewDailyLedgerReportInStock\",\n        params,\n        body,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"From Date\"\n                value={bodyParam.sdate}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"sdate\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"To Date\"\n                value={bodyParam.edate}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"edate\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                minDate={bodyParam.sdate}\n                fullWidth\n              />\n            </div>\n\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo2\"\n                options={mlfbList}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue}\n                onChange={(event, value) => {\n                  handleAutoChange(\"product_id\", value ? value.id : null);\n                  setSelectedValue(value);\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"MLFB No.\"\n                  />\n                )}\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"id\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"entry_type\",\n                headerName: \"Entry Type\",\n                flex: 0.1,\n              },\n              {\n                field: \"comp_id\",\n                headerName: \"Comp Id\",\n                flex: 0.1,\n              },\n              {\n                field: \"tran_no\",\n                headerName: \"Tran No\",\n                flex: 0.1,\n              },\n              {\n                field: \"date\",\n                headerName: \"Date\",\n                flex: 0.1,\n              },\n              {\n                field: \"party\",\n                headerName: \"Party\",\n                flex: 0.1,\n              },\n              {\n                field: \"in_qty\",\n                headerName: \"In Qty\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"out_qty\",\n                headerName: \"Out Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n              {\n                field: \"balance\",\n                headerName: \"Balance\",\n                flex: 0.1,\n                align: \"right\",\n              },\n            ]}\n            pagination\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={browseListData}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ItemLedgerBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Profile\\profile.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\user rights\\browse.js",["1439","1440"],"import {\n  Checkbox,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\nconst UserRightList = () => {\n  const [menuList, setMenuList] = useState({first_menu:[],second_menu:[],third_menu:[]});\n  const [selectedMenu, setSelectedMenu] = useState({\n    first_menu:\"\",\n    second_menu:\"\",\n    third_menu:\"\"\n  });\n  const [userRightList, setUserRightList] = useState([]);\n  const [selectedUserRight, setSelectedUserRight] = useState([]);\n  const [filteredArray, setFilteredArray] = useState([]);\n  const getMenuList = (id,menu) => {\n    CommonController.commonApiCallFilter(\"user/transaction_menu_list\",{parent_id:id},\"post\",\"node\")\n      .then((data) => setMenuList({...menuList,[menu]:data.data}))\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n  const getUserRightList = (id) => {\n    CommonController.commonApiCallFilter(\n      \"user/get_transaction_right\",{transaction_id:id},\"post\",\"node\"\n    )\n      .then((data) => {\n        setUserRightList(data.data);\n        setFilteredArray(data.data);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n  const onSearch = (e) => {\n    console.log(e.target.value)\n    console.log(e.code)\n    if (e.code === \"Enter\") {\n      const items = userRightList.filter((x) => x.employee ===e.target.value);\n\n      if (items.length > 0) {\n        setFilteredArray(items);\n      }\n    }\n  };\n  useEffect(() => {\n    getMenuList(0,\"first_menu\");\n  }, []);\n  const handleFirstMenu = (event, value) => {\n    console.log(value)\n    setSelectedMenu({...selectedMenu,[event.target.id.split(\"-\")[0]]:value,third_menu:\"\",second_menu:\"\"});\n    if (value.transaction_id) {\n      getMenuList(value.transaction_id,\"second_menu\")\n    }\n  };\n  const handleSecondMenu = (event, value) => {\n    setSelectedMenu({...selectedMenu,[event.target.id.split(\"-\")[0]]:value,third_menu:\"\"});\n    if (value.transaction_id) {\n      getMenuList(value.transaction_id,\"third_menu\");\n    }\n  };\n  const handleThirdMenu = (event, value) => {\n    setSelectedMenu({...selectedMenu,[event.target.id.split(\"-\")[0]]:value});\n    if (value.transaction_id) {\n      getUserRightList(value.transaction_id);\n    }\n  };\n  const onUserRightChange = (obj, key, checked) => {\n    let selected = [...selectedUserRight];\n    let item = obj;\n    item[key] = checked ? true : false;\n    let filteredIndex = selectedUserRight.findIndex(\n      (x) => x.user_id === obj.user_id\n    );\n    if (filteredIndex > -1) {\n      selected[filteredIndex][key] = checked ? true : false;\n      setSelectedUserRight(selected);\n    } else {\n      setSelectedUserRight([...selectedUserRight, item]);\n    }\n  };\n  const onSave = () => {\n  const body={\n      user_id:localStorage.getItem(\"userId\"),\n      transaction_id:selectedMenu.third_menu.transaction_id,\n      transaction_name:selectedMenu.third_menu.transaction_name,\n      userRight:selectedUserRight\n    }\n    CommonController.commonApiCallFilter(\"user/update_user_right\",body,\"post\",\"node\")\n      .then((data) => {\n        if (data.status===200) {\n          showSuccessToast(\"User updated successfully\");\n        } else {\n          showErrorToast(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <div className=\"container-fluid p-4\">\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            <Autocomplete\n              disablePortal\n              id=\"first_menu\"\n              options={menuList.first_menu}\n              getOptionLabel={(option) => option.transaction_name}\n              fullWidth\n              onChange={handleFirstMenu}\n              value={selectedMenu.first_menu}\n              size=\"small\"\n              renderInput={(params) => (\n                <TextField {...params} variant=\"outlined\" label=\"First Menu\" />\n              )}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <Autocomplete\n              disablePortal\n              id=\"second_menu\"\n              options={menuList.second_menu}\n              getOptionLabel={(option) => option.transaction_name}\n              fullWidth\n              onChange={handleSecondMenu}\n              value={selectedMenu.second_menu}\n              size=\"small\"\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"outlined\"\n                  label=\"Second Menu\"\n                />\n              )}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <Autocomplete\n              disablePortal\n              id=\"third_menu\"\n              options={menuList.third_menu}\n              getOptionLabel={(option) => option.transaction_name}\n              fullWidth\n              onChange={handleThirdMenu}\n              value={selectedMenu.third_menu}\n              size=\"small\"\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"outlined\"\n                  label=\"Third Menu\"\n                />\n              )}\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              label=\"Search\"\n              onKeyDown={onSearch}\n            />\n          </div>\n        </div>\n        <Paper style={{ width: \"100%\", overflow: \"hidden\" }}>\n          <TableContainer className=\"mt-4\" style={{ maxHeight: 440 }}>\n            <Table stickyHeader aria-label=\"sticky table\">\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell>Transaction</StyledTableCell>\n                  <StyledTableCell>View</StyledTableCell>\n                  <StyledTableCell>New</StyledTableCell>\n                  <StyledTableCell>Edit</StyledTableCell>\n                  <StyledTableCell>Delete</StyledTableCell>\n                  <StyledTableCell>Print</StyledTableCell>\n                  <StyledTableCell>Approve</StyledTableCell>\n                  {/* <StyledTableCell>Revise</StyledTableCell>\n                  <StyledTableCell>Allocation</StyledTableCell>\n                  <StyledTableCell>High Priority</StyledTableCell> */}\n                  <StyledTableCell>Special Column</StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredArray.map((menu, index) => {\n                  return (\n                    <TableRow\n                      sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                      key={index}\n                    >\n                      <TableCell>{menu.employee}</TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"view_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.view_right ==true}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"insert_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.insert_right ===true}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"edit_button\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.edit_button ===true}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"delete_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.delete_right ===true}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"print_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.print_right ===true}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"approve_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.approve_right ===true}\n                        />\n                      </TableCell>\n                      {/* <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"revise_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.revise_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"allocation_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.allocation_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"high_priority_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.high_priority_right == \"True\"}\n                        />\n                      </TableCell> */}\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"special_column\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.special_column ===true}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n        <div className=\"w-100 mt-3 text-right\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onSave}\n            disableElevation\n          >\n            Update\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserRightList;\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\browse.js",["1441","1442","1443","1444","1445"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\n\r\nconst DeliveryChallanBrowse = ({ type ,slType }) => {\r\n  \r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    status: \"\",\r\n    chk_all: false,\r\n    sl_type:slType,\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n     setBodyParam({...bodyParam,sl_type:event})\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistics/dc/browseDelivery\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.recordsFiltered);\r\n          setAmountFigures({\r\n            amount: data.amount,\r\n            mdc_amount: data.mdc_amount,\r\n            actual_amount: data.actual_amount,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleBodyParam(slType)\r\n  \r\n  }, [slType]);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center\">\r\n        <div className=\"filter_box \">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-1 d-flex align-items-center\">\r\n              <h4 className=\"mb-2\">Filters</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"row \" style={{\"width\":\"200%\"}}>\r\n            <div className=\"col-md-2\">\r\n              <TextField\r\n                fullWidth\r\n                id=\"outlined-basic\"\r\n                size=\"small\"\r\n                onKeyUp={handleParams}\r\n                name=\"filter_value\"\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n\r\n            <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n          </div>\r\n        </div>\r\n        <div className=\"widget-container pl-5\">\r\n          <div className=\"widget-box first\">\r\n            <span>Amount</span>\r\n            <p>{currenyMasking(amountFigures.amount)}</p>\r\n          </div>\r\n          <div className=\"widget-box second\">\r\n            <span>MDC Amount</span>\r\n            <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n          </div>\r\n          <div className=\"widget-box third\">\r\n            <span>Actual Amount</span>\r\n            <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n\r\n            {\r\n              field: \"dc_no\",\r\n              headerName: \"D.C No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n\r\n            {\r\n              field: \"contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"sales_order\",\r\n              headerName: \"Sales Order\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"so_date\",\r\n              headerName: \"S.O. Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_date\",\r\n              headerName: \"Ref Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"di_no\",\r\n              headerName: \"DI No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"pi_no\",\r\n              headerName: \"PI No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"dispatch_thr\",\r\n              headerName: \"Dispatch Thr.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"destination\",\r\n              headerName: \"Destination\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"amount\",\r\n              headerName: \"Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mdc_amount\",\r\n              headerName: \"MDC Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"actual_amount\",\r\n              headerName: \"Actual Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"status\",\r\n              headerName: \"Status\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"comments\",\r\n              headerName: \"Comments\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Datetime\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]} \r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeliveryChallanBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\browse.js",["1446","1447"],"import { TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport { selectedGodownId } from \"../../../_redux/actions/masters/all.action\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst GodownBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Godown/BrowseGodownMaster\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedGodownId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Godown/GodownMasterDelete\", {\n      godown_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"godown_name\",\n              headerName: \"Godown Name\",\n              flex: 0.1,\n            },\n            {\n              field: \"address\",\n              headerName: \"Address\",\n              flex: 0.1,\n            },\n            {\n              field: \"datetime\",\n              headerName: \"Date\",\n              flex: 0.1,\n            },\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.godown_id)}\n                  onDelete={() => handleDeleteRow(params.row.godown_id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default GodownBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\index.js",["1448","1449","1450"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBrowseUserRight } from \"../../../components/common\";\nimport SupportTicketApprovalBrowse from \"./browse\";\n\nconst SupportTicketApprovalIndex = () => {\n  const userRight = useSelector((state) => state.common.userRightList);\n\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        {getBrowseUserRight(userRight)?.insert_right === \"True\" && (\n          <li className=\"nav-item\">\n            <a\n              className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n              onClick={() => {\n                // dispatch(clearSelectedGodownId());\n                handleIndex(1);\n              }}\n            >\n              New Ticket Approval\n            </a>\n          </li>\n        )}\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? <SupportTicketApprovalBrowse /> : \"\"}\n      </div>\n    </div>\n  );\n};\n\nexport default SupportTicketApprovalIndex;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\index.js",["1451","1452"],"import React, { useState } from \"react\";\nimport AddTicketCommercial from \"./addCommericial\";\nimport SupportTicketCommericialBrowse from \"./tcBrowse\";\nconst SupportTicketCommercialIndex = (props) => {\n  const approvalObj = props.location.state;\n  const [selectedIndex, setSeletedIndex] = useState(\n    approvalObj ? approvalObj.index : 0\n  );\n  const [selectedId, setSelectedId] = useState(null);\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Commercial\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SupportTicketCommericialBrowse\n            selectedPreviewId={(id) => {\n              setSelectedId(id);\n              handleIndex(1);\n            }}\n          />\n        ) : (\n          <AddTicketCommercial\n            previewId={approvalObj ? approvalObj.id : selectedId}\n            changeTab={handleIndex}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SupportTicketCommercialIndex;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\index.js",["1453","1454"],"import React, { useState } from \"react\";\nimport AddSupportTicket from \"./addTicket\";\nimport SupportTicketBrowse from \"./browse\";\nconst SupportTicketIndex = () => {\n  const [selectedIndex, setSeletedIndex] = useState(0);\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n         \n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n         \n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Ticket\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? <SupportTicketBrowse /> : <AddSupportTicket />}\n      </div>\n    </div>\n  );\n};\n\nexport default SupportTicketIndex;\n","F:\\React code\\diagnostic\\src\\config.js",[],"F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\index.js",["1455","1456","1457"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Sales Enquiry\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesEnquiryBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesIndex;\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\index.js",["1458","1459","1460"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport DeliveryChallanBrowse from \"./browse\";\nimport AddDeliveryChallan from \"./dc-add\";\n\nconst ChallanIndex = ({ type ,slType}) => {\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n          {`New ${slType} DC` }\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <DeliveryChallanBrowse type={type} slType={slType} />\n        ) : (\n          <AddDeliveryChallan challanType={type} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChallanIndex;\n","F:\\React code\\diagnostic\\src\\components\\common.js",["1461","1462"],"import { Button } from \"@material-ui/core\";\nimport { useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure();\n\nexport const showSuccessToast = (msg) => {\n  toast.success(msg, {\n    position: \"bottom-right\",\n    autoClose: 10000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    theme: \"colored\",\n  });\n};\nexport const showErrorToast = (msg) => {\n  toast.error(msg, {\n    position: \"bottom-right\",\n    autoClose: 10000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    theme: \"colored\",\n  });\n};\nexport const UserRight=()=>{\n  const thirdmenu=useSelector((state)=>state.common.userRightListThird)\n  console.log(thirdmenu)\n}\nexport const buttonLoader = (loading, label, onClick, color) => {\n  return (\n    <Button\n      variant=\"contained\"\n      color={color}\n      disabled={loading}\n      onClick={onClick}\n      disableElevation\n    >\n      {loading ? <i class=\"fas fa-circle-notch fa-spin\"></i> : label}\n    </Button>\n  );\n};\nexport const getBrowseUserRight = (response) => {\n  const pathArr = window.location.pathname.split(\"/\").filter((x) => x != \"\");\n  // console.log(pathArr);\n  // console.log(response?.filter((x) => x.transaction_name.toLowerCase() == pathArr[2]));\n  return response?.filter((x) => x.transaction_name.toLowerCase() == pathArr[2])[0]\n};\n\nexport const getAutoValue = (key, arr, val) => {\n  const value = arr.filter((x) => x[key] === val);\n  return value && value.length > 0 ? value[0] : null;\n};\nexport const debounce = (func, delay) => {\n  let debounceTimer;\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(() => func.apply(context, args), delay);\n  };\n};\nexport const getUserId = () => {\n  return localStorage.getItem(\"userId\");\n};\n","F:\\React code\\diagnostic\\src\\components\\CustomPagination.js",[],"F:\\React code\\diagnostic\\src\\components\\customRowComponent.js",[],"F:\\React code\\diagnostic\\src\\pages\\DC\\index.js",["1463","1464","1465"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport DCBrowseList from \"./browse\";\nimport NewDCPackaging from \"./form\";\n\nconst DCIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Packaging\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? <DCBrowseList /> : <NewDCPackaging />}\n      </div>\n    </div>\n  );\n};\n\nexport default DCIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\index.js",["1466","1467"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { clearMaterialCodeEditId } from \"../../../_redux/actions/masters/materialcode.action\";\r\nimport AddMaterialCode from \"./addMaterialCode\";\r\nimport MaterialCodeBrowse from \"./browse\";\r\n\r\nconst MaterialCodeIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(0)}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(1)}\r\n          >\r\n            Add Material Code\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <MaterialCodeBrowse onEditMaterial={() => handleIndex(1)} />\r\n        ) : (\r\n          <AddMaterialCode\r\n            onCancel={() => {\r\n              handleIndex(0);\r\n              dispatch(clearMaterialCodeEditId());\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaterialCodeIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\index.js",["1468","1469","1470"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getCategoryList } from \"../../../_redux/actions/masters/product.action\";\r\nimport AddNewProduct from \"./addProduct\";\r\nimport BrowseProductMaster from \"./browse\";\r\n\r\nconst ProductMasterIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSelectedIndex(index);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // dispatch(getProductListBrowse(params, productMasterFilter));\r\n    dispatch(getCategoryList());\r\n    // dispatch(getLPRefList());\r\n    // dispatch(getGGNameList());\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n        <ul className=\"nav nav-tabs nav-tabs-line\">\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n              onClick={() => handleIndex(0)}\r\n            >\r\n              Browse\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n              onClick={() => handleIndex(1)}\r\n            >\r\n              New Product\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <div className=\"tab-content\">\r\n          {selectedIndex === 0 ? (\r\n            <BrowseProductMaster onEdit={() => handleIndex(1)} />\r\n          ) : (\r\n            <AddNewProduct />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductMasterIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\index.js",["1471","1472","1473"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport AddItemGroupMaster from \"./addItem\";\nimport ItemGroupBrowse from \"./browse\";\n// import AddMaterialCode from \"./addMaterialCode\";\n// import MaterialCodeBrowse from \"./browse\";\nconst ItemGroupIndex = () => {\n  const [selectedIndex, setSeletedIndex] = useState(0);\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              //   dispatch(clearSelectedComboId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              //   dispatch(clearSelectedComboId());\n              handleIndex(1);\n            }}\n          >\n            New Item Group\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {\n          selectedIndex === 0 ? (\n            <ItemGroupBrowse onEdit={() => handleIndex(1)} />\n          ) : (\n            <AddItemGroupMaster />\n          )\n          //   <AddComboMLFB onClose={() => handleIndex(0)} />\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default ItemGroupIndex;\n","F:\\React code\\diagnostic\\src\\components\\dateFilter.js",["1474","1475"],"import { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CommonController } from \"../_redux/controller/common.controller\";\r\nimport { showErrorToast } from \"./common\";\r\n\r\nconst DateFilter = ({ onDateUpdate }) => {\r\n  const [dateUpdate, setDateUpdate] = useState(0)\r\n  const [dateParams, setDateParams] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    from_date: null,\r\n    to_date: null,\r\n  });\r\n\r\n  const { from_date, to_date } = dateParams;\r\n  const getDateFilter = async () => {\r\n    try {\r\n      let user_id=localStorage.getItem(\"userId\")\r\n      await CommonController.commonApiCallFilter(\r\n        \"user/date_filter\",\r\n        {user_id:user_id},\r\n        \"get\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status===200) {\r\n         const [getDate]=data.data;\r\n         setDateParams({...dateParams,from_date:getDate.start_date,to_date:getDate.end_date\r\n         })\r\n          onDateUpdate();\r\n        } else {\r\n          showErrorToast(data.msg);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n\r\n  const updateDateFilter = async () => {\r\n    try {\r\n      let date = { ...dateParams };\r\n      date.from_date = moment(date.from_date).format(\"MM/DD/yyyy\");\r\n      date.to_date = moment(date.to_date).format(\"MM/DD/yyyy\");\r\n      await CommonController.commonApiCallFilter(\r\n        \"user/insert_date_filter\",\r\n        date,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status===200) {\r\n\r\n          getDateFilter()\r\n        } else {\r\n          showErrorToast(data.msg);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n \r\n\r\n  const handleDateChange = (name, date) => {\r\n    setDateParams({ ...dateParams, [name]: date });\r\n    setDateUpdate(dateUpdate+1);\r\n  };\r\n  useEffect(() => {\r\ngetDateFilter()\r\n  },[])\r\n  \r\n  useEffect(() => {\r\n    if (from_date && to_date) {\r\n      updateDateFilter();\r\n    }\r\n  }, [dateUpdate]);\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"col-md-2\">\r\n        <DatePicker\r\n          label=\"From Date\"\r\n          value={from_date}\r\n          format=\"dd/MM/yyyy\"\r\n          onChange={(date) => handleDateChange(\"from_date\", date)}\r\n          animateYearScrolling\r\n          inputVariant=\"outlined\"\r\n          size=\"small\"\r\n          fullWidth\r\n        />\r\n      </div>\r\n      <div className=\"col-md-2\">\r\n        <DatePicker\r\n          label=\"To Date\"\r\n          value={to_date}\r\n          onChange={(date) => handleDateChange(\"to_date\", date)}\r\n          animateYearScrolling\r\n          format=\"dd/MM/yyyy\"\r\n          minDate={from_date}\r\n          inputVariant=\"outlined\"\r\n          size=\"small\"\r\n          fullWidth\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DateFilter;\r\n","F:\\React code\\diagnostic\\src\\components\\action-buttons.js",[],"F:\\React code\\diagnostic\\src\\components\\loader.js",["1476","1477"],"import React from \"react\";\nimport loaderImg from \"../assets/image/loader.gif\";\n\nexport const Loader = () => {\n  return \"\";\n  // <div className=\"custom-loading\">\n  //   <div>\n  //     <img src={loaderImg} />\n  //     {/* <Cu */}\n  //     <p>Please wait...</p>\n  //   </div>\n  // </div>\n};\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\browse.js",["1478","1479","1480","1481"],"import {\n  TextField,\n  MenuItem,\n  ListItem,\n  ListItemText,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  List,\n  ListItemAvatar,\n  Avatar,\n} from \"@material-ui/core\";\nimport { Button } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport DateFilter from \"../../../components/dateFilter\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst SupportTicketBrowse = (props) => {\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [attachedFile, setAttachedFile] = useState(null);\n  const [remarks, setRemarks] = useState({\n    mtran_id: \"\",\n    comments: \"\",\n    status: \"\",\n    attach_file: \"\",\n    rit_user: localStorage.getItem(\"userName\"),\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const [empList, setEmpList] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n  const [bodyParam, setBodyParam] = useState({\n    user_id: 1,\n    generated_by: \"\",\n    status: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"Ticket/SupportTicketBrowse\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const getEmployeeList = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        `Dropdown/GetEmpListInSupport`,\n        { user_id: localStorage.getItem(\"userId\") },\n        \"get\"\n      ).then((data) => {\n        setEmpList(data);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n  useEffect(() => {\n    getBrowseListData();\n    getEmployeeList();\n  }, []);\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n  const toggleRemarks = () => setRemarksModal(!remarksModal);\n  const saveRemarks = async () => {\n    setLoading(true);\n    try {\n      let formdata = new FormData();\n      formdata.append(\"file\", attachedFile);\n      await CommonController.commonApiFile(\n        \"Ticket/TicketImageInsert\",\n        formdata\n      );\n      await CommonController.commonApiCallFilter(\n        \"Ticket/TicketCommentInsert\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, mtran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Ticket/GetTicketComment\",\n      {\n        mtran_id: id,\n      },\n      \"post\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"generated_by\"\n              select\n              label=\"Generated By\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {empList &&\n                empList.map((emp, index) => {\n                  return (\n                    <MenuItem key={index} value={emp.value}>\n                      {emp.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"status\"\n              select\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"open\"}>Open</MenuItem>\n              <MenuItem value={\"close\"}>Close</MenuItem>\n            </TextField>\n          </div>\n        </div>\n      </div>\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status\"\n            onChange={onRemarkChange}\n            label=\"Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"comment\"\n            onChange={onRemarkChange}\n            label=\"Comments*\"\n            fullWidth\n          />\n          <div className=\"form-group mt-3\">\n            <label>Upload Attachment</label>\n            <input\n              className=\"form-control\"\n              id=\"files\"\n              onChange={(e) => {\n                if (e.target.files.length > 0) {\n                  setAttachedFile(e.target.files[0]);\n                  setRemarks({\n                    ...remarks,\n                    attach_file: e.target.files[0].name,\n                  });\n                } else {\n                  setAttachedFile(null);\n                  setRemarks({\n                    ...remarks,\n                    attach_file: \"\",\n                  });\n                }\n              }}\n              type=\"file\"\n            />\n          </div>\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      {remark.attach_file !== \"\" ? (\n                        <img\n                          src={\n                            \"https://diagapi.quickgst.in/Support_Attachment/\" +\n                            remark.attach_file\n                          }\n                        />\n                      ) : (\n                        <Avatar>\n                          <ImageIcon />\n                        </Avatar>\n                      )}\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.emp_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.comments}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks === \"\" || remarks.status_id === \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n              hide: true,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"ticket_no\",\n              headerName: \"Ticket No\",\n              width: 120,\n            },\n            {\n              field: \"menu\",\n              headerName: \"Menu\",\n              width: 120,\n            },\n            {\n              field: \"transaction\",\n              headerName: \"Transaction\",\n              width: 170,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 150,\n            },\n            {\n              field: \"priority\",\n              headerName: \"Priority\",\n              width: 100,\n            },\n            {\n              field: \"details\",\n              headerName: \"Details\",\n              width: 200,\n            },\n            {\n              field: \"generated_by\",\n              headerName: \"Generated By\",\n              width: 130,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 170,\n            },\n            {\n              field: \"attachments\",\n              headerName: \"Attachments\",\n              width: 100,\n            },\n\n            {\n              field: \"\",\n              headerName: \"\",\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        Comment\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SupportTicketBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\addTicket.js",["1482","1483","1484"],"import { Button, MenuItem, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  buttonLoader,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport {\n  getUserRightList,\n} from \"../../../_redux/actions/common.action\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst AddSupportTicket = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n  const [userRightListArr, setUserRightList] = useState([]);\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n  const [attachments, setAttachments] = useState({\n    attach_file: null,\n    attach_file1: null,\n    attach_file2: null,\n  });\n  const [subMenuList, setSubMenuList] = useState([]);\n  useEffect(() => {\n    dispatch(getUserRightList());\n    // dispatch(getUserFilterList());\n  }, []);\n  // const groupBy = (array, key) => {\n  //   // Return the end result\n  //   return array.reduce((result, currentValue) => {\n  //     // If an array already present for key, push it to the array. Else create an array and push the object\n  //     (result[currentValue[key]] = result[currentValue[key]] || []).push(\n  //       currentValue\n  //     );\n  //     // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\n  //     return result;\n  //   }, {}); // empty object is the initial value for result object\n  // };\n  useEffect(() => {\n    if (getuserRightListResponse.length > 0) {\n      setUserRightList(getuserRightListResponse);\n    }\n  }, [getuserRightListResponse]);\n  const handleMenuChange = (id) => {\n    var tempMenuIndex = userRightListArr.findIndex((x) => x.menu_id === id);\n    if (tempMenuIndex > -1) {\n      setSubMenuList(userRightListArr[tempMenuIndex].transaction_lst);\n    }\n    setFormData({\n      ...formData,\n      menu: userRightListArr[tempMenuIndex].menu_id,\n      menu_name: userRightListArr[tempMenuIndex].menu_name,\n    });\n  };\n\n  const [formData, setFormData] = useState({\n    tran_id: \"\",\n    ticket_no: \"\",\n    date: \"\",\n    menu: \"\",\n    menu_name: \"\",\n    transaction: \"\",\n    type: \"\",\n    priority: \"\",\n    details: \"\",\n    attach_file: \"\",\n    attach_file1: \"\",\n    attach_file2: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const {\n    date,\n    ticket_no,\n    menu,\n    transaction,\n    details,\n\n    type,\n    priority,\n  } = formData;\n\n  useEffect(() => {\n    getSupportTicketData();\n  }, []);\n\n  const getSupportTicketData = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"Ticket/SupportTicketPreview\",\n        formData,\n        \"post\"\n      ).then((data) => {\n        setFormData({\n          ...formData,\n          date: data.date,\n          ticket_no: data.ticket_no,\n        });\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const handleFormData = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const handleFileChange = (e) => {\n    if (e.target.files.length > 0) {\n      setAttachments({ ...attachments, [e.target.name]: e.target.files[0] });\n      setFormData({ ...formData, [e.target.name]: e.target.files[0].name });\n    } else {\n      setAttachments({ ...attachments, [e.target.name]: null });\n      setFormData({ ...formData, [e.target.name]: \"\" });\n    }\n  };\n\n  const generateTicket = async () => {\n    try {\n      if (validateForm()) {\n        let formdata = new FormData();\n        for (var key in attachments) {\n          if (attachments.hasOwnProperty(key) && attachments[key]) {\n            formdata.append(key, attachments[key]);\n          }\n        }\n        await CommonController.commonApiFile(\n          \"Ticket/TicketImageInsert\",\n          formdata\n        );\n        await CommonController.commonApiCallFilter(\n          \"Ticket/SupportTicketInsert\",\n          formData\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Ticket Generated Successfully\");\n          } else {\n            showErrorToast(data.msg);\n          }\n        });\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const validateForm = () => {\n    let errors = {};\n    if (formData.menu === \"\") {\n      errors.menu = \"Menu required\";\n    } else {\n      delete errors.menu;\n    }\n\n    console.log(formData.type);\n    if (formData.type === \"\") {\n      errors.type = \"Type required\";\n    } else {\n      delete errors.type;\n    }\n\n    const valid = Object.keys(errors).length === 0 ? true : false;\n    setErrors(errors);\n    return valid;\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <div className=\"col-md-4 mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            disabled\n            size=\"small\"\n            name=\"date\"\n            label=\"Date\"\n            variant=\"outlined\"\n            value={date}\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-4  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"ticket_no\"\n            label=\"Ticket No\"\n            disabled\n            variant=\"outlined\"\n            value={ticket_no}\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-4  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"generated_by\"\n            disabled\n            label=\"Generated By\"\n            value={localStorage.getItem(\"userName\")}\n            variant=\"outlined\"\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"menu\"\n            select\n            label=\"Menu*\"\n            value={menu}\n            variant=\"outlined\"\n            onChange={(e) => {\n              handleMenuChange(e.target.value);\n            }}\n          >\n            <MenuItem value={\"\"}>None</MenuItem>\n            {userRightListArr.length > 0 &&\n              userRightListArr.map((menu, index) => {\n                return (\n                  <MenuItem key={index} value={menu.menu_id}>\n                    {menu.menu_name}\n                  </MenuItem>\n                );\n              })}\n          </TextField>\n          {errors.menu && <p className=\"text-danger mb-0\">{errors.menu}</p>}\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"transaction\"\n            select\n            label=\"Transaction\"\n            value={transaction}\n            variant=\"outlined\"\n            onChange={handleFormData}\n          >\n            {subMenuList.length > 0 &&\n              subMenuList.map((transaction, index) => {\n                return (\n                  <MenuItem key={index} value={transaction.transaction_name}>\n                    {transaction.transaction_name}\n                  </MenuItem>\n                );\n              })}\n          </TextField>\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"type\"\n            select\n            label=\"Type*\"\n            value={type}\n            variant=\"outlined\"\n            onChange={handleFormData}\n          >\n            <MenuItem value={\"New Development\"}>New Development</MenuItem>\n            <MenuItem value={\"Modification\"}>Modification</MenuItem>\n            <MenuItem value={\"Problem\"}>Problem</MenuItem>\n            <MenuItem value={\"Other\"}>Other</MenuItem>\n          </TextField>\n          {errors.type && <p className=\"text-danger mb-0\">{errors.type}</p>}\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"priority\"\n            select\n            label=\"Priority\"\n            variant=\"outlined\"\n            value={priority}\n            onChange={handleFormData}\n          >\n            <MenuItem value={\"High\"}>High</MenuItem>\n            <MenuItem value={\"Medium\"}>Medium</MenuItem>\n            <MenuItem value={\"Low\"}>Low</MenuItem>\n          </TextField>\n        </div>\n        <div className=\"col-md-12  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"details\"\n            multiline\n            label=\"Details\"\n            value={details}\n            onChange={handleFormData}\n            variant=\"outlined\"\n          />\n        </div>\n        <div className=\"col-md-1\">\n          <label className=\"font-weight-bold\">Attachment</label>\n        </div>\n        <div className=\"col-md-3\">\n          <input\n            type=\"file\"\n            name=\"attach_file\"\n            onChange={handleFileChange}\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-md-3\">\n          <input\n            type=\"file\"\n            name=\"attach_file1\"\n            onChange={handleFileChange}\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-md-3\">\n          <input\n            type=\"file\"\n            name=\"attach_file2\"\n            onChange={handleFileChange}\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-md-12 mt-5 text-right\">\n          <Button\n            variant=\"contained\"\n            className=\"mr-2\"\n            color=\"primary\"\n            disableElevation\n          >\n            Cancel\n          </Button>\n          {buttonLoader(loading, \"Save\", generateTicket, \"primary\")}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddSupportTicket;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\tcBrowse.js",["1485","1486"],"import { TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport DateFilter from \"../../../components/dateFilter\";\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst SupportTicketCommericialBrowse = ({ selectedPreviewId }) => {\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"DESC\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    menu: \"\",\n    transaction: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"TicketCommercial/TicketCommericialBrowse\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n\n  return (\n    <>\n      {/* {loading && <Loader />} */}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={getBrowseListData} />\n          <div className=\"col-md-2 \">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"menu\"\n              label=\"Menu\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2 \">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"transaction\"\n              label=\"Transaction\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n              hide: true,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"ticket_date\",\n              headerName: \"Ticket Date\",\n              width: 120,\n            },\n            {\n              field: \"ticket_no\",\n              headerName: \"Ticket No\",\n              width: 120,\n              renderCell: (param) => {\n                return (\n                  <button\n                    className=\"btn btn-link\"\n                    onClick={() => selectedPreviewId(param.row.tran_id)}\n                  >\n                    {param.row.ticket_no}\n                  </button>\n                );\n              },\n            },\n            {\n              field: \"menu\",\n              headerName: \"Menu\",\n              width: 120,\n            },\n            {\n              field: \"transaction\",\n              headerName: \"Transaction\",\n              width: 170,\n            },\n\n            {\n              field: \"details\",\n              headerName: \"Details\",\n              width: 200,\n            },\n            {\n              field: \"charges\",\n              headerName: \"Charges\",\n              width: 130,\n            },\n\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 170,\n            },\n            {\n              field: \"approved_charges\",\n              headerName: \"Approved Charges\",\n              width: 100,\n            },\n            {\n              field: \"approved_remarks\",\n              headerName: \"Approved Remarks\",\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SupportTicketCommericialBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\addCommericial.js",["1487"],"import { Button } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  buttonLoader,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { TablePicker } from \"../../../components/table-picker\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nconst AddTicketCommercial = ({ changeTab, previewId, ...props }) => {\n  const [selectedTicket, setSelectedTicket] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showPicker, setShowPicker] = useState(false);\n  const togglePicker = () => setShowPicker(!showPicker);\n  const [errors, setErrors] = useState({});\n  const [formData, setFormData] = useState({\n    tran_id: previewId ? previewId : \"0\",\n    ticket_id: \"\",\n    date: moment().format(\"DD-MM-yyyy\"),\n    charges: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n  const validateForm = () => {\n    let errors = {};\n    if (formData.charges === \"\") {\n      errors.charges = \"Charges required\";\n    } else {\n      delete errors.charges;\n    }\n    if (formData.remarks ===\"\") {\n      errors.remarks = \"Remarks required\";\n    } else {\n      delete errors.remarks;\n    }\n\n    const valid = Object.keys(errors).length === 0 ? true : false;\n    setErrors(errors);\n    return valid;\n  };\n\n  const onSubmit = async () => {\n    try {\n      setLoading(true);\n      if (validateForm()) {\n        await CommonController.commonApiCallFilter(\n          \"TicketCommercial/TicketCommericialInsert\",\n          formData,\n          \"post\"\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Ticket Commercial Successfully\");\n            changeTab(0);\n          } else {\n            showErrorToast(data.msg);\n          }\n        });\n      }\n      setLoading(false);\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const getTicketById = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"TicketCommercial/TicketCommericialPreview\",\n        { tran_id: previewId },\n        \"post\"\n      ).then((data) => {\n        setSelectedTicket(data);\n        setFormData({\n          ...formData,\n          charges: data.charges,\n          remarks: data.remarks,\n          ticket_id: data.ticket_id,\n        });\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  useEffect(() => {\n    if (previewId) {\n      getTicketById();\n    }\n  }, [previewId]);\n\n  const newColumns = [\n    {\n      id: \"id\",\n      label: \"Sr. no\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"date\",\n      label: \"Date\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"ticket_no\",\n      label: \"Ticket No\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"menu\",\n      label: \"Menu\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"transaction\",\n      label: \"Transaction\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"type\",\n      label: \"Type\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"priority\",\n      label: \"Priority\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"details\",\n      label: \"Details\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"generated_by\",\n      label: \"Generated By\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"status\",\n      label: \"Status\",\n      numeric: false,\n      disablePadding: true,\n    },\n  ];\n\n  const handlePickTicket = (ticket) => {\n    setFormData({ ...formData, ticket_id: String(ticket.id) });\n    setSelectedTicket(ticket);\n    setShowPicker(false);\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <div className=\"col-md-12 text-right\">\n          {!showPicker && (\n            <Button\n              variant=\"contained\"\n              onClick={togglePicker}\n              disableElevation\n              color=\"primary\"\n            >\n              Pick Ticket\n            </Button>\n          )}\n          {showPicker && (\n            <TablePicker\n              selectedItems={selectedTicket}\n              columns={newColumns}\n              type=\"single\"\n              url={\"TicketCommercial/PickTicketInCommercial\"}\n              onSubmit={handlePickTicket}\n              onPickerClose={togglePicker}\n            />\n          )}\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Ticket Date</label>\n            <p>\n              {selectedTicket && selectedTicket.date !== \"\"\n                ? selectedTicket.date\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Ticket No.</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.ticket_no !== \"\"\n                ? selectedTicket.ticket_no\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Generated By</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.generated_by !== \"\"\n                ? selectedTicket.generated_by\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Menu</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.menu !== \"\"\n                ? selectedTicket.menu\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Transaction</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.transaction !== \"\"\n                ? selectedTicket.transaction\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Type</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.type !== \"\"\n                ? selectedTicket.type\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Priority</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.priority !==\"\"\n                ? selectedTicket.priority\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Details</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.details !== \"\"\n                ? selectedTicket.details\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Date</label>\n            <input\n              type=\"text\"\n              className=\"form-control w-75\"\n              value={formData.date}\n              disabled\n            />\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Charges</label>\n            <input\n              type=\"text\"\n              className=\"form-control w-75\"\n              name=\"charges\"\n              value={formData.charges}\n              onChange={handleChange}\n            />\n            {errors.charges && <p className=\"text-danger\">{errors.charges}</p>}\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Remarks</label>\n            <textarea\n              type=\"text\"\n              value={formData.remarks}\n              name=\"remarks\"\n              onChange={handleChange}\n              className=\"form-control w-75\"\n            ></textarea>\n            {errors.remarks && <p className=\"text-danger\">{errors.remarks}</p>}\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Approved Date</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.approved_date !== \"\"\n                ? selectedTicket.approved_date\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Approved Charges</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.approved_charges !== \"\"\n                ? selectedTicket.approved_charges\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Approved Remarks</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.approved_remarks !== \"\"\n                ? selectedTicket.approved_remarks\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-12 text-right\">\n          <Button\n            variant=\"contained\"\n            onClick={() => changeTab(0)}\n            className=\"mr-2\"\n            disableElevation\n          >\n            Cancel\n          </Button>\n          {buttonLoader(loading, \"Submit\", onSubmit, \"primary\")}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTicketCommercial;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\browse.js",["1488","1489","1490","1491","1492","1493","1494","1495","1496"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport DateFilter from \"../../../components/dateFilter\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst SupportTicketApprovalBrowse = (props) => {\n  const history = useHistory();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n\n  const [loading, setLoading] = useState(false);\n\n  const [empList, setEmpList] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n  const [bodyParam, setBodyParam] = useState({\n    menu: \"\",\n    transaction: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"TicketCommercialApproval/TicketCommercialApprovalBrowse\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n\n  return (\n    <>\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"menu\"\n              label=\"Menu\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2 \">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"transaction\"\n              label=\"Transaction\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n              hide: true,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"ticket_no\",\n              headerName: \"Ticket No\",\n              width: 120,\n              renderCell: (param) => {\n                return (\n                  <button\n                    className=\"btn btn-link\"\n                    onClick={() => {\n                      history.push({\n                        pathname: \"/support/ticket-commercial\",\n                        state: {\n                          index: 1,\n                          id: param.row.tran_id,\n                        },\n                      });\n                    }}\n                  >\n                    {param.row.ticket_no}\n                  </button>\n                );\n              },\n            },\n            {\n              field: \"menu\",\n              headerName: \"Menu\",\n              width: 120,\n            },\n            {\n              field: \"transaction\",\n              headerName: \"Transaction\",\n              width: 170,\n            },\n\n            {\n              field: \"details\",\n              headerName: \"Details\",\n              width: 200,\n            },\n            {\n              field: \"charges\",\n              headerName: \"Charges\",\n              width: 130,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"approved_charges\",\n              headerName: \"Approved Charges\",\n              width: 170,\n            },\n            {\n              field: \"approved_remarks\",\n              headerName: \"Approved Remarks\",\n              width: 170,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SupportTicketApprovalBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\browse.js",["1497","1498","1499","1500","1501","1502","1503","1504"],"import {\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport DateFilter from \"../../../components/dateFilter\";\nconst SalesEnquiryBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  // const handleDateChange = (type, date) => {\n  //   setBodyParam({ ...bodyParam, [type]: date });\n  // };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          \n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesEnquiryBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\addProduct.js",["1505","1506","1507"],"import React, { useEffect, useState } from \"react\";\nimport GeneralProduct from \"./general\";\nimport { Button } from \"@material-ui/core\";\nimport OtherInformation from \"./other\";\nimport { useSelector } from \"react-redux\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nconst AddNewProduct = () => {\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.productId\n  );\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [formData, setFormData] = useState({\n    product_id: \"\",\n    product_code: \"\",\n    category_id: \"\",\n    category_name: \" \",\n    p_group_name: \"\",\n    p_group_id: \"\",\n    item_id: \"\",\n    item_name: \"\",\n    gg_id: \"\",\n    description: \" \",\n    mlfb_no: \"\",\n    grade: \"\",\n    tax_rate: \"\",\n    uom_id: \"\",\n    uom: \"\",\n    package: \"\",\n    qty: \"\",\n    list_price: \"\",\n    margin: \"\",\n    pur_rate: \"\",\n    reorder_level: \"\",\n    lp_ref: \"\",\n    di: \"\",\n    di_value: \"\",\n    ai: \"\",\n    ai_value: \"\",\n    fc: \"\",\n    fc_value: \"\",\n    do: \"\",\n    do_value: \"\",\n    ao: \"\",\n    ao_value: \"\",\n    fm: \"\",\n    fm_value: \"\",\n    edit: \"0\",\n    deactivate: \"0\",\n    serial: \"1\",\n    siemens_product: \"0\",\n    user_id: localStorage.getItem(\"userId\"),\n    user_name: \"\",\n  });\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n  const handleCheckChange = (key, value) => {\n    setFormData({ ...formData, [key]: value ? \"True\" : \"False\" });\n  };\n  const handleAutoChange = (key1, key2, value) => {\n    console.log(key1, key2, value);\n    setFormData({ ...formData, [key1]: value.id, [key2]: value.value });\n  };\n  const onNext = () => {\n    if (selectedTab === 0) {\n      setSelectedTab(1);\n    } else {\n      onSubmit();\n    }\n  };\n  const onSubmit = () => {\n    CommonController.commonApiCallFilter(\n      \"Product/ProductMasterInsert\",\n      formData\n    )\n      .then((data) => {\n        if (data.valid) {\n          showSuccessToast(\n            selectedIdResponse\n              ? \"Product updated successfully\"\n              : \"Product inserted successfully\"\n          );\n        } else {\n          showErrorToast(\"something went wrong\");\n        }\n      })\n      .catch((err) => showErrorToast(\"something went wrong\"));\n  };\n\n  const onBack = () => {\n    setSelectedTab(0);\n  };\n  useEffect(() => {\n    if (selectedIdResponse) {\n      CommonController.commonApiCallFilter(\"Product/PreviewProductMaster\", {\n        product_id: selectedIdResponse,\n      })\n        .then((data) => {\n          // setFormData(data);\n          let tempData = { ...formData };\n          for (let key in formData) {\n            if (data.hasOwnProperty(key)) {\n              tempData[key] = data[key];\n            }\n          }\n          setFormData(tempData);\n        })\n        .catch((err) => {\n          showErrorToast(err);\n        });\n    }\n  }, [selectedIdResponse]);\n  return (\n    <div className=\"container-fluid mt-5\">\n      {/* {loading && <Loader />} */}\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 0 ? \"active\" : \"\")}\n            onClick={() => setSelectedTab(0)}\n          >\n            General Information\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 1 ? \"active\" : \"\")}\n            onClick={() => setSelectedTab(1)}\n          >\n            Technical Information\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content mt-10\">\n        {selectedTab === 0 && (\n          <GeneralProduct\n            formData={formData}\n            handleChange={handleChange}\n            handleAutoChange={handleAutoChange}\n            handleCheckChange={handleCheckChange}\n          />\n        )}\n        {selectedTab === 1 && (\n          <OtherInformation formData={formData} handleChange={handleChange} />\n        )}\n        <div className=\"w-100 text-right\">\n          {selectedTab === 1 && (\n            <Button\n              variant=\"contained\"\n              onClick={onBack}\n              className=\"mr-3\"\n              color=\"primary\"\n              disableElevation\n            >\n              Back\n            </Button>\n          )}\n          <Button\n            variant=\"contained\"\n            onClick={onNext}\n            color=\"primary\"\n            disableElevation\n          >\n            {selectedTab === 1 ? \"Submit\" : \"Next\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddNewProduct;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\browse.js",["1508","1509","1510","1511","1512"],"F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\browse.js",["1513","1514"],"import { TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  selectedItemGroupId,\n} from \"../../../_redux/actions/masters/all.action\";\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst ItemGroupBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"ItemGroup/BrowseItemGroupMaster\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedItemGroupId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"ItemGroup/ItemGroupMasterDelete\", {\n      item_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"category_name\",\n              headerName: \"Category\",\n              flex: 0.1,\n            },\n            {\n              field: \"p_group_name\",\n              headerName: \"Group\",\n              flex: 0.1,\n            },\n            {\n              field: \"item_name\",\n              headerName: \"Item\",\n              flex: 0.1,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              flex: 0.1,\n            },\n            {\n              field: \"mlfb_no\",\n              headerName: \"MLFB No.\",\n              flex: 0.1,\n            },\n\n            {\n              field: \"uom\",\n              headerName: \"UOM\",\n              flex: 0.1,\n            },\n            {\n              field: \"list_price\",\n              headerName: \"List Price\",\n              flex: 0.1,\n            },\n            {\n              field: \"lp_ref\",\n              headerName: \"LP Ref.\",\n              flex: 0.1,\n            },\n            {\n              field: \"datetime\",\n              headerName: \"Datetime\",\n              flex: 0.1,\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.product_id)}\n                  onDelete={() => handleDeleteRow(params.row.product_id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ItemGroupBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\addItem.js",["1515","1516"],"import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Button,\n  CardContent,\n  Card,\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { buttonLoader, showSuccessToast } from \"../../../components/common\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst selectedValues = {\n  editIndex: null,\n  category_id: null,\n  group_id: null,\n  item_id: null,\n  description: null,\n  mlfb_no: \"\",\n  lp_ref: \"\",\n  list_price: \"\",\n  qty: 1,\n  amount: \"\",\n};\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst AddItemGroupMaster = () => {\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.itemGroupId\n  );\n  const [loading, setLoading] = useState(false);\n  const [dataLoading, setDataLoading] = useState(false);\n  const [addedItemList, setAddedItemList] = useState([]);\n  const [formData, setFormData] = useState({\n    product_id: \"0\",\n    category_id: null,\n    p_group_id: null,\n    item_id: null,\n    description: \"\",\n    mlfb_no: \"\",\n    uom_id: null,\n    list_price: \"\",\n    lp_ref: \"\",\n    productQtyItem: [],\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const [dropdownList, setDropDownList] = useState({\n    categoryNameList: [],\n    uomList: [],\n    groupNameList: [],\n    itemNameList: [],\n    descriptionList: [],\n  });\n\n  const [addDropDownList, setAddDropDownList] = useState({\n    categoryNameList: [],\n    groupNameList: [],\n    itemNameList: [],\n    descriptionList: [],\n  });\n\n  const [selectedDropDown, setSelectedDropDown] = useState(selectedValues);\n\n  const [showItemList, setShowItemList] = useState(false);\n\n  const onItemRemove = (index) => {\n    let list = [...addedItemList];\n    list.splice(index, 1);\n    setAddedItemList(list);\n  };\n\n  useEffect(() => {\n    CommonController.commonApiCallFilter(\"ItemGroup/ItemGroupMasterPreview\", {\n      product_id: selectedIdResponse ? selectedIdResponse : 0,\n    }).then((data) => {\n      setDropDownList({\n        ...dropdownList,\n        categoryNameList: data.categoryList,\n        groupNameList: data.groupList,\n        itemNameList: data.itemList,\n        uomList: data.uomList,\n      });\n      setAddDropDownList({\n        ...addDropDownList,\n        categoryNameList: data.categoryList,\n      });\n    });\n  }, [selectedIdResponse]);\n\n  const getFilterGroup = (event, newValue) => {\n    CommonController.commonApiCallFilter(\n      \"ItemGroup/GroupItemDescriptionDDLList\",\n      {\n        category_id: newValue.id,\n      }\n    ).then((data) => {\n      setAddDropDownList({\n        ...addDropDownList,\n        groupNameList: data.objList.groupList,\n        descriptionList: data.objList.descList,\n      });\n      setSelectedDropDown({ ...selectedDropDown, category_id: newValue });\n    });\n  };\n\n  const getFilterItems = (event, newValue) => {\n    CommonController.commonApiCallFilter(\"ItemGroup/ItemDescriptionDDLList\", {\n      category_id: selectedDropDown.category_id.id,\n      group_id: newValue.id,\n    }).then((data) => {\n      setAddDropDownList({\n        ...addDropDownList,\n        itemNameList: data.objList.itemList,\n        descriptionList: data.objList.descList,\n      });\n      setSelectedDropDown({ ...selectedDropDown, group_id: newValue });\n    });\n  };\n\n  const getFilterDescription = (event, newValue) => {\n    CommonController.commonApiCallFilter(\"ItemGroup/DescriptionDDLList\", {\n      category_id: selectedDropDown.category_id.id,\n      group_id: selectedDropDown.group_id.id,\n      item_id: newValue.id,\n    }).then((data) => {\n      setAddDropDownList({\n        ...addDropDownList,\n        descriptionList: data.mList.descList,\n      });\n      setSelectedDropDown({ ...selectedDropDown, item_id: newValue });\n    });\n  };\n\n  const getFilterValues = (event, newValue) => {\n    CommonController.commonApiCallFilter(\"itemGroup/MlfbLpListPriceObj\", {\n      category_id: selectedDropDown.category_id.id,\n      group_id: selectedDropDown.group_id.id,\n      item_id: selectedDropDown.item_id.id,\n      description: newValue.hasOwnProperty(\"description\")\n        ? newValue.description\n        : newValue.value,\n    }).then((data) => {\n      setSelectedDropDown({\n        ...selectedDropDown,\n        description: newValue,\n        mlfb_no: data.mList.mlfb_no,\n        lp_ref: data.mList.lp_ref,\n        list_price: data.mList.list_price,\n      });\n    });\n  };\n\n  const onItemAdd = () => {\n    let selected = { ...selectedDropDown };\n    selected.amount = selected.qty * selected.list_price;\n    setAddedItemList([...addedItemList, selected]);\n    setShowItemList(false);\n    setSelectedDropDown(selectedValues);\n  };\n\n  const handleFormData = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const handleFormDataList = (name, value) => {\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const getItemById = (id, list, key) => {\n    const item = list.filter((x) => x[key] === id);\n\n    return item.length > 0 ? item[0] : null;\n  };\n\n  const onAddItemInsert = () => {\n    setLoading(true);\n    let tempData = { ...formData };\n    let arr = [];\n    addedItemList.forEach((element) => {\n      let obj = {\n        category_id: element.category_id.id,\n        group_id: element.group_id.id,\n        item_id: element.item_id.id,\n        description: element.description.value,\n        mlfb_no: element.mlfb_no,\n        lp_ref: element.lp_ref,\n        list_price: element.list_price,\n        qty: element.qty,\n        amount: element.amount,\n      };\n      arr.push(obj);\n    });\n    tempData.productQtyItem = arr;\n    CommonController.commonApiCallFilter(\n      \"ItemGroup/ItemGroupMasterInsert\",\n      tempData\n    ).then((data) => {\n      if (data.valid) {\n        showSuccessToast(data.msg);\n        setLoading(false);\n      }\n    });\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      {dataLoading && <Loader />}\n      <div className=\"row mb-5\">\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            label=\"Product ID\"\n            disabled\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            name=\"mlfb_no\"\n            onChange={handleFormData}\n            value={formData.mlfb_no}\n            label=\"MLFB No.\"\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.categoryNameList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            value={getItemById(\n              formData.category_id,\n              dropdownList.categoryNameList,\n              \"id\"\n            )}\n            onChange={(event, value) =>\n              handleFormDataList(\"category_id\", value.id)\n            }\n            fullWidth\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Category Name\" />\n            )}\n          />\n        </div>\n      </div>\n      <div className=\"row mb-5\">\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.uomList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            fullWidth\n            value={getItemById(formData.uom_id, dropdownList.uomList, \"id\")}\n            onChange={(event, value) => handleFormDataList(\"uom_id\", value.id)}\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"UOM\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.groupNameList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            fullWidth\n            value={getItemById(\n              formData.p_group_id,\n              dropdownList.groupNameList,\n              \"id\"\n            )}\n            onChange={(event, value) =>\n              handleFormDataList(\"p_group_id\", value.id)\n            }\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Group Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            name=\"list_price\"\n            value={formData.list_price}\n            onChange={handleFormData}\n            label=\"List Price\"\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.itemNameList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            fullWidth\n            value={getItemById(\n              formData.item_id,\n              dropdownList.itemNameList,\n              \"id\"\n            )}\n            onChange={(event, value) => handleFormDataList(\"item_id\", value.id)}\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Item Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            value={formData.lp_ref}\n            label=\"LP Reference\"\n            name=\"lp_ref\"\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            multiline\n            value={formData.description}\n            name=\"description\"\n            onChange={handleFormData}\n            label=\"Description\"\n          />\n        </div>\n      </div>\n      {!showItemList && (\n        <div className=\"my-4 text-right\">\n          <Button\n            variant=\"contained\"\n            className=\"mr-2\"\n            color=\"primary\"\n            disableElevation\n            onClick={() => setShowItemList(true)}\n          >\n            Add New Item\n          </Button>\n        </div>\n      )}\n      <TableContainer className=\"mt-4\" component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Category</StyledTableCell>\n              <StyledTableCell>Group </StyledTableCell>\n              <StyledTableCell>Item</StyledTableCell>\n              <StyledTableCell>Description</StyledTableCell>\n              <StyledTableCell>MLFB No</StyledTableCell>\n              <StyledTableCell>LP Ref.</StyledTableCell>\n              <StyledTableCell>Qty</StyledTableCell>\n              <StyledTableCell>List Price</StyledTableCell>\n              <StyledTableCell>Amount</StyledTableCell>\n              <StyledTableCell>Actions</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {addedItemList.length > 0 ? (\n              addedItemList.map((item, index) => {\n                return (\n                  <TableRow key={item.category_id.id}>\n                    {\" \"}\n                    <TableCell>{item.category_id.value}</TableCell>\n                    <TableCell>{item.group_id.value}</TableCell>\n                    <TableCell>{item.item_id.value}</TableCell>\n                    <TableCell>\n                      {item.description.hasOwnProperty(\"description\")\n                        ? item.description.description\n                        : item.description.value}\n                    </TableCell>\n                    <TableCell>{item.mlfb_no}</TableCell>\n                    <TableCell>{item.lp_ref}</TableCell>\n                    <TableCell>{item.qty}</TableCell>\n                    <TableCell>{item.list_price}</TableCell>\n                    <TableCell>{item.amount}</TableCell>\n                    <TableCell>\n                      {\" \"}\n                      <ActionButtons\n                        onEdit={() => {\n                          setSelectedDropDown(addedItemList[index]);\n                          setShowItemList(true);\n                        }}\n                        onDelete={() => onItemRemove(index)}\n                      />\n                    </TableCell>\n                  </TableRow>\n                );\n              })\n            ) : (\n              <TableRow>\n                <TableCell colSpan={12} className=\"text-center\">\n                  No Items\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {showItemList && (\n        <Card className=\"mt-4\">\n          <CardContent>\n            <div className=\"row\">\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.category_id}\n                  options={addDropDownList.categoryNameList}\n                  size=\"small\"\n                  getOptionLabel={(option) => option.value}\n                  fullWidth\n                  onChange={getFilterGroup}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"outlined\"\n                      label=\"Category\"\n                    />\n                  )}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.group_id}\n                  getOptionLabel={(option) => option.value}\n                  options={addDropDownList.groupNameList}\n                  size=\"small\"\n                  onChange={getFilterItems}\n                  fullWidth\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Group\" />\n                  )}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.item_id}\n                  options={addDropDownList.itemNameList}\n                  getOptionLabel={(option) => option.value}\n                  onChange={getFilterDescription}\n                  size=\"small\"\n                  fullWidth\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Item\" />\n                  )}\n                />\n              </div>\n\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.description}\n                  options={addDropDownList.descriptionList}\n                  getOptionLabel={(option) =>\n                    option.hasOwnProperty(\"description\")\n                      ? option.description\n                      : option.value\n                  }\n                  size=\"small\"\n                  fullWidth\n                  onChange={getFilterValues}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"outlined\"\n                      label=\"Description\"\n                    />\n                  )}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  disabled\n                  label=\"MLFB\"\n                  fullWidth\n                  value={selectedDropDown?.mlfb_no}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  disabled\n                  label=\"LP Ref.\"\n                  fullWidth\n                  value={selectedDropDown?.lp_ref}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  label=\"Qty\"\n                  value={selectedDropDown.qty}\n                  fullWidth\n                  onChange={(e) =>\n                    setSelectedDropDown({\n                      ...selectedDropDown,\n                      qty: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  label=\"List Price\"\n                  fullWidth\n                  value={selectedDropDown?.list_price}\n                  onChange={(e) =>\n                    setSelectedDropDown({\n                      ...selectedDropDown,\n                      list_price: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  disabled\n                  label=\"Amount\"\n                  fullWidth\n                  value={\n                    selectedDropDown.qty !== \"\"\n                      ? selectedDropDown.qty * selectedDropDown.list_price\n                      : \"\"\n                  }\n                />\n              </div>\n              <div className=\"col-md-12 mb-4 text-right\">\n                <Button\n                  variant=\"contained\"\n                  className=\"mr-2\"\n                  color=\"primary\"\n                  disableElevation\n                  onClick={onItemAdd}\n                >\n                  Submit\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  className=\"mr-2\"\n                  color=\"primary\"\n                  disableElevation\n                  onClick={() => {\n                    setShowItemList(false);\n                    setSelectedDropDown(selectedValues);\n                  }}\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {buttonLoader(loading, \"Submit\", onAddItemInsert, \"primary\")}\n    </div>\n  );\n};\n\nexport default AddItemGroupMaster;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\browse.js",["1517","1518","1519"],"import { TextField } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch} from \"react-redux\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\r\nimport { Loader } from \"../../../components/loader\";\r\nimport {\r\n  materialCodeEditId,\r\n  searchMaterialCodeData,\r\n} from \"../../../_redux/actions/masters/materialcode.action\";\r\nimport { MaterialCodeMasterController } from \"../../../_redux/controller/Masters/materialcode.controller\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst MaterialCodeBrowse = ({ onEditMaterial }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const user_id = {\r\n    user_id: localStorage.getItem(\"userId\"),\r\n  };\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 15,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [filter, setFilter] = useState({\r\n    fromDate: null,\r\n    toDate: null,\r\n    user_id: localStorage.getItem(\"userId\"),\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const handleDateChange = (type, date) => {\r\n    setFilter({ ...filter, [type]: date });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, filter]);\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"MaterialCode/BrowseMaterialCode\",\r\n      params,\r\n      filter\r\n    )\r\n      .then((data) => {\r\n        setBrowseListData(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param });\r\n  };\r\n\r\n  const handleEditMaterial = (id) => {\r\n    dispatch(materialCodeEditId({ tran_id: id }));\r\n    onEditMaterial();\r\n  };\r\n\r\n  const deleteMaterialData = (id = null) => {\r\n    if (id) {\r\n      setLoading(true);\r\n      MaterialCodeMasterController.deleteMaterialCode({ tran_id: id }).then(\r\n        (data) => {\r\n          if (data.valid) {\r\n            showSuccessToast(\"Deleted Successfully\");\r\n            dispatch(searchMaterialCodeData(user_id, params));\r\n          } else {\r\n            showErrorToast(\"Something went wrong\");\r\n          }\r\n          setTimeout(() => {\r\n            setLoading(false);\r\n          }, 1000);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <DatePicker\r\n              label=\"From Date\"\r\n              value={filter.fromDate}\r\n              format=\"dd/MM/yyyy\"\r\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\r\n              animateYearScrolling\r\n              inputVariant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <DatePicker\r\n              label=\"To Date\"\r\n              value={filter.toDate}\r\n              onChange={(date) => handleDateChange(\"toDate\", date)}\r\n              animateYearScrolling\r\n              inputVariant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 500, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"customer\",\r\n              headerName: \"Customer\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"add_by\",\r\n              headerName: \"Add By\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEditMaterial(params.row.tran_id)}\r\n                  onDelete={() => deleteMaterialData(params.row.tran_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[15, 25, 50, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MaterialCodeBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\addMaterialCode.js",["1520","1521","1522","1523"],"import {\r\n  TextField,\r\n  Button,\r\n  Divider,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\r\nimport { Loader } from \"../../../components/loader\";\r\nimport { TablePicker } from \"../../../components/table-picker\";\r\n// import { TablePicker } from \"../../../components/table-picker\";\r\nimport { searchPartyName } from \"../../../_redux/actions/masters/materialcode.action\";\r\nimport { MaterialCodeMasterController } from \"../../../_redux/controller/Masters/materialcode.controller\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#1280cf\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst userId = localStorage.getItem(\"userId\");\r\n\r\nconst AddMaterialCode = ({ onCancel }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const partyNameListResponse = useSelector(\r\n    (state) => state.MaterialCodeMaster.partyNameList\r\n  );\r\n  const selectedMaterialCodeId = useSelector(\r\n    (state) => state.MaterialCodeMaster.selectedMaterialId\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [partyNameList, setPartyNameList] = useState([]);\r\n  const [selectedParty, setSelectedParty] = useState(null);\r\n  const [selectedCustomerList, setSelectedCustomerList] = useState([]);\r\n  const [showPickCustomer, setPickCustomer] = useState(false);\r\n  const [showPickItems, setPickItems] = useState(false);\r\n  const [selectedItemsList, setSelectedItemsList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(partyNameListResponse)) {\r\n      setPartyNameList(partyNameListResponse);\r\n    }\r\n  }, [partyNameListResponse]);\r\n\r\n  useEffect(() => {\r\n    if (selectedMaterialCodeId && selectedMaterialCodeId.tran_id) {\r\n      setLoading(true);\r\n      MaterialCodeMasterController.getMaterialDetailById(\r\n        selectedMaterialCodeId\r\n      ).then((data) => {\r\n        if (data.tran_id) {\r\n          if (partyNameList.length > 0) {\r\n            var indx = partyNameList.findIndex(\r\n              (x) => x.id === data.customer_id\r\n            );\r\n\r\n            if (indx > -1) {\r\n              setSelectedParty(partyNameList[indx]);\r\n            }\r\n\r\n            setSelectedCustomerList(\r\n              renameKeyObj(\"customer_id\", \"company_id\", data.codeCustomerItem)\r\n            );\r\n            setSelectedItemsList(data.codeProductItem);\r\n          }\r\n        }\r\n        setTimeout(() => {\r\n          setLoading(false);\r\n        }, 2000);\r\n      });\r\n    }\r\n  }, [selectedMaterialCodeId, partyNameList]);\r\n\r\n  const renameKeyObj = (from, to, arr) => {\r\n    var temp = arr;\r\n    var newArr = [];\r\n    for (const item of temp) {\r\n      item[to] = item[from];\r\n      delete item[from];\r\n      newArr.push(item);\r\n    }\r\n    return newArr;\r\n  };\r\n\r\n  // const newArrayOfObj = selectedCustomerList.map(\r\n  //   ({ company_id: customer_id, ...rest }) => ({\r\n  //     customer_id,\r\n  //     ...rest,\r\n  //   })\r\n  // );\r\n\r\n  // useEffect(() => {\r\n  //   setNewCustomerList(newArrayOfObj);\r\n  // }, [newArrayOfObj]);\r\n\r\n  const validateMaterialCode = () => {\r\n    var validateObj = selectedItemsList.filter((x) => {\r\n      if (!x.hasOwnProperty(\"material_code\") || x.material_code === \"\") {\r\n        return x;\r\n      } else if (!x.hasOwnProperty(\"unit_price\") || isNaN(x.unit_price)) {\r\n        return x;\r\n      }\r\n    });\r\n\r\n    return validateObj;\r\n  };\r\n\r\n  const insertMaterialCode = () => {\r\n    const validateList = validateMaterialCode();\r\n    if (selectedCustomerList.length < 1) {\r\n      showErrorToast(\"Pick Customer\");\r\n    } else if (selectedItemsList.length < 1) {\r\n      showErrorToast(\"Pick Item\");\r\n    } else if (validateList.length > 0) {\r\n      showErrorToast(\"Fill the required fields\");\r\n    } else {\r\n      setLoading(true);\r\n      var param = {\r\n        tran_id: selectedMaterialCodeId ? selectedMaterialCodeId.tran_id : \"0\",\r\n        customer_id: selectedParty.id,\r\n        user_id: userId,\r\n\r\n        codeCustomerItem: filterCustomerList(),\r\n        codeProductItem: filterProductList(),\r\n      };\r\n\r\n      MaterialCodeMasterController.insertMaterialCode(param).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(data.type);\r\n          onCancel();\r\n        } else {\r\n          showErrorToast(data.type);\r\n        }\r\n        setTimeout(() => {\r\n          setLoading(false);\r\n        }, 2000);\r\n      });\r\n    }\r\n  };\r\n\r\n  const filterProductList = () => {\r\n    var newList = [];\r\n    for (const item of selectedItemsList) {\r\n      var list = {\r\n        product_id: item.product_id,\r\n        material_code: item.material_code,\r\n        lp_ref: item.lp_ref,\r\n        list_price: item.list_price,\r\n        dis_per: item.dis_per,\r\n        unit_price: item.unit_price,\r\n      };\r\n      newList.push(list);\r\n    }\r\n\r\n    return newList;\r\n  };\r\n\r\n  const filterCustomerList = () => {\r\n    var newList = [];\r\n    for (const customer of selectedCustomerList) {\r\n      var list = {\r\n        customer_id: customer.company_id,\r\n      };\r\n      newList.push(list);\r\n    }\r\n\r\n    return newList;\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(searchPartyName());\r\n  }, []);\r\n\r\n  const customerListColumn = [\r\n    {\r\n      id: \"company_id\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"\",\r\n    },\r\n    {\r\n      id: \"company_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Company Name\",\r\n    },\r\n    {\r\n      id: \"short_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Short Name\",\r\n    },\r\n    {\r\n      id: \"group_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Group Name\",\r\n    },\r\n    { id: \"address\", numeric: false, disablePadding: false, label: \"Address\" },\r\n    { id: \"city\", numeric: false, disablePadding: false, label: \"City\" },\r\n    {\r\n      id: \"district\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"District\",\r\n    },\r\n    { id: \"state\", numeric: false, disablePadding: false, label: \"State\" },\r\n    { id: \"pin_code\", numeric: false, disablePadding: false, label: \"Pincode\" },\r\n  ];\r\n\r\n  const supplyItemsColumn = [\r\n    {\r\n      id: \"product_id\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"\",\r\n    },\r\n    {\r\n      id: \"category_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Category Name\",\r\n    },\r\n    {\r\n      id: \"p_group_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Group Name\",\r\n    },\r\n    {\r\n      id: \"item_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Item Name\",\r\n    },\r\n    {\r\n      id: \"description\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Description\",\r\n    },\r\n    { id: \"mlfb_no\", numeric: false, disablePadding: false, label: \"MLFB\" },\r\n    {\r\n      id: \"grade\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Grade\",\r\n    },\r\n    { id: \"lp_ref\", numeric: false, disablePadding: false, label: \"LP Ref\" },\r\n    {\r\n      id: \"list_price\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"List Price\",\r\n    },\r\n  ];\r\n\r\n  const selectedCustomerColumns = [\r\n    {\r\n      id: \"company_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Company Name\",\r\n    },\r\n    {\r\n      id: \"city\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"City\",\r\n    },\r\n  ];\r\n\r\n  const togglePickCustomer = () => setPickCustomer(!showPickCustomer);\r\n  const togglePickItems = () => setPickItems(!showPickItems);\r\n\r\n  const handleAddedCustomer = (row) => {\r\n    var tempselected = [...selectedCustomerList];\r\n    var tempIndex = tempselected.findIndex(\r\n      (x) => x.company_id === row.company_id\r\n    );\r\n    if (tempIndex > -1) {\r\n      tempselected.splice(tempIndex, 1);\r\n      setSelectedCustomerList(tempselected);\r\n    }\r\n  };\r\n\r\n  const handleAddedItems = (row) => {\r\n    var tempselected = [...selectedItemsList];\r\n    var tempIndex = tempselected.findIndex(\r\n      (x) => x.product_id === row.product_id\r\n    );\r\n    if (tempIndex > -1) {\r\n      tempselected.splice(tempIndex, 1);\r\n      setSelectedItemsList(tempselected);\r\n    }\r\n  };\r\n\r\n  const handlePickCustomer = (data) => {\r\n    setSelectedCustomerList(data);\r\n    setPickCustomer(false);\r\n  };\r\n\r\n  const handlePickItems = (data) => {\r\n    setSelectedItemsList(data);\r\n    setPickItems(false);\r\n  };\r\n\r\n  const handleProductChange = (event, id) => {\r\n    console.log(id);\r\n    var tempNewList = [...selectedItemsList];\r\n    var tempIndx = tempNewList.findIndex((x) => x.product_id === id);\r\n    if (tempIndx > -1) {\r\n      var element = tempNewList[tempIndx];\r\n      element[event.target.name] = event.target.value;\r\n      tempNewList[tempIndx] = element;\r\n    } else {\r\n      var element = {\r\n        product_id: id,\r\n      };\r\n      element[event.target.name] = event.target.value;\r\n      tempNewList.push(element);\r\n    }\r\n    setSelectedItemsList(tempNewList);\r\n  };\r\n  const calculateDisPer = (event, item) => {\r\n    var tempNewList = [...selectedItemsList];\r\n    var tempIndx = tempNewList.findIndex(\r\n      (x) => x.product_id === item.product_id\r\n    );\r\n    if (tempIndx > -1) {\r\n      var element = tempNewList[tempIndx];\r\n      element.unit_price = parseInt(event.target.value);\r\n      element.dis_per =\r\n        ((parseInt(item.list_price) - element.unit_price) /\r\n          parseInt(item.list_price)) *\r\n        100;\r\n    } else {\r\n      var element = {\r\n        product_id: item.product_id,\r\n      };\r\n      element.unit_price = parseInt(event.target.value);\r\n      element.dis_per =\r\n        ((parseInt(item.list_price) - element.unit_price) /\r\n          parseInt(item.list_price)) *\r\n        100;\r\n      tempNewList.push(element);\r\n    }\r\n    setSelectedItemsList(tempNewList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      <div className=\"container-fluid mt-4\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <Autocomplete\r\n              id=\"combo-box-demo\"\r\n              options={partyNameList}\r\n              onChange={(event, newValue) => setSelectedParty(newValue)}\r\n              getOptionLabel={(option) => option.value}\r\n              value={selectedParty}\r\n              fullWidth\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Party Name\"\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n          {!showPickCustomer && (\r\n            <div className=\"col-md-3 ml-auto text-right\">\r\n              <Button\r\n                color=\"primary\"\r\n                className=\"mr-2\"\r\n                disableElevation\r\n                variant=\"contained\"\r\n                onClick={togglePickCustomer}\r\n              >\r\n                Pick Customer\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={togglePickItems}\r\n                disableElevation\r\n                variant=\"contained\"\r\n              >\r\n                Pick Item\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"container-fluid\">\r\n        {showPickCustomer && (\r\n          <TablePicker\r\n            selectedItems={selectedCustomerList}\r\n            columns={customerListColumn}\r\n            url={\"MaterialCode/MaterialCodePickCustomer\"}\r\n            onSubmit={handlePickCustomer}\r\n            onPickerClose={togglePickCustomer}\r\n          />\r\n        )}\r\n\r\n        {showPickItems && (\r\n          <TablePicker\r\n            selectedItems={selectedItemsList}\r\n            columns={supplyItemsColumn}\r\n            url={\"MaterialCode/MaterialCodePickProduct\"}\r\n            onSubmit={handlePickItems}\r\n            onPickerClose={togglePickItems}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        <h4>Selected Customer List</h4>\r\n        <Divider />\r\n        <SimpleTable\r\n          columns={selectedCustomerColumns}\r\n          rows={selectedCustomerList}\r\n          onDelete={handleAddedCustomer}\r\n        />\r\n      </div>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        <h4>Selected Items List</h4>\r\n        <Divider />\r\n        <TableContainer className=\"mt-4\" component={Paper}>\r\n          <Table size=\"small\" sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell>MLFB</StyledTableCell>\r\n                <StyledTableCell>Item Name</StyledTableCell>\r\n                <StyledTableCell>Material Code</StyledTableCell>\r\n                <StyledTableCell>Lp Ref.</StyledTableCell>\r\n                <StyledTableCell>List Price</StyledTableCell>\r\n                <StyledTableCell>Dis. %</StyledTableCell>\r\n                <StyledTableCell>Unit Price</StyledTableCell>\r\n                <StyledTableCell>Actions</StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {/* {rows.lenght > 0 ? (\r\n                rows.map((row) => (\r\n                  <TableRow\r\n                    key={rows[columns[0].id]}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    {columns.map((col, index) => {\r\n                      if (columns[index + 1]) {\r\n                        return (\r\n                          <TableCell key={\"row_id\" + index} scope=\"row\">\r\n                            {row[columns[index + 1].id]}\r\n                          </TableCell>\r\n                        );\r\n                      }\r\n                    })}\r\n\r\n                    <TableCell scope=\"row\">\r\n                      <ActionButtons\r\n                        onPreview={onPreview}\r\n                        onEdit={onEdit}\r\n                        onDelete={onDelete}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableCell className=\"text-center\" colSpan={12}>\r\n                  No Records Found\r\n                </TableCell>\r\n              )} */}\r\n\r\n              {selectedItemsList.length > 0 ? (\r\n                selectedItemsList.map((item, index) => {\r\n                  return (\r\n                    <TableRow\r\n                      sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                      key={index}\r\n                    >\r\n                      <TableCell scope=\"row\">{item.mlfb_no}</TableCell>\r\n                      <TableCell scope=\"row\" style={{ width: 150 }}>\r\n                        {item.item_name}\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"material_code\"\r\n                          value={item.material_code}\r\n                          onChange={(event) =>\r\n                            handleProductChange(event, item.product_id)\r\n                          }\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"lp_ref\"\r\n                          value={item.lp_ref}\r\n                          disabled={true}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"list_price\"\r\n                          value={item.list_price}\r\n                          disabled={true}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"dis_per\"\r\n                          value={\r\n                            isNaN(item.dis_per)\r\n                              ? \"\"\r\n                              : parseFloat(item.dis_per).toFixed(2)\r\n                          }\r\n                          disabled={true}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"unit_price\"\r\n                          value={isNaN(item.unit_price) ? \"\" : item.unit_price}\r\n                          onChange={(event) => calculateDisPer(event, item)}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <ActionButtons\r\n                          onDelete={() => handleAddedItems(item)}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell colSpan={12} className=\"text-center\">\r\n                    No Records\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <div className=\"w-100 mt-3 text-right\">\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"mr-2\"\r\n            onClick={insertMaterialCode}\r\n            disableElevation\r\n            variant=\"contained\"\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={() => onCancel()}\r\n            disableElevation\r\n            variant=\"contained\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddMaterialCode;\r\n","F:\\React code\\diagnostic\\src\\pages\\DC\\browse.js",["1524","1525","1526","1527","1528","1529"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\n\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport DateFilter from \"../../components/dateFilter\";\n\nconst DCBrowseList = (props) => {\n  const history = useHistory();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"dc/browseDCPackage\",\n        params,\n        bodyParam,\n\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setBrowseListData(data.data);\n          setTotalRecords(data.recordsFiltered);\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    if (param !== 0) {\n      setParams({ ...params, pageNo: param });\n    }\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n\n  return (\n    <>\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n        </div>\n      </div>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"entry_no\",\n              headerName: \"Entry No.\",\n              width: 100,\n            },\n\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 120,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 400,\n            },\n\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 400,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DCBrowseList;\n","F:\\React code\\diagnostic\\src\\pages\\DC\\form.js",["1530","1531"],"import { Button, Fab } from \"@material-ui/core\";\nimport { Autocomplete, TextField } from \"@mui/material\";\n\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { SimpleTable } from \"../../components/basic-table\";\nimport {\n  debounce,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../components/common\";\nimport { TablePicker } from \"../../components/table-picker\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\n\nconst NewDCPackaging = () => {\n  const [selectedPackingList, setSelectedPackingList] = useState([]);\n  const [showPackagingList, setShowPackagingList] = useState(false);\n  const [itemListBody, setItemListBody] = useState(null);\n  const [showItemList, setShowItemList] = useState(null);\n  const [companyList, setCompanyList] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n\n  const [initialValues, setInitialValues] = useState({\n    date: moment().format(\"DD/MM/YYYY\"),\n    entry_no: \"\",\n    remarks: \"\",\n  });\n  const [boxList, setBoxList] = useState([\n    {\n      items: [],\n    },\n  ]);\n\n  useEffect(() => {\n    getEntryNo();\n  }, []);\n  useEffect(() => {\n    setItemListBody({\n      dcList: selectedPackingList.map((item) => ({ id: item.tran_id })),\n      itemList: [],\n    });\n  }, [selectedPackingList]);\n\n  useEffect(() => {\n    if (boxList.length > 1) {\n      let iList = [];\n      boxList.forEach((x) => {\n        iList.push.apply(iList, x.items);\n      });\n\n      setItemListBody({\n        dcList: selectedPackingList.map((item) => ({ id: item.tran_id })),\n        itemList: iList,\n      });\n    }\n  }, [boxList]);\n\n  const togglePackagingList = () => setShowPackagingList(!showPackagingList);\n  const toggleItemList = (index) => setShowItemList(index);\n\n  const handlePackagingList = (data) => {\n    setSelectedPackingList(data);\n    togglePackagingList();\n  };\n\n  const handleIemList = (data, index) => {\n    let tempBox = [...boxList];\n    tempBox[index].items = data;\n    setBoxList(tempBox);\n    toggleItemList(null);\n  };\n\n  const removeBox = (index) => {\n    setBoxList(boxList.filter((item, _) => _ !== index));\n  };\n\n  const addBox = () => {\n    setBoxList([\n      ...boxList,\n      {\n        items: [],\n      },\n    ]);\n  };\n\n  const itemListColumn = [\n    {\n      id: \"tran_id\",\n      numeric: false,\n      disablePadding: true,\n      label: \"ID\",\n    },\n    {\n      id: \"mlfb_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"MLFB No.\",\n    },\n    {\n      id: \"dc_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"DC No.\",\n    },\n    {\n      id: \"item_name\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Item Name\",\n    },\n    {\n      id: \"description\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Description\",\n    },\n\n    {\n      id: \"qty\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Quantity\",\n    },\n    {\n      id: \"serial_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Serial No.\",\n    },\n  ];\n\n  const packagingListColumn = [\n    {\n      id: \"tran_id\",\n      numeric: false,\n      disablePadding: true,\n      label: \"ID\",\n    },\n    {\n      id: \"date\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Date\",\n      dateFormat: true,\n    },\n    {\n      id: \"dc_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"DC No.\",\n    },\n    {\n      id: \"Company\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Company\",\n    },\n    {\n      id: \"Contact\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Contact\",\n    },\n    {\n      id: \"so_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"SO No.\",\n    },\n    {\n      id: \"dispatch_through\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Dispatch Through\",\n    },\n    {\n      id: \"Destination\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Destination\",\n    },\n    {\n      id: \"datetime\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Datetime\",\n      dateFormat: true,\n    },\n    {\n      id: \"status\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Status\",\n    },\n    {\n      id: \"comments\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Comments\",\n    },\n    {\n      id: \"remarks\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Remarks\",\n      flex: 1,\n    },\n    {\n      id: \"di_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"DI No.\",\n    },\n  ];\n\n  const getCompanyList = async (search) => {\n    try {\n      let response = await CommonController.commonApiCallFilter(\n        \"dc/pickCompany\",\n        { search: search },\n        \"get\",\n        \"node\"\n      );\n\n      if (response.status === 200) {\n        setCompanyList(response.result);\n      } else {\n        showErrorToast(response.message);\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const deletePickItem = (item, index) => {\n    let tempBoxList = [...boxList];\n    tempBoxList[index].items = tempBoxList[index].items.filter(\n      (x) => x.tran_id !== item.tran_id\n    );\n\n    setBoxList(tempBoxList);\n  };\n\n  const getEntryNo = async () => {\n    try {\n      let response = await CommonController.commonApiCallFilter(\n        \"dc/generateDCNo\",\n        {},\n        \"get\",\n        \"node\"\n      );\n\n      if (response.status === 200) {\n        setInitialValues({ ...initialValues, entry_no: response.data });\n      } else {\n        showErrorToast(response.message);\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const submitDC = async () => {\n    try {\n      if (initialValues.remarks === \"\") {\n        showErrorToast(\"Please enter remarks\");\n      } else if (boxList.filter((x) => x.items.length < 1).length > 0) {\n        showErrorToast(\"Please choose items for box\");\n      } else if (selectedPackingList.length < 1) {\n        showErrorToast(\"Please choose dc packaging\");\n      } else {\n        const body = {\n          tran_id: \"0\",\n          date: initialValues.date,\n          entry_no: initialValues.entry_no,\n          company_id: selectedCompany.company_id,\n          remarks: initialValues.remarks,\n          boxList: boxList,\n          user_id: localStorage.getItem(\"userId\"),\n        };\n        let response = await CommonController.commonApiCallFilter(\n          \"dc/insertDc\",\n          body,\n          \"post\",\n          \"node\"\n        );\n\n        if (response.status === 200) {\n          showSuccessToast(response.message);\n          window.location.reload();\n        } else {\n          showErrorToast(response.message);\n        }\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      <div className=\"row\">\n        <div className=\"entry-details d-flex col-md-6\">\n          <div className=\"mr-3\">\n            <h5>Date</h5>\n            <TextField\n              value={initialValues.date}\n              fullWidth\n              label=\"\"\n              variant=\"outlined\"\n              size=\"small\"\n              disabled\n            />\n          </div>\n          <div className=\"mr-3\">\n            <h5>Entry No.</h5>{\" \"}\n            <TextField\n              value={initialValues.entry_no}\n              fullWidth\n              label=\"\"\n              variant=\"outlined\"\n              size=\"small\"\n              disabled\n            />\n          </div>\n          <div>\n            <h5>Remarks</h5>\n            <TextField\n              label=\"Remarks\"\n              fullWidth\n              value={initialValues.remarks}\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"remarks\"\n              onChange={(e) =>\n                setInitialValues({ ...initialValues, remarks: e.target.value })\n              }\n            />\n          </div>\n        </div>\n        <div className=\"col-md-4  ml-auto \">\n          <h5>Pick Company</h5>\n          <div className=\"d-flex align-items-center\">\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={companyList}\n              fullWidth\n              size=\"small\"\n              getOptionLabel={(option) => option.company_name}\n              value={selectedCompany}\n              onChange={(e, value) => setSelectedCompany(value)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  onInput={(e) => {\n                    debounce(getCompanyList(e.target.value, 200));\n                  }}\n                  label=\"\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n            {!showPackagingList && selectedCompany && (\n              <Button\n                color=\"primary\"\n                className=\"mx-3 w-25\"\n                disableElevation\n                variant=\"contained\"\n                onClick={togglePackagingList}\n              >\n                Pick DC\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n      <hr />\n      {showPackagingList && (\n        <TablePicker\n          selectedItems={selectedPackingList}\n          columns={packagingListColumn}\n          url={\"dc/pickDC\"}\n          isNode=\"node\"\n          apiBody={{ company_id: selectedCompany?.company_id }}\n          apiType=\"post\"\n          onPickerClose={togglePackagingList}\n          onSubmit={handlePackagingList}\n        />\n      )}\n\n      {selectedPackingList.length > 0 && (\n        <SimpleTable\n          columns={packagingListColumn}\n          rows={selectedPackingList}\n          // onDelete={handleAddedCustomer}\n        />\n      )}\n\n      {itemListBody &&\n        itemListBody.dcList.length > 0 &&\n        boxList.map((box, index) => {\n          return (\n            <div className=\"box-list mt-5 pt-5\" key={index}>\n              <div className=\"d-flex\">\n                <h2 className=\"box-header\">Box no. {index + 1}</h2>\n                <div className=\" ml-auto\">\n                  {showItemList !== index && (\n                    <Button\n                      color=\"primary\"\n                      className=\"mr-2\"\n                      disableElevation\n                      variant=\"contained\"\n                      onClick={() => toggleItemList(index)}\n                    >\n                      Pick Item\n                    </Button>\n                  )}\n\n                  <Button\n                    color=\"primary\"\n                    className=\"mr-2 ml-auto\"\n                    disableElevation\n                    variant=\"contained\"\n                    onClick={() => removeBox(index)}\n                  >\n                    Remove Box\n                  </Button>\n                </div>\n              </div>\n              <hr />\n              {showItemList === index && (\n                <TablePicker\n                  selectedItems={box.items}\n                  columns={itemListColumn}\n                  url={\"dc/pickDCItem\"}\n                  isNode=\"node\"\n                  apiBody={itemListBody}\n                  apiType=\"post\"\n                  onPickerClose={() => toggleItemList(null)}\n                  onSubmit={(data) => handleIemList(data, index)}\n                />\n              )}\n              {box.items.length > 0 && showItemList !== index && (\n                <SimpleTable\n                  columns={itemListColumn}\n                  rows={box.items}\n                  onDelete={(item) => deletePickItem(item, index)}\n                />\n              )}\n            </div>\n          );\n        })}\n\n      {selectedPackingList.length > 0 && (\n        <div className=\"float-action-btn\">\n          <Fab\n            variant=\"extended\"\n            onClick={addBox}\n            size=\"medium\"\n            color=\"primary\"\n            aria-label=\"add\"\n          >\n            <AddIcon />\n            Add Box\n          </Fab>\n        </div>\n      )}\n      <hr />\n      <div className=\"w-100 mt-3 text-right\">\n        <Button\n          color=\"primary\"\n          className=\"mr-2\"\n          disableElevation\n          variant=\"contained\"\n          onClick={submitDC}\n        >\n          Save\n        </Button>\n        <Button color=\"primary\" disableElevation variant=\"contained\">\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default NewDCPackaging;\n","F:\\React code\\diagnostic\\src\\components\\table-picker.js",["1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543"],"import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { makeStyles, Button, withStyles, Radio } from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { CommonController } from \"../_redux/controller/common.controller\";\nimport { useState } from \"react\";\nimport moment from \"moment\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#1280cf\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nfunction EnhancedTableHead(props) {\n  const {\n    column,\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected = 0,\n    rowCount,\n    onRequestSort,\n  } = props;\n\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\" style={{ width: 100 }}></TableCell>\n\n        {column.map((headCell, j) => {\n          if (j < column.length && column[j + 1]) {\n            return (\n              <TableCell\n                key={column[j + 1].id}\n                align={column[j + 1].numeric ? \"right\" : \"left\"}\n                //    padding={column[j + 1].disablePadding ? \"none\" : \"normal\"}\n                sortDirection={orderBy === column[j + 1].id ? order : false}\n              >\n                <TableSortLabel\n                  active={orderBy === column[j + 1].id}\n                  direction={orderBy === column[j + 1].id ? order : \"asc\"}\n                  onClick={createSortHandler(column[j + 1].id)}\n                >\n                  {column[j + 1].label}\n                  {orderBy === column[j + 1].id ? (\n                    <span className={classes.visuallyHidden}>\n                      {order === \"desc\"\n                        ? \"sorted descending\"\n                        : \"sorted ascending\"}\n                    </span>\n                  ) : null}\n                </TableSortLabel>\n              </TableCell>\n            );\n          }\n        })}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginTop: 30,\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport const TablePicker = ({\n  columns,\n  url,\n  onSubmit,\n  onPickerClose,\n  selectedItems,\n  type,\n  isNode = \"\",\n  apiType = \"\",\n  apiBody = null,\n}) => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [selected, setSelected] = React.useState(\n    selectedItems && Array.isArray(selectedItems)\n      ? selectedItems.length > 0\n        ? []\n        : selectedItems\n      : selectedItems\n  );\n  const [records, setRecords] = useState([]);\n  const [rowCount, setRowCount] = useState(0);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  useEffect(() => {\n    setSelected(selectedItems);\n  }, [selectedItems]);\n\n  useEffect(async () => {\n    setLoading(true);\n\n    if (apiBody) {\n      await CommonController.commonApiCall(url, params, apiBody, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    } else {\n      await CommonController.tablePickerController(url, params, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(async () => {\n    setLoading(true);\n    if (apiBody) {\n      await CommonController.commonApiCall(url, params, apiBody, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    } else {\n      await CommonController.tablePickerController(url, params, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    }\n    setLoading(false);\n  }, [params]);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc =\n      params.sort_order !== \"\" && params.sort_order === \"asc\" ? \"desc\" : \"asc\";\n    setParams({ ...params, sort_order: isAsc, sort_column: property });\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = records.map((n) => n);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, row) => {\n    if (Array.isArray(selected)) {\n      var tempselected = [...selected];\n      const selectedIndex = tempselected.findIndex(\n        (x) => x[columns[0].id] === row[columns[0].id]\n      );\n      \n      if (selectedIndex === -1) {\n        tempselected.push(row);\n      } else {\n        tempselected.splice(selectedIndex, 1);\n      }\n\n      setSelected(tempselected);\n    }\n  };\n\n  const handleRadioClick = (event, row) => {\n    if (!Array.isArray(selected)) {\n      setSelected(row);\n    }\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setParams({ ...params, pageNo: newPage });\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setParams({ ...params, pageSize: parseInt(event.target.value, 10) });\n  };\n\n  const isSelected = (id) => {\n    if (Array.isArray(selected)) {\n      return selected.findIndex((x) => x[columns[0].id] === id) !== -1;\n    } else {\n      return selected && selected[columns[0].id] === id;\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={\"small\"}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              column={columns}\n              numSelected={\n                selected ? (Array.isArray(selected) ? selected.length : 1) : 0\n              }\n              order={params.sort_order}\n              orderBy={params.sort_column}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={params.pageSize}\n            />\n            <TableBody>\n              {loading ? (\n                <TableRow>\n                  <TableCell colSpan={12} className=\"text-center\">\n                    Please wait\n                  </TableCell>\n                </TableRow>\n              ) : records.length > 0 ? (\n                records.map((row, index) => {\n                  if (index <= records.length) {\n                    const isItemSelected = isSelected(row[columns[0].id]);\n                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                    return (\n                      <TableRow key={row[columns[0].id]}>\n                        <TableCell padding=\"checkbox\">\n                          {type && type == \"single\" ? (\n                            <Radio\n                              color=\"primary\"\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(event) => handleRadioClick(event, row)}\n                            />\n                          ) : (\n                            <Checkbox\n                              color=\"primary\"\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(event) => handleClick(event, row)}\n                            />\n                          )}\n                        </TableCell>\n                        {columns.map((col, colIndex) => {\n                          if (columns[colIndex + 1]) {\n                            return (\n                              <TableCell\n                                style={{ whiteSpace: \"nowrap\" }}\n                                key={colIndex + 2}\n                                align=\"left\"\n                              >\n                                {columns[colIndex + 1].dateFormat\n                                  ? moment(\n                                      row[columns[colIndex + 1].id]\n                                    ).format(\"DD/MM/YYYY\")\n                                  : row[columns[colIndex + 1].id]}\n                              </TableCell>\n                            );\n                          }\n                        })}\n                      </TableRow>\n                    );\n                  }\n                })\n              ) : (\n                <TableRow>\n                  <TableCell>No Data</TableCell>\n                </TableRow>\n              )}\n              {/* {records.length > 0 && (\n                <TableRow\n                  style={{ height: (false ? 33 : 53) * records.length }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )} */}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 15, 25]}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n          component=\"div\"\n          count={rowCount}\n          rowsPerPage={params.pageSize}\n          page={params.pageNo}\n          // onPageChange={}\n          // onRowsPerPageChange={}\n        />\n      </Paper>\n      <div className=\"container-fluid text-right\">\n        <Button\n          color=\"primary\"\n          className=\"mr-2\"\n          disableElevation\n          variant=\"contained\"\n          onClick={() => onSubmit(selected)}\n        >\n          Submit\n        </Button>\n        <Button\n          onClick={onPickerClose}\n          color=\"primary\"\n          disableElevation\n          variant=\"contained\"\n        >\n          Close\n        </Button>\n      </div>\n    </div>\n  );\n};\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\dc-add.js",["1544","1545","1546","1547","1548"],"import {\n  Button,\n  formatMs,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { getUserId, showErrorToast } from \"../../../components/common\";\nimport { TablePicker } from \"../../../components/table-picker\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst AddDeliveryChallan = ({ challanType }) => {\n  const [pickItemList, setPickItemList] = useState([]);\n  const [showDITable, setDITable] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    di_no: \"\",\n    dc_no: \"\",\n    so_no: \"\",\n    company_id: \"\",\n    company_name: \"\",\n    cperson_id: \"\",\n    di_id: \"\",\n    di_date: \"\",\n    so_date: null,\n    cperson_name: \"\",\n    ref_no: \"\",\n    ref_date: null,\n    dis_doc_no: \"\",\n    dis_doc_date: null,\n    dis_through: \"\",\n    destination: \"\",\n    vehicle_no: \"\",\n    type: \"\",\n    status: \"open\",\n    remarks: \"\",\n    noofbox: \"\",\n    scan_using: \"\",\n    dcDetail: [],\n  });\n\n  const [showDIList, setShowDIList] = useState(false);\n  const [selectedDI, setSelectedDI] = useState(null);\n\n  const toggleDIList = () => setShowDIList(!showDIList);\n\n  const handleChange = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const handleDateChange = (name, date) => {\n    setFormData({ ...formData, [name]: date });\n  };\n\n  const diListColumn = [\n    {\n      id: \"tran_id\",\n      numeric: false,\n      disablePadding: false,\n      label: \"\",\n    },\n    {\n      id: \"di_no\",\n      numeric: false,\n      disablePadding: false,\n      label: \"DI No\",\n    },\n    {\n      id: \"date\",\n      numeric: false,\n      disablePadding: false,\n      label: \"DI Date\",\n    },\n    {\n      id: \"company_name\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Party\",\n    },\n    {\n      id: \"cperson_name\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Contact\",\n    },\n    {\n      id: \"indent_no\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Indent No\",\n    },\n    {\n      id: \"so_no\",\n      numeric: false,\n      disablePadding: false,\n      label: \"SO No\",\n    },\n    {\n      id: \"so_date\",\n      numeric: false,\n      disablePadding: false,\n      label: \"SO Date\",\n    },\n    {\n      id: \"remarks\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Remarks\",\n    },\n  ];\n\n  const getDCNo = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/generateDc\",\n        {},\n        \"get\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setFormData({ ...formData, dc_no: data.data.dc_no });\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  useEffect(() => {\n    getDCNo();\n    // getPreviewDC(\"30490\");\n  }, []);\n\n  const handleSubmit = (data) => {\n    getItemDIList(data.tran_id);\n    setSelectedDI(data);\n    setFormData({\n      ...formData,\n      so_no: data.so_no,\n      cperson_name: data.cperson_name,\n      di_date: moment().format(\"MM/DD/YYYY\"),\n      company_name: data.company_name,\n      di_no: data.di_no,\n      company_id: data.company_id,\n      cperson_id: data.cperson_id,\n      di_id: data.tran_id,\n    });\n    toggleDIList();\n  };\n\n  const getItemDIList = async (id) => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/pickDIItem\",\n        { id: id },\n        \"post\", \n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setPickItemList(data.data);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const submitMain = async () => {\n    setLoading(true);\n    try {\n      let temp = { ...formData };\n      temp.dcDetail = pickItemList;\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/insertmain\",\n        temp,\n        \"post\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          getPreviewDC(data.data);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n  const getPreviewDC = async (id) => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/previewDC\",\n        { id: id },\n        \"post\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setFormData(data.data.dc_main[0]);\n          setPickItemList(data.data.dc_detail);\n          setDITable(true);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const updateItemById = async (obj) => {\n    try {\n      const request = {\n        tran_id: obj.tran_id,\n        box_no: obj.box_no,\n        mlfb_no: obj.mlfb_no,\n        material_code: obj.material_code,\n        serial_no: obj.serial_no,\n        user_id: getUserId(),\n      };\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/updateItemById\",\n        request,\n        \"post\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          console.log(data);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const {\n    dc_no,\n    so_no,\n    cperson_name,\n    so_date,\n    ref_date,\n    remarks,\n    scan_using,\n    noofbox,\n    destination,\n    dis_doc_date,\n    dis_doc_no,\n    dis_through,\n    vehicle_no,\n    ref_no,\n    type,\n    status,\n  } = formData;\n\n  const handleItemChange = (index, event) => {\n    let tempList = [...pickItemList];\n    tempList[index][event.target.name] = event.target.value;\n    setPickItemList(tempList);\n  };\n\n  const getNextElem = (row, input) => {\n    const nextElem = document.getElementById(\n      `row-input-${parseInt(input) == 3 ? parseInt(row) + 1 : row}-${\n        parseInt(input) > 2 ? \"1\" : parseInt(input) + 1\n      }`\n    );\n\n    return nextElem\n      ? nextElem.disabled\n        ? document.getElementById(\n            `row-input-${parseInt(input) == 3 ? parseInt(row) + 1 : row}-${\n              parseInt(input) > 2 ? \"1\" : parseInt(input) + 2\n            }`\n          )\n        : document.getElementById(\n            `row-input-${parseInt(input) == 3 ? parseInt(row) + 1 : row}-${\n              parseInt(input) > 2 ? \"1\" : parseInt(input) + 1\n            }`\n          )\n      : null;\n  };\n\n  const switchToInput = (event) => {\n    if (event.key === \"Enter\") {\n      const currentElemRow = event.target.id.split(\"-\")[2];\n      const currentElemInp = event.target.id.split(\"-\")[3];\n      if (currentElemRow) {\n        const elem = getNextElem(currentElemRow, currentElemInp);\n        if (elem) {\n          elem.focus();\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row mt-5\">\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"D.C. No.\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            value={dc_no}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Date\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={moment().format(\"MM/DD/YYYY\")}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"DI No.\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={formData.di_no}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Date\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={formData?.di_date}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n          <TextField\n            label=\"Party Name\"\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            disabled\n            value={formData.company_name}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Sales Order\"\n            fullWidth\n            onChange={handleChange}\n            value={so_no}\n            variant=\"outlined\"\n            name=\"so_no\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <DatePicker\n            label=\"Date\"\n            value={so_date}\n            format=\"dd/MM/yyyy\"\n            onChange={(date) => handleDateChange(\"so_date\", date)}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            autoOk\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n          <TextField\n            label=\"Contact Person\"\n            fullWidth\n            onChange={handleChange}\n            value={cperson_name}\n            name=\"cperson_name\"\n            variant=\"outlined\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Ref(PO) No.\"\n            fullWidth\n            variant=\"outlined\"\n            value={ref_no}\n            name={\"ref_no\"}\n            size=\"small\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <DatePicker\n            label=\"Date\"\n            value={ref_date}\n            format=\"dd/MM/yyyy\"\n            onChange={(date) => handleDateChange(\"ref_date\", date)}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            autoOk\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Type\"\n            value={type}\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            select\n            name=\"type\"\n            onChange={handleChange}\n          >\n            {\" \"}\n            <MenuItem value=\"Project\">Project</MenuItem>\n            <MenuItem value=\"Spare\">Spare</MenuItem>\n          </TextField>\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Status\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={status}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Dispatch Doc. No.\"\n            fullWidth\n            variant=\"outlined\"\n            value={dis_doc_no}\n            onChange={handleChange}\n            name=\"dis_doc_no\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <DatePicker\n            label=\"Date\"\n            value={dis_doc_date}\n            format=\"dd/MM/yyyy\"\n            onChange={(date) => handleDateChange(\"dis_doc_date\", date)}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            autoOk\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n          <TextField\n            label=\"Remarks\"\n            fullWidth\n            value={remarks}\n            name=\"remarks\"\n            variant=\"outlined\"\n            onChange={handleChange}\n            size=\"small\"\n            multiline\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Dispatch Through\"\n            fullWidth\n            value={dis_through}\n            variant=\"outlined\"\n            size=\"small\"\n            name=\"dis_through\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Destination\"\n            fullWidth\n            name=\"destination\"\n            onChange={handleChange}\n            value={destination}\n            variant=\"outlined\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n     \n        \n          <TextField\n            label=\"Scan Using\"\n            fullWidth\n            select\n            variant=\"outlined\"\n            size=\"small\"\n            name=\"scan_using\"\n            disabled={selectedDI}\n            onChange={handleChange}\n            value={scan_using}\n          >\n            <MenuItem value=\"MLFB NO\">MLFB NO</MenuItem>\n            <MenuItem value=\"MATERIAL CODE\">MATERIAL CODE</MenuItem>\n          </TextField>\n        </div> \n        \n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Vehicle No.\"\n            fullWidth\n            name=\"vehicle_no\"\n            variant=\"outlined\"\n            value={vehicle_no}\n            onChange={handleChange}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"No of Box\"\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            name=\"noofbox\"\n            value={noofbox}\n            onChange={handleChange}\n          />\n        </div>\n      </div>\n      <div className=\"diList-container\">\n        {!showDIList && (\n          <div className=\"text-right w-100 mb-5\">\n            <Button\n              color=\"primary\"\n              className=\"mr-2\"\n              disableElevation\n              variant=\"contained\"\n              onClick={toggleDIList}\n            >\n              Pick DI\n            </Button>\n            <Button\n              color=\"primary\"\n              className=\"mr-2\"\n              disableElevation\n              variant=\"contained\"\n              disabled={loading}\n              onClick={submitMain}\n            >\n              {loading ? \"Processing...\" : \" Save & Proceed\"}\n            </Button>\n          </div>\n        )}\n        {showDIList && (\n          <TablePicker\n            selectedItems={selectedDI}\n            columns={diListColumn}\n            url={\"logistics/dc/pickDI\"}\n            isNode=\"node\"\n            apiBody={{ user_id: getUserId(), sl_type: challanType }}\n            apiType=\"post\"\n            onPickerClose={toggleDIList}\n            type=\"single\"\n            onSubmit={handleSubmit}\n          />\n        )}\n\n        {showDITable && (\n          <div className=\"table-responsive mb-5 pb-5\">\n            <Paper>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>S.N.</TableCell>\n                    <TableCell>Box No</TableCell>\n                    <TableCell>MLFB No.</TableCell>\n                    <TableCell>Material Code</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell>Serial No.</TableCell>\n                    <TableCell align=\"right\">Quantity</TableCell>\n                    <TableCell align=\"right\">Rate</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {pickItemList.length > 0 &&\n                    pickItemList.map((item, index) => {\n                      return (\n                        <React.Fragment>\n                          <TableRow\n                            key={index}\n                            style={{\n                              backgroundColor: item.serial\n                                ? \"rgb(255 238 240)\"\n                                : \"#fff\",\n                            }}\n                          >\n                            <TableCell>{index + 1}</TableCell>\n                            <TableCell style={{ width: 100 }}>\n                              <input\n                                type=\"text\"\n                                name=\"box_no\"\n                                className=\"form-control\"\n                                onChange={(e) => handleItemChange(index, e)}\n                                // onKeyPress={(e) => {\n\n                                // }}\n                              />{\" \"}\n                            </TableCell>\n                            <TableCell>\n                              {item.serial_no !== null ? (\n                                <input\n                                  type=\"type\"\n                                  disabled={scan_using === \"MATERIAL CODE\"}\n                                  className=\"form-control switchInput\"\n                                  name=\"mlfb_no\"\n                                  onKeyPress={switchToInput}\n                                  id={`row-input-${index + 1}-1`}\n                                  onChange={(e) => handleItemChange(index, e)}\n                                />\n                              ) : (\n                                item.mlfb_no\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {\" \"}\n                              {item.serial_no !== null ? (\n                                <input\n                                  type=\"type\"\n                                  disabled={scan_using === \"MLFB NO\"}\n                                  className=\"form-control switchInput\"\n                                  id={`row-input-${index + 1}-2`}\n                                  name=\"material_code\"\n                                  onKeyPress={switchToInput}\n                                  onChange={(e) => handleItemChange(index, e)}\n                                />\n                              ) : (\n                                item.material_code\n                              )}\n                            </TableCell>\n                            <TableCell style={{ width: 200 }}>\n                              {item.description}\n                            </TableCell>\n                            <TableCell style={{ width: 200 }}>\n                              {\" \"}\n                              {item.serial_no !== null && (\n                                <input\n                                  type=\"type\"\n                                  className=\"form-control switchInput\"\n                                  name=\"serial_no\"\n                                  id={`row-input-${index + 1}-3`}\n                                  onKeyPress={(e) => {\n                                    switchToInput(e);\n                                    if (e.key === \"Enter\") {\n                                      updateItemById(pickItemList[index]);\n                                    }\n                                  }}\n                                  onChange={(e) => handleItemChange(index, e)}\n                                />\n                              )}\n                            </TableCell>\n                            <TableCell align=\"right\">{item.qty}</TableCell>\n                            <TableCell align=\"right\">{item.rate}</TableCell>\n                            <TableCell align=\"right\">{item.amount}</TableCell>\n                          </TableRow>\n                        </React.Fragment>\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </Paper>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddDeliveryChallan;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\other.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\general.js",[],"F:\\React code\\diagnostic\\src\\components\\basic-table.js",[],"F:\\React code\\diagnostic\\src\\pages\\Profile\\changePassword.js",["1549","1550","1551"],"import { Button, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../components/common\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\n\nconst ChangePassword = () => {\n  const [formData, setFormData] = useState({\n    oldpass: \"\",\n    newpass: \"\",\n    confpass: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n    errors: {},\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  const handleChange = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const validateForm = () => {\n    let errors = { ...formData.errors };\n    if (formData.oldpass == \"\") {\n      errors.oldpass = \"Please enter old password\";\n    } else {\n      delete errors.oldpass;\n    }\n    if (formData.newpass == \"\") {\n      errors.newpass = \"Please enter new password\";\n    } else {\n      delete errors.newpass;\n    }\n    if (formData.confpass == \"\") {\n      errors.confpass = \"Please enter confirm password\";\n    } else {\n      delete errors.confpass;\n    }\n    console.log(errors);\n    setFormData({ ...formData, errors: errors });\n    return Object.keys(errors).length !== 0;\n  };\n\n  const onSubmit = async () => {\n    try {\n      setLoading(true);\n      if (!validateForm()) {\n        await CommonController.commonApiCallFilter(\n          \"Profile/UpdateEmployeePassword\",\n          formData,\n          \"post\"\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Password changed successfully \");\n          } else {\n            showErrorToast(data.msg);\n          }\n        });\n      }\n      setLoading(false);\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  return (\n    <div className=\"card shadow\">\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              value={formData.oldpass}\n              name=\"oldpass\"\n              type=\"password\"\n              label=\"Old Password\"\n              onChange={handleChange}\n            />\n            {formData.errors && (\n              <p className=\"mb-0 text-danger\">{formData.errors.oldpass}</p>\n            )}\n          </div>\n          <div className=\"col-md-3\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              name=\"newpass\"\n              type=\"password\"\n              value={formData.newpass}\n              label=\"New Password\"\n              onChange={handleChange}\n            />\n            {formData.errors && (\n              <p className=\"mb-0 text-danger\">{formData.errors.newpass}</p>\n            )}\n          </div>\n          <div className=\"col-md-3\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              name=\"confpass\"\n              value={formData.confpass}\n              label=\"Conf. Password\"\n              onChange={handleChange}\n            />\n            {formData.errors && (\n              <p className=\"mb-0 text-danger\">{formData.errors.confpass}</p>\n            )}\n          </div>\n          <div className=\"col-md-12 mt-5\">\n            <Button\n              disable={loading}\n              variant=\"contained\"\n              onClick={onSubmit}\n              disableElevation\n              color=\"primary\"\n            >\n              {loading ? \"Processing...\" : \"Update Password\"}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChangePassword;\n","F:\\React code\\diagnostic\\src\\pages\\Profile\\attendance.js",["1552","1553","1554"],"import { DatePicker } from \"@material-ui/pickers\";\nimport { TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport moment from \"moment\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst AttendanceBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    from_date: new Date().setDate(new Date().getDate() - 1),\n    to_date: new Date(),\n    emp_id: \"1\",\n  });\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [bodyParam]);\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      let body = { ...bodyParam };\n      body.from_date = moment(bodyParam.from_date).format(\"DD-MM-yyyy\");\n      body.to_date = moment(bodyParam.to_date).format(\"DD-MM-yyyy\");\n      await CommonController.commonApiCall(\n        \"Attandance/EmpAttandanceBrowse\",\n        params,\n        body,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleDateChange = (name, date) => {\n    setBodyParam({ ...bodyParam, [name]: date });\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"Date\"\n                value={bodyParam.from_date}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"from_date\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"Date\"\n                value={bodyParam.to_date}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"to_date\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <TextField\n                fullWidth\n                id=\"outlined-basic\"\n                size=\"small\"\n                onKeyUp={handleParams}\n                name=\"filter_value\"\n                label=\"Search\"\n                variant=\"outlined\"\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"srno\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"date\",\n                headerName: \"Date\",\n                flex: 0.1,\n              },\n              {\n                field: \"emp_code\",\n                headerName: \"Emp Code\",\n                flex: 0.1,\n              },\n              {\n                field: \"emp_name\",\n                headerName: \"Emp Name\",\n                flex: 0.1,\n              },\n              {\n                field: \"in_time\",\n                headerName: \"In Time\",\n                flex: 0.1,\n              },\n              {\n                field: \"out_time\",\n                headerName: \"Out Time\",\n                flex: 0.1,\n              },\n              {\n                field: \"m_in_time\",\n                headerName: \"Req. In Time\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"m_out_time\",\n                headerName: \"Req. Out Time\",\n                flex: 0.1,\n              },\n              {\n                field: \"remarks\",\n                headerName: \"Remarks\",\n                flex: 0.1,\n              },\n            ]}\n            pagination\n            getRowId={(row) => row.srno}\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={browseListData}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AttendanceBrowse;\n","F:\\React code\\diagnostic\\src\\layouts\\Dashboard.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\index.js",["1555","1556","1557","1558","1559","1560","1561","1562"],"import React, { useState,useEffect } from \"react\";\r\nimport BrowseAccount from \"./browse\";\r\nimport AddAccountMaster from \"./form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getAccountMasterFiltersList, previewSelectedAccount } from \"../../../_redux/actions/masters/account.action\";\r\nimport { clearSelectedAccountId } from \"../../../_redux/actions/masters/all.action\";\r\nimport { TCSAccount } from \"./tcs\";\r\nimport { getBrowseUserRight } from \"../../../components/common\";\r\n\r\nconst AccountsMaster = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n  const [userRight, setuserRight] = useState({})\r\nconst thirdMenu=useSelector((state)=>state.common.userRightListThird)\r\n// console.log(thirdMenu)\r\n// console.log(getBrowseUserRight(thirdMenu.data)?.insert_right)\r\n  const handleActionClick = (id) => {\r\n    var param = {\r\n      company_id: id,\r\n    };\r\n    dispatch(previewSelectedAccount(param));\r\n    setSeletedIndex(1);\r\n  };\r\n\r\n  const handleIndex = (index) => {\r\n    dispatch(clearSelectedAccountId());\r\n    setSeletedIndex(index);\r\n  };\r\n  useEffect(()=>{\r\n    dispatch(getAccountMasterFiltersList());\r\n  },[]);\r\n  \r\n// useEffect(() => {\r\n// setuserRight(getBrowseUserRight(thirdMenu.data))\r\n// }, [thirdMenu])\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(0)}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n     {/* {userRight?.insert_right&& */}\r\n      <li className=\"nav-item\">\r\n      <a\r\n        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n        onClick={() => handleIndex(1)}\r\n      >\r\n        New Account\r\n      </a>\r\n    </li>\r\n     {/* }   */}\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 2 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(2)}\r\n          >\r\n            TCS\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 && (\r\n          <BrowseAccount\r\n            onPreview={() => setSeletedIndex(1)}\r\n            onEdit={() => setSeletedIndex(1)}\r\n            onActionClick={handleActionClick}\r\n            accountType={props.accountType}\r\n            browse_id={props.browse_id}\r\n          />\r\n        )}\r\n        {selectedIndex === 1 && <AddAccountMaster handleAddAccount={()=>setSeletedIndex(0)} />}\r\n        {selectedIndex === 2 && <TCSAccount accountType={props.accountType}/>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountsMaster;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\index.js",["1563","1564"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { clearSelectedGodownId } from \"../../../_redux/actions/masters/all.action\";\nimport AddGodown from \"./addEntry\";\n\nimport GodownBrowse from \"./browse\";\n// import AddMaterialCode from \"./addMaterialCode\";\n\n// import MaterialCodeBrowse from \"./browse\";\n\nconst GodownIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Godown\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <GodownBrowse onEdit={() => handleIndex(1)} />\n        ) : (\n          <AddGodown onClose={() => handleIndex(0)} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GodownIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\index.js",["1565","1566"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  clearSelectedEmployeeId,\n} from \"../../../_redux/actions/masters/all.action\";\nimport AddGodown from \"./addEntry\";\nimport EmployeeBrowse from \"./browse\";\n// import AddMaterialCode from \"./addMaterialCode\";\n\n// import MaterialCodeBrowse from \"./browse\";\n\nconst EmployeeIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    dispatch(clearSelectedEmployeeId());\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Employee\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <EmployeeBrowse onEdit={() => handleIndex(1)} />\n        ) : (\n          <AddGodown onClose={() => handleIndex(0)} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\index.js",["1567","1568"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { clearSelectedComboId } from \"../../../_redux/actions/masters/all.action\";\nimport AddComboMLFB from \"./addCombo\";\n// import AddMaterialCode from \"./addMaterialCode\";\nimport ComboMLFBBrowse from \"./browse\";\n// import MaterialCodeBrowse from \"./browse\";\n\nconst ComboMLFBIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedComboId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedComboId());\n              handleIndex(1);\n            }}\n          >\n            New Combo MLFB\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <ComboMLFBBrowse onEdit={() => handleIndex(1)} />\n        ) : (\n          <AddComboMLFB onClose={() => handleIndex(0)} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ComboMLFBIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\index.js",["1569","1570","1571"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesCostingBrowse from \"./browse\";\n\nconst SalesCostingIndex = () => {\n  const [selectedIndex, setSeletedIndex] = useState(0);\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Costing\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesCostingBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesCostingIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\browse.js",["1572","1573","1574","1575","1576","1577","1578","1579","1580","1581","1582","1583","1584"],"F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\form.js",["1585","1586","1587","1588","1589","1590"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\nimport ContactPerson from \"./contact_person\";\r\nimport GeneralInfo from \"./generalInfo\";\r\nimport AccountTNC from \"./tnc\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\r\nconst AddAccountMaster = ({handleAddAccount}) => {\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.accountId\r\n  );\r\n  console.log(selectedIdResponse)\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n  const [dropdownList, setdropdownList] = useState([])\r\n  const [formData, setFormData] = useState({\r\n    company_id:0,\r\n    company_name:\"\",  \r\n    short_name:\"\",\r\n    group_id :\"\", \r\n    group_name:\"\",\r\n    address1 :\"\",  \r\n    address2 :\"\",  \r\n    pin_id :\"\",  \r\n    pin_code:\"\",  \r\n    region_id :\"\",  \r\n    region_name:\"\",  \r\n    phone1:\"\",  \r\n    phone2:\"\",  \r\n    mobile:\"\",  \r\n    fax:\"\",  \r\n    email :\"\",  \r\n    website :\"\",  \r\n    rating_id:\"\",  \r\n    rating_name :\"\",  \r\n    // mark_engg :\"\",  \r\n    name:\"\",\r\n    se_id:\"\",  \r\n    Engg_name :\"\",  \r\n    // sim_enng\r\n    remarks:\"\" ,  \r\n    distance:\"\",  \r\n    credit_limit :null,  \r\n    credit_period:\"\",  \r\n    range:\"\",  \r\n    division:\"\",  \r\n    comm:\"\",  \r\n    ecc_no:\"\",  \r\n    ser_tax_no:\"\",  \r\n    pan_no:\"\",  \r\n    tin_no:\"\",  \r\n    cst_no:\"\",  \r\n    lst_no:\"\",  \r\n    pla_no:\"\",  \r\n    edit:\"\",  \r\n    hide:\"\",  \r\n    boarding_id:\"\",  \r\n    delivery_id:\"\",  \r\n    exciseduty_id:\"\",  \r\n    finance_id:\"\",  \r\n    freight_id:\"\",  \r\n    insurance_id :\"\",  \r\n    inspection_id :\"\",  \r\n    ld_id:\"\",  \r\n    loading_id:\"\",  \r\n    mode_of_dispatch_id:\"\",  \r\n    octroi_id:\"\",  \r\n    payment_id:\"\",  \r\n    pf_id:\"\",  \r\n    salestax_id:\"\",  \r\n    servicetax_id:\"\",  \r\n    validity_id:\"\",  \r\n    conveyance_id:\"\",  \r\n    travel_id:\"\",  \r\n    user_name: localStorage.getItem(\"userName\"),\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    account_type:\"\",\r\n    cpersonList: [],\r\n    partyList: [],\r\n  });\r\n  useEffect(() => {\r\n    CommonController.commonApiCallFilter(\r\n      \"master/dropdown_term_and_condition\",{},\"post\",\"node\"\r\n    ).then((data) => {\r\n      console.log(data)\r\n      const list = {\r\n        pfList: data.pf,\r\n        exciseDutyList: data.exciseDuty,\r\n        salesTaxList: data.saleTax,\r\n        freightList: data.freight,\r\n        insuranceList: data.insurance,\r\n        inspectionList: data.inspection,\r\n        modList: data.modeOfDispatch,\r\n        deliveryList: data.delivery,\r\n        octroiList: data.octroi,\r\n        servicetaxList: data.serviceTax,\r\n        travelChgrList: data.travel,\r\n        conveyanceList: data.conveyance,\r\n        loadingList: data.loading,\r\n        boardingList: data.boarding,\r\n        validityList: data.validity,\r\n        paymentList: data.payment,\r\n        financeList: data.finance,\r\n        ldList: data.ld,\r\n      };\r\n      setdropdownList(list);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\"Account/AccountMasterPreview\", {\r\n        company_id: selectedIdResponse,\r\n      }).then((data) => {\r\n        setFormData(data);\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n  const handleAutoChange = (key1, key2, value) => {\r\n    console.log(value[key1])\r\n    console.log(value)\r\n    console.log(key1)\r\n    console.log(key2)\r\n    let tempFormData = { ...formData };\r\n\r\n    if (key1.trim() != \"\") {\r\n      tempFormData[key1] = value[key1];\r\n    }\r\n\r\n    if (key2.trim() != \"\") {\r\n      tempFormData[key2] = value[key2]\r\n    }\r\n    setFormData(tempFormData);\r\n  };\r\n  const saveForm = () => {\r\n    let _formData = { ...formData };\r\n\r\n    if (selectedIdResponse) {\r\n      _formData.user_id = localStorage.getItem(\"userId\");\r\n      _formData.user_name = localStorage.getItem(\"userName\");\r\n    }\r\n\r\n    CommonController.commonApiCallFilter(\r\n      \"master/insert_account_master\",\r\n      _formData,\"post\",\"node\"\r\n    ).then((data) => {\r\n      if (data.status===200) {\r\n        handleAddAccount()\r\n        showSuccessToast(\r\n          `Account Details ${\r\n            selectedIdResponse ? \"updated\" : \"saved\"\r\n          } successfully`\r\n        );\r\n      }else {\r\n        showErrorToast(\"something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => setSeletedIndex(0)}\r\n          >\r\n            General Infomation\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => setSeletedIndex(1)}\r\n          >\r\n            Contact Person\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 2 ? \"active\" : \"\")}\r\n            onClick={() => setSeletedIndex(2)}\r\n          >\r\n            Terms & Conditions\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content pt-7\">\r\n        {selectedIndex === 0 && (\r\n          <GeneralInfo\r\n            formData={formData}\r\n            handleChange={handleChange}\r\n            handleAutoChange={handleAutoChange}\r\n          />\r\n        )}\r\n        {selectedIndex === 1 && (\r\n          <ContactPerson\r\n            formData={formData}\r\n            handleChange={handleChange}\r\n            handleAutoChange={handleAutoChange}\r\n            removeIndex={(data)=>setFormData({...formData,cpersonList:data})}\r\n            handleCPersonList={(arr) =>{\r\n              let cperson={...formData};\r\n              cperson.cpersonList.push(arr);\r\n              console.log(cperson);\r\n              setFormData(cperson);\r\n            }\r\n            }\r\n          />\r\n        )}\r\n\r\n        {selectedIndex === 2 && (\r\n          <AccountTNC formData={formData} handleChange={handleChange} list={dropdownList} />\r\n        )}\r\n      </div>\r\n      <div className=\"col-md-12 text-right\">\r\n        {selectedIndex !== 0 && (\r\n          <Button\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            onClick={() => setSeletedIndex(selectedIndex - 1)}\r\n            disableElevation\r\n          >\r\n            Back\r\n          </Button>\r\n        )}\r\n        {selectedIndex !== 2 && (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => setSeletedIndex(selectedIndex + 1)}\r\n            color=\"primary\"\r\n            className=\"mr-2\"\r\n            disableElevation\r\n          >\r\n            Next\r\n          </Button>\r\n        )}\r\n\r\n     {selectedIndex==2&&<Button\r\n          variant=\"contained\"\r\n          onClick={saveForm}\r\n          color=\"primary\"\r\n          disableElevation\r\n        >\r\n          Submit\r\n        </Button>\r\n        }   \r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddAccountMaster;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\addEntry.js",["1591","1592"],"import { TextField, Button } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  buttonLoader,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport useForceUpdate from \"use-force-update\";\nimport { useSelector } from \"react-redux\";\nconst AddGodown = ({ onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.godownId\n  );\n  const [validator, setValidator] = useState(new SimpleReactValidator());\n\n  const forceUpdate = useForceUpdate();\n\n  const [insertParams, setInsertParams] = useState({\n    godown_id: \"0\",\n    godown_name: \"\",\n    address: \"\",\n    user_id: \"\",\n  });\n\n  useEffect(() => {\n    if (selectedIdResponse) {\n      CommonController.commonApiCallFilter(\"Godown/GodownMasterPreview\", {\n        godown_id: selectedIdResponse,\n      }).then((data) => {\n        if (data.godown_id) {\n          setInsertParams({\n            ...insertParams,\n            godown_id: data.godown_id,\n            godown_name: data.godown_name,\n            address: data.address,\n          });\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    }\n  }, [selectedIdResponse]);\n\n  const insertCombo = async () => {\n    if (validator.allValid()) {\n      setLoading(true);\n      CommonController.commonApiCallFilter(\n        \"Godown/GodownMasterInsert\",\n        insertParams\n      ).then((data) => {\n        if (data.valid) {\n          showSuccessToast(\"Successfully Saved\");\n          setLoading(false);\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    } else {\n      validator.showMessages();\n      // rerender to show messages for the first time\n      // you can use the autoForceUpdate option to do this automatically`\n      forceUpdate();\n    }\n  };\n\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      {/* {loading && <Loader />} */}\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            label=\"Godown Name*\"\n            value={insertParams.godown_name}\n            onChange={(event) => {\n              setInsertParams({\n                ...insertParams,\n                godown_name: event.target.value,\n              });\n            }}\n          />\n          <p className=\"text-danger\">\n            {validator.message(\n              \"Godown Name\",\n              insertParams.godown_name,\n              \"required\"\n            )}\n          </p>\n        </div>\n        <div className=\"col-md-6\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            multiline\n            label=\"Address\"\n            value={insertParams.address}\n            onChange={(event) => {\n              setInsertParams({ ...insertParams, address: event.target.value });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"w-100 text-right mt-4\">\n        <Button\n          onClick={() => onClose()}\n          variant=\"contained\"\n          className=\"mr-2\"\n          color=\"primary\"\n          disableElevation\n        >\n          Cancel\n        </Button>\n        {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\n      </div>\n    </div>\n  );\n};\n\nexport default AddGodown;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\browse.js",["1593","1594"],"import { Checkbox, TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst EmployeeBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Employee/EmpMasterBrowse\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"srno\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"code\",\n              headerName: \"Code\",\n              flex: 0.1,\n            },\n            {\n              field: \"empname\",\n              headerName: \"Emp. Name\",\n              flex: 0.1,\n            },\n            {\n              field: \"address\",\n              headerName: \"Address\",\n              flex: 0.1,\n            },\n            {\n              field: \"mobile\",\n              headerName: \"Mobile\",\n              flex: 0.1,\n            },\n            {\n              field: \"email\",\n              headerName: \"Email\",\n              flex: 0.1,\n            },\n            {\n              field: \"department\",\n              headerName: \"Department\",\n              flex: 0.1,\n            },\n            {\n              field: \"designation\",\n              headerName: \"Designation\",\n              flex: 0.1,\n            },\n            {\n              field: \"manager\",\n              headerName: \"Manager\",\n              flex: 0.1,\n            },\n            {\n              field: \"disable\",\n              headerName: \"Disable\",\n              flex: 0.1,\n              renderCell: (params) => {\n                return (\n                  <Checkbox\n                    {...label}\n                    color=\"primary\"\n                    checked={params.row.disable === \"True\"}\n                  />\n                );\n              },\n            },\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.id)}\n                  onDelete={() => handleDeleteRow(params.row.id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default EmployeeBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\addEntry.js",["1595","1596","1597"],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport GeneralInfoEmp from \"./general\";\nimport OtherDetails from \"./other\";\nimport { useSelector } from \"react-redux\";\nconst AddEmployee = ({ onClose }) => {\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.employeeId\n  );\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [listValues, setListValues] = useState({\n    empList: [],\n    desgnList: [],\n    depInchrList: [],\n  });\n\n  const [formData, setFormData] = useState({\n    pr_check: false,\n    user_id: 0,\n    user_code: \"\",\n    attendance_emp_code: \"\",\n    ctc_per_day: \"\",\n    card_no: \"\",\n    short_name: \"\",\n    first_name: \"\",\n    last_name: \"\",\n    f_h_name: \"\",\n    mother_name: \"\",\n    m_status: \"\",\n    gender: \"\",\n    dob: null,\n    pr_add1: \"\",\n    pr_phone: \"\",\n    pr_mobile: \"\",\n    pt_add1: \"\",\n    pt_phone: \"\",\n    pt_mobile: \"\",\n    department_name: \"\",\n    designation_name: \"\",\n    joining_date: null,\n    leaving_date: null,\n    leaving_reason: \"\",\n    dispensary: \"\",\n    remarks: \"\",\n    department_incharge: \"\",\n    user_name: \"\",\n    password: \"\",\n    email: \"\",\n    pf_code: \"\",\n    esi_code: \"\",\n    pan_no: \"\",\n    salary_p_mode: 1,\n    account_no: \"\",\n    bank_name: \"\",\n    nominee: \"\",\n    edit_button: \"\",\n    disable: \"\",\n    login_user_id: \"\",\n    login_user_name: \"\",\n    sign_path: \"\",\n  });\n\n  useEffect(() => {\n    if (selectedIdResponse) {\n      CommonController.commonApiCallFilter(\"Employee/EmployeeMasterPreview\", {\n        user_id: selectedIdResponse,\n      })\n        .then((data) => {\n          // setFormData(data);\n          let tempData = { ...formData };\n          for (let key in formData) {\n            if (data.hasOwnProperty(key)) {\n              tempData[key] = data[key];\n            }\n          }\n          setFormData(tempData);\n        })\n        .catch((err) => {\n          showErrorToast(err);\n        });\n    }\n  }, [selectedIdResponse]);\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleDateChange = (name, date) => {\n    setFormData({ ...formData, [name]: date });\n  };\n\n  const handleAutoChange = (name, value) => {\n    setFormData({ ...formData, [name]: value ? value.value : null });\n  };\n\n  const getAutoValue = (key, arr, val) => {\n    const value = arr.filter((x) => x[key] === val);\n    return value && value.length > 0 ? value[0] : null;\n  };\n\n  const handleTabChange = (index) => {\n    setSelectedTab(index);\n  };\n\n  const setPRAddress = (e) => {\n    if (e.target.checked) {\n      setFormData({\n        ...formData,\n        pr_check: e.target.checked,\n        pr_add1: formData.pt_add1,\n      });\n    } else {\n      setFormData({\n        ...formData,\n        pr_check: e.target.checked,\n        pr_add1: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDropdown\")\n      .then((data) => {\n        setListValues({\n          empList: data.empList,\n          desgnList: data.desgnList,\n          depInchrList: data.depInchrList,\n        });\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  }, []);\n\n  const onNext = () => {\n    if (selectedTab === 0) {\n      setSelectedTab(1);\n    } else {\n      onSubmit();\n    }\n  };\n\n  const onBack = () => {\n    setSelectedTab(0);\n  };\n\n  const onSubmit = () => {\n    CommonController.commonApiCallFilter(\n      \"Employee/EmployeeMasterInsert\",\n      formData\n    )\n      .then((data) => {\n        if (data.valid) {\n          showSuccessToast(\n            `Employee ${\n              selectedIdResponse ? \"updated\" : \"created\"\n            } successfully`\n          );\n        }\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      {/* {loading && <Loader />} */}\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 0 ? \"active\" : \"\")}\n            onClick={() => handleTabChange(0)}\n          >\n            General Information\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 1 ? \"active\" : \"\")}\n            onClick={() => handleTabChange(1)}\n          >\n            Other Details\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content mt-10\">\n        {selectedTab === 0 && (\n          <GeneralInfoEmp\n            formData={formData}\n            handleChange={handleChange}\n            handleDateChange={handleDateChange}\n            handleAutoChange={handleAutoChange}\n            getAutoValue={getAutoValue}\n            listValues={listValues}\n            onCheckChange={setPRAddress}\n          />\n        )}\n        {selectedTab === 1 && (\n          <OtherDetails formData={formData} handleChange={handleChange} />\n        )}\n        <div className=\"w-100 text-right\">\n          {selectedTab === 1 && (\n            <Button\n              variant=\"contained\"\n              onClick={onBack}\n              className=\"mr-3\"\n              color=\"primary\"\n              disableElevation\n            >\n              Back\n            </Button>\n          )}\n          <Button\n            variant=\"contained\"\n            onClick={onNext}\n            color=\"primary\"\n            disableElevation\n          >\n            {selectedTab === 1 ? \"Submit\" : \"Next\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddEmployee;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\browse.js",["1598","1599","1600","1601","1602","1603"],"import { TextField, MenuItem } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport DateFilter from \"../../../components/dateFilter\";\nconst SalesCostingBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n  const [bodyParam, setBodyParam] = useState({\n    user_id: \"\",\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Costing/SalesCostingBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          \n         \n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}       \n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"riv\",\n              headerName: \"Costing No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"status_name\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesCostingBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\browse.js",["1604","1605"],"import { TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport { selectedComboMLFBId } from \"../../../_redux/actions/masters/all.action\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst ComboMLFBBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"ComboMlfb/ComboMlfbBrowse\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedComboMLFBId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"ComboMlfb/ComboMlfbDelete\", {\n      tran_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              flex: 0.1,\n            },\n            {\n              field: \"mlfb_no\",\n              headerName: \"MLFB No.\",\n              flex: 0.1,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Date\",\n              flex: 0.1,\n            },\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.tran_id)}\n                  onDelete={() => handleDeleteRow(params.row.tran_id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ComboMLFBBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\addCombo.js",["1606","1607","1608"],"import { TextField, Button } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React, { useEffect, useState } from \"react\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport { SimpleTable } from \"../../../components/basic-table\";\nimport useForceUpdate from \"use-force-update\";\nimport moment from \"moment\";\nimport { useSelector } from \"react-redux\";\nimport { Loader } from \"../../../components/loader\";\n\nconst AddComboMLFB = ({ onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const [dataLoading, setDataLoading] = useState(false);\n  const [validator, setValidator] = useState(new SimpleReactValidator());\n  const selectedComboMLFBIdResponse = useSelector(\n    (state) => state.AllReducersMaster.comboMLFBId\n  );\n\n  const forceUpdate = useForceUpdate();\n  const [mlfbProductList, setProductList] = useState([]);\n  const [insertParams, setInsertParams] = useState({\n    tran_id: \"0\",\n    date: null,\n    product_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n    user_name: localStorage.getItem(\"userName\"),\n    mlfbItems: [],\n  });\n\n  const [selectedParams, setSelectedParams] = useState({\n    date: null,\n    selectedProduct: \"\",\n    selectedMlfb: \"\",\n  });\n  useEffect(async () => {\n    if (selectedComboMLFBIdResponse && mlfbProductList.length > 0) {\n      setDataLoading(true);\n      await CommonController.commonApiCallFilter(\"ComboMlfb/ComboMlfbPreview\", {\n        tran_id: selectedComboMLFBIdResponse,\n      }).then((data) => {\n        setSelectedParams({\n          ...selectedParams,\n          date: new Date(\n            data.date.split(\"/\")[1] +\n              \"/\" +\n              data.date.split(\"/\")[0] +\n              \"/\" +\n              data.date.split(\"/\")[2]\n          ),\n          selectedMlfb: mlfbProductList.filter(\n            (x) => x.value === data.mlfb_no\n          )[0],\n        });\n        setInsertParams({\n          ...insertParams,\n          remarks: data.remarks,\n          product_id: data.product_id,\n          mlfbItems: data.mlfbItems,\n          date: data.date,\n          tran_id: data.tran_id,\n        });\n      });\n      setDataLoading(false);\n    }\n  }, [selectedComboMLFBIdResponse, mlfbProductList]);\n  const onProductChoose = async () => {\n    const tempList = [...insertParams.mlfbItems];\n    const indx = tempList.findIndex(\n      (x) => x.product_id === selectedParams.selectedProduct?.id\n    );\n    if (indx > -1) {\n      showErrorToast(\"Already selected\");\n    } else {\n      setLoading(true);\n      await CommonController.commonApiCallFilter(\n        \"ComboMlfb/ComboMlfbPreviewDetails\",\n        {\n          product_id: selectedParams.selectedProduct?.id,\n        }\n      ).then((data) => {\n        tempList.push(data);\n      });\n      setInsertParams({ ...insertParams, mlfbItems: tempList });\n      setLoading(false);\n      setSelectedParams({ ...selectedParams, selectedProduct: \"\" });\n    }\n  };\n  const insertCombo = async () => {\n    if (validator.allValid()) {\n      if (insertParams.mlfbItems.length > 0) {\n        CommonController.commonApiCallFilter(\n          \"ComboMlfb/ComboMlfbInsert\",\n          insertParams\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Successfully Saved\");\n          } else {\n            showErrorToast(\"Something went wrong\");\n          }\n        });\n      } else {\n        showErrorToast(\"Please select MLFB Products\");\n      }\n    } else {\n      validator.showMessages();\n      // rerender to show messages for the first time\n      // you can use the autoForceUpdate option to do this automatically`\n      forceUpdate();\n    }\n  };\n  const getProductList = async () => {\n    await CommonController.commonApiCallFilter(\n      \"Dropdown/GetProductMlfb\",\n      {}\n    ).then((data) => setProductList(data));\n  };\n  useEffect(() => {\n    getProductList();\n  }, []);\n  //   const handleDataChange = () => {};\n  const handleDateChange = (key, date) => {\n    setInsertParams({\n      ...insertParams,\n      [key]: moment(date).format(\"DD-MM-YYYY\"),\n    });\n    setSelectedParams({ ...selectedParams, date: date });\n  };\n  const mlfbColumns = [\n    {\n      id: \"mlfb_no\",\n      label: \"MLFB No\",\n    },\n    {\n      id: \"product_code\",\n      label: \"Product Code\",\n    },\n    {\n      id: \"category_name\",\n      label: \"Category Name\",\n    },\n    {\n      id: \"p_group_name\",\n      label: \"Group Name\",\n    },\n  ];\n  const handleDelete = (row) => {\n    const tempList = [...insertParams.mlfbItems];\n    const indx = tempList.findIndex((x) => x.product_id === row.product_id);\n    if (indx > -1) {\n      tempList.splice(indx, 1);\n    }\n    setInsertParams({ ...insertParams, mlfbItems: tempList });\n  };\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      {dataLoading && <Loader />}\n      <div className=\"row\">\n        <div className=\"col-md-3\">\n          <DatePicker\n            label=\"Date*\"\n            value={selectedParams.date}\n            format=\"dd-MM-yyyy\"\n            onChange={(date) => {\n              handleDateChange(\"date\", date);\n              setSelectedParams({ ...selectedParams, date: date });\n            }}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            fullWidth\n          />\n          <p className=\"text-danger\">\n            {validator.message(\"Date\", selectedParams.date, \"required\")}\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={mlfbProductList}\n            getOptionLabel={(options) => options.value}\n            fullWidth\n            value={selectedParams.selectedMlfb}\n            onChange={(event, newValue) => {\n              setInsertParams({ ...insertParams, product_id: newValue?.id });\n              setSelectedParams({ ...selectedParams, selectedMlfb: newValue });\n            }}\n            size=\"small\"\n            renderInput={(params) => (\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                {...params}\n                label=\"MLFB No.*\"\n              />\n            )}\n          />\n          <p className=\"text-danger\">\n            {validator.message(\"MLFB\", insertParams.product_id, \"required\")}\n          </p>\n        </div>\n        <div className=\"col-md-6\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            multiline\n            label=\"Remarks\"\n            value={insertParams.remarks}\n            onChange={(event) => {\n              setInsertParams({ ...insertParams, remarks: event.target.value });\n            }}\n          />\n          <p className=\"text-danger\">\n            {validator.message(\"Remarks\", insertParams.remarks, \"required\")}\n          </p>\n        </div>\n        <div className=\"col-md-4 d-flex\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo2\"\n            options={mlfbProductList}\n            getOptionLabel={(options) => options.value}\n            fullWidth\n            value={selectedParams.selectedProduct}\n            onChange={(event, newValue) => {\n              setSelectedParams({\n                ...selectedParams,\n                selectedProduct: newValue,\n              });\n            }}\n            size=\"small\"\n            className=\"mr-3\"\n            renderInput={(params) => (\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                {...params}\n                label=\"MLFB Product\"\n              />\n            )}\n          />\n\n          <Button\n            color=\"primary\"\n            disabled={loading}\n            onClick={onProductChoose}\n            disableElevation\n            variant=\"contained\"\n          >\n            {loading ? (\n              <i class=\"fas fa-circle-notch fa-spin text-white\"></i>\n            ) : (\n              \"Add\"\n            )}\n          </Button>\n        </div>\n      </div>\n      <SimpleTable\n        columns={mlfbColumns}\n        rows={insertParams.mlfbItems}\n        onDelete={handleDelete}\n      />\n      <div className=\"w-100 text-right mt-4\">\n        <Button\n          variant=\"contained\"\n          className=\"mr-2\"\n          color=\"primary\"\n          disableElevation\n          onClick={insertCombo}\n        >\n          Save\n        </Button>\n        <Button\n          onClick={() => onClose()}\n          variant=\"contained\"\n          color=\"primary\"\n          disableElevation\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddComboMLFB;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\tnc.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\generalInfo.js",["1609","1610","1611"],"import {\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getAutoValue } from \"../../../components/common\";\r\nconst GeneralInfo = ({ formData, handleChange, handleAutoChange }) => {\r\n  const filterList = useSelector(\r\n    (state) => state.AccountMaster.accountFilterList\r\n  );\r\n  \r\n  console.log(formData)\r\n  const [dropDownValues, setDropDownValues] = useState({\r\n    groupList: [],\r\n    pincodeList: [],\r\n    regionList: [],\r\n    ratingList: [],\r\n    employeeList: [],\r\n    seimenggList: [],\r\n  });\r\n  useEffect(() => {\r\n    if(filterList?.listengg?.length>0)\r\n    {\r\n        const values = {\r\n          groupList: filterList.listGroup,\r\n          pincodeList: filterList.pincode,\r\n          regionList: filterList.listregion,\r\n          ratingList: filterList.rating,\r\n          employeeList: filterList.listengg,\r\n          seimenggList: filterList.siemensEngg,\r\n        };\r\n        setDropDownValues(values);\r\n      }\r\n  }, [filterList]);\r\n\r\n  const {\r\n    groupList,\r\n    pincodeList,\r\n    regionList,\r\n    employeeList,\r\n    seimenggList,\r\n    ratingList,\r\n  } = dropDownValues;\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Company Id\"\r\n              fullWidth\r\n              disabled\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"company_id\"\r\n              value={formData.company_id}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Short Name *\"\r\n              name=\"short_name\"\r\n              onChange={handleChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              value={formData.short_name}\r\n              \r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Company Name*\"\r\n              onChange={handleChange}\r\n              fullWidth\r\n              value={formData.company_name}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"company_name\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <Autocomplete\r\n              size=\"small\"\r\n              options={groupList}\r\n              getOptionLabel={(option) => option.group_name}\r\n              fullWidth\r\n              // value={ formData.group_name}\r\n               value={\r\n                  { group_id: formData.group_id, group_name: formData.group_name }\r\n              }\r\n              onChange={(event, value) =>\r\n                handleAutoChange(\"group_id\", \"group_name\", value)\r\n              }\r\n              variant=\"outlined\"\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Group\" variant=\"outlined\" />\r\n              )}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Address 1\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"address1\"\r\n              value={formData.address1}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Address 2\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"address2\"\r\n              value={formData.address2}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-12 mb-5\">\r\n            <Autocomplete\r\n              size=\"small\"\r\n              options={pincodeList}\r\n              getOptionLabel={(option) => option.pin_code_no}\r\n              fullWidth\r\n              value={\r\n                formData.pin_code_id != \"\"\r\n                  ? { pin_code_id: formData.pin_code_id, pin_code_no: formData.pin_code_no }\r\n                  : \"\"\r\n              }\r\n              // value={formData.pin_code}\r\n              onChange={(event, value) =>\r\n                handleAutoChange(\"pin_code_id\",\"pin_code_no\",value)\r\n              }\r\n              variant=\"outlined\"\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Pincode\" variant=\"outlined\" />\r\n              )}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"City\"\r\n              name=\"city\"\r\n              value={formData.city}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"District\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              onChange={handleChange}\r\n              size=\"small\"\r\n              name=\"district\"\r\n              value={formData.district}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Pan No.\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"pan_no\"\r\n            value={formData.pan_no}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"GSTIN No.\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"tin_no\"\r\n            value={formData.tin_no}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Phone No. 1\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"phone1\"\r\n            value={formData.phone1}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Phone No. 2\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"phone2\"\r\n            value={formData.phone2}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Mobile\"\r\n            name=\"mobile\"\r\n            value={formData.mobile}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Fax\"\r\n            name=\"fax\"\r\n            value={formData.fax}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Website\"\r\n            name=\"website\"\r\n            value={formData.website}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={ratingList}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"rating_id\", \"rating_name\", value)\r\n            }\r\n            getOptionLabel={(option) => option.rating_name}\r\n            value={{ rating_id: formData.rating_id, rating_name: formData.rating_name }}\r\n            // value={formData.rating_name}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Rating\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Remarks\"\r\n            fullWidth\r\n            name=\"remarks\"\r\n            value={formData.remarks}\r\n            onChange={handleChange}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Distance\"\r\n            fullWidth\r\n            name=\"distance\"\r\n            value={formData.distance}\r\n            onChange={handleChange}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Credit Period\"\r\n            // type=\"number\"\r\n            fullWidth\r\n            name=\"credit_period\"\r\n            value={formData.credit_period}\r\n            onChange={handleChange}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Credit Limit\"\r\n            type=\"number\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            name=\"credit_limit\"\r\n            value={formData.credit_limit}\r\n            onChange={handleChange}\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={employeeList}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"\", \"name\", value)\r\n            }\r\n            getOptionLabel={(option) => option.name}\r\n            fullWidth\r\n            value={\r\n              formData.name != \"\"\r\n                ? getAutoValue(\"name\", employeeList, formData.name)\r\n                : \"\"\r\n            }\r\n            // value={formData.mark_engg}\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Marketing Engg.\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={seimenggList || []}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"se_id\", \"Engg_name\", value)\r\n            }\r\n            value={\r\n              formData?.Engg_name != \"\"\r\n                ? { se_id: formData?.se_id, Engg_name: formData?.Engg_name }\r\n                : \"\"\r\n            }\r\n            // value={formData?.siem_engg}\r\n            getOptionLabel={(option) => option.Engg_name}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Siemens Engg.\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"State\"\r\n            name=\"state\"\r\n            value={formData.state}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={regionList}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"region_id\", \"region_name\", value)\r\n            }\r\n            getOptionLabel={(option) => option.region_name}\r\n            fullWidth\r\n            value={{ region_id: formData.region_id, region_name: formData.region_name }}\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Region\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </div>\r\n    \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneralInfo;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\contact_person.js",["1612","1613","1614"],"import {\r\n  Button,\r\n  FormControl,\r\n  Input,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport { showSuccessToast } from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\nconst ContactPerson = ({ formData, handleChange,removeIndex, handleCPersonList }) => {\r\n  const filterList = useSelector(\r\n    (state) => state.AccountMaster.accountFilterList\r\n  );\r\n  console.log(filterList)\r\nconst [formContact, setformContact] = useState({\r\n  cperson_name:\"\",\r\n  company_name:\"\",\r\n  department_id:\"\",\r\n  department_name:\"\",\r\n  designation_name:\"\",\r\n  designation_id:\"\",\r\n  mobile:\"\",\r\n  email:\"\",\r\n  phone:\"\",\r\n  extn:\"\", \r\n  vcard_path:\"\",\r\n})\r\n\r\nconst uploadImage=async(e)=>{\r\n  let value = e.target.files[0];\r\n  let formData = new FormData();\r\n  formData.append(\"file_path\", value);\r\n  const response=await CommonController.imageUpoad(\"master/file\",formData)\r\n  if(response.status===200){\r\n    showSuccessToast(\"Image Upload successfully\")\r\n    setformContact({...formContact,vcard_path:response.file_name.filename})\r\n    console.log(response)\r\n  }\r\n \r\n}\r\n  const columns = [\r\n    {\r\n      id: \"cperson_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Name\",\r\n    },\r\n    {\r\n      id: \"department_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Department \",\r\n    },\r\n    {\r\n      id: \"designation_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Designation\",\r\n    },\r\n    {\r\n      id: \"mobile\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Mobile\",\r\n    },\r\n    {\r\n      id: \"email\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Email\",\r\n    },\r\n    {\r\n      id: \"phone\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Phone\",\r\n    },\r\n    {\r\n      id: \"\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Extn\",\r\n    },\r\n  ];\r\n  const [dropDownValues, setDropDownValues] = useState({\r\n    departmentList: [],\r\n    designationList: [],\r\n  });\r\n  const handleSaveForm=()=>{\r\n    handleCPersonList(formContact);\r\n\r\n  }\r\n  const handleOnChange=(e,value)=>{\r\n  setformContact({...formContact,[e.target.name]:e.target.value})\r\nif(e.target.role===\"option\"){\r\n  setformContact({...formContact,department_name:value.department_name,department_id:value.department_id})\r\n}\r\n  }\r\n  const handleRemoveContact = (id) => {\r\n    let personList = formData.cpersonList;\r\n    const itemIndex = personList.findIndex((x) => x === id);\r\n    console.log(itemIndex)\r\n    if (itemIndex > -1) {\r\n      personList.splice(itemIndex, 1);\r\n      removeIndex(personList);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if(filterList?.listengg?.length>0)\r\n    {\r\n        const values = {\r\n          departmentList: filterList.department,\r\n          designationList: filterList.designation,\r\n        };\r\n        setDropDownValues(values);\r\n      }\r\n  }, [filterList]);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Company Name\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"company_name\"\r\n          value={formData.company_name}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Contact ID\"\r\n          disabled\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"contact_id\"\r\n          value={formData.contact_id}\r\n          size=\"small\"\r\n          onChange={handleOnChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Contact Name\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"cperson_name\"\r\n          value={formContact.cperson_name}\r\n          size=\"small\"\r\n          onChange={handleOnChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <Autocomplete\r\n          size=\"small\"\r\n          options={dropDownValues.departmentList}\r\n          getOptionLabel={(option) => option.department_name}\r\n          onChange={handleOnChange}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Department\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <Autocomplete\r\n          size=\"small\"\r\n          options={dropDownValues.designationList}\r\n          getOptionLabel={(option) => option.designation_name}\r\n          fullWidth\r\n          onChange={(e,value)=>setformContact({...formContact,designation_name:value.designation_name,designation_id:value.designation_id})}\r\n          variant=\"outlined\"\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Designation\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Mobile\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"mobile\"\r\n          value={formContact.mobile}\r\n          size=\"small\"\r\n          onChange={handleOnChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Email\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"email\"\r\n          value={formContact.email}\r\n          size=\"small\"\r\n          onChange={handleOnChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Phone\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"phone\"\r\n          value={formContact.phone}\r\n          size=\"small\"\r\n          onChange={handleOnChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Extn.\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"extn\"\r\n          value={formContact.extn}\r\n          size=\"small\"\r\n          onChange={handleOnChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-2 mb-2\">\r\n        <InputLabel htmlFor=\"file-upload\" style={{ cursor: \"pointer\" }} >\r\n        Company Card\r\n        </InputLabel>\r\n        <Input\r\n        id=\"file-upload\"\r\n        type=\"file\"\r\n        // style={{ display: \"none\" }}\r\n          label=\"Extn.\"\r\n          fullWidth\r\n          // variant=\"outlined\"\r\n          name=\"contact_name\"\r\n          value={formData.contact_name}\r\n          size=\"small\"\r\n          onChange={uploadImage}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-2 mt-5 ml-5 pt-4 \">\r\n      <Button\r\n          variant=\"contained\"\r\n          onClick={handleSaveForm}\r\n          color=\"primary\"\r\n          disableElevation\r\n        >\r\n          Save\r\n        </Button>\r\n      </div>\r\n      <div className=\"col-md-12 mb-3\">\r\n        <SimpleTable\r\n          columns={columns}\r\n          rows={formData.cpersonList}\r\n          onDelete={handleRemoveContact}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactPerson;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\index.js",["1615","1616","1617"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport LedgerIndex from \"./ledger\";\r\nimport FinanceIndex from \"./finance\";\r\nimport CostingTabsIndex from \"./tabs\";\r\n\r\nconst panel = [\r\n  {\r\n    name: \"Ledger\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Finance\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Tabs\",\r\n    component: \"\",\r\n  },\r\n];\r\n\r\nconst ConfigCostingIndex = () => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <LedgerIndex />;\r\n        break;\r\n      case 1:\r\n        return <FinanceIndex />;\r\n        break;\r\n      case 2:\r\n        return <CostingTabsIndex />;\r\n        break;\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {panel.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigCostingIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\index.js",["1618","1619","1620","1621"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport TypeIndex from \"./type\";\r\nimport PriorityIndex from \"./priority\";\r\nimport ReferenceIndex from \"./reference\";\r\nimport EnqStatusIndex from \"./status\";\r\nconst panel = [\r\n  {\r\n    name: \"Type\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Priority\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Reference\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Status\",\r\n    component: \"\",\r\n  },\r\n];\r\n\r\nconst ConfigEnquiryIndex = () => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <TypeIndex />;\r\n        break;\r\n      case 1:\r\n        return <PriorityIndex />;\r\n        break;\r\n      case 2:\r\n        return <ReferenceIndex />;\r\n        break;\r\n      case 3:\r\n        return <EnqStatusIndex />;\r\n        break;\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {panel.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigEnquiryIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\index.js",["1622","1623","1624","1625","1626","1627"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport CategoryIndex from \"./category\";\r\nimport GroupIndex from \"./group\";\r\nimport ItemIndex from \"./item\";\r\nimport UnitIndex from \"./unit\";\r\nimport GGIndex from \"./gg\";\r\nimport { buttonLoader } from \"../../../../components/common\";\r\n\r\n// const panel = [\r\n//   {\r\n//     name: \"Category\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Group\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Item\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Unit\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"GG\",\r\n//     component: \"\",\r\n//   },\r\n// ];\r\n\r\nconst ConfigProductIndex = ({list}) => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <CategoryIndex />;\r\n        break;\r\n      case 1:\r\n        return <GroupIndex />;\r\n        break;\r\n      case 2:\r\n        return <ItemIndex />;\r\n        break;\r\n      case 3:\r\n        return <UnitIndex />;\r\n        break;\r\n      case 4:\r\n        return <GGIndex />;\r\n        break;\r\n\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {list.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.display_name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      \r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigProductIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\general.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\index.js",["1628","1629","1630","1631","1632","1633","1634","1635"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport GroupIndex from \"./group\";\r\nimport PincodeIndex from \"./pincode\";\r\nimport RegionIndex from \"./region\";\r\nimport RatingIndex from \"./rating\";\r\nimport DepartmentIndex from \"./department\";\r\nimport DesignationIndex from \"./designation\";\r\nimport SiemensIndex from \"./siemens\";\r\nimport SupplyItemIndex from \"./supply-item\";\r\n\r\n// const panel = [\r\n//   {\r\n//     name: \"Group\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Pin Code\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Region\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Rating\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Department\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Designation\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Siemens\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Supply Items\",\r\n//     component: \"\",\r\n//   },\r\n// ];\r\n\r\nconst ConfigAccountIndex = ({list}) => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <GroupIndex />;\r\n        break;\r\n      case 1:\r\n        return <PincodeIndex />;\r\n        break;\r\n      case 2:\r\n        return <RegionIndex />;\r\n        break;\r\n      case 3:\r\n        return <RatingIndex />;\r\n        break;\r\n      case 4:\r\n        return <DepartmentIndex />;\r\n        break;\r\n      case 5:\r\n        return <DesignationIndex />;\r\n        break;\r\n      case 6:\r\n        return <SiemensIndex />;\r\n        break;\r\n      case 7:\r\n        return <SupplyItemIndex />;\r\n        break;\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {list.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.display_name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigAccountIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\other.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\form.js",["1636","1637","1638","1639"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        ledger_id:0,\r\n        ledger_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                // user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                ledger_name: groupValues.ledger_name,\r\n                ledger_id: groupValues.ledger_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_cos_ledger\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Leader ID\" name=\"ledger_id\"disabled value={groupValues.ledger_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Leader Name\" name=\"ledger_name\" value={groupValues.ledger_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\browse.js",["1640","1641","1642","1643","1644"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_cos_ledger\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_cos_ledger\",\r\n        { ledger_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_cos_ledger\",\r\n        { ledger_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ledger_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"ledger_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.ledger_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.ledger_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.ledger_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\form.js",["1645","1646","1647","1648"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nconst AddOrEditGroup = (props) => {\r\n  const [groupValues, setGroupValues] = useState({\r\n    tab_id: \"\",\r\n    tab_name: \"\",\r\n    mtab_id:0,\r\n    tabArray: [],\r\n  });\r\n  const [groupTab, setgroupTab] = useState({\r\n    tab_name: \"\",\r\n    sequence: \"\",\r\n  });\r\n  const [showMessage, setMessage] = useState({\r\n    type: \"\",\r\n    msg: \"\",\r\n  });\r\n  const tabArrayDelet = (e) => {\r\n    const deleteArraytab={...groupValues}\r\n    deleteArraytab.tabArray.splice(deleteArraytab.tabArray.indexOf(e),1)\r\n    setGroupValues(deleteArraytab)\r\n  };\r\n  const listColumn = [\r\n    {\r\n      id: \"tab_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Tab Name\",\r\n    },\r\n    {\r\n      id: \"sequence\",\r\n      numeric: true,\r\n      disablePadding: false,\r\n      label: \"Sequence\",\r\n    },\r\n  ];\r\n  const submitAddBox = () => {\r\n        let arrayList={...groupValues};\r\n    arrayList.tabArray.push(groupTab);\r\n    setGroupValues(arrayList);\r\n  };\r\n  const insertForm = async () => {\r\n    try {\r\n      let body = {\r\n        user_id: localStorage.getItem(\"userId\"),\r\n        mtab_id: groupValues.mtab_id,\r\n        mtab_name: groupValues.tab_name,\r\n        tab_id: groupValues.tab_id,\r\n        tabArray:groupValues.tabArray\r\n      };\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/insert_cos_tab\",\r\n        body,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((result) => {\r\n        if (result.status == 200) {\r\n          showSuccessToast(result.message);\r\n          props.onClose(0);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (props.editData) {\r\n      setGroupValues(props.editData);\r\n    }\r\n  }, [props.editData]);\r\n  const onSave = () => {\r\n    insertForm();\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setGroupValues({\r\n      ...groupValues,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const onCancelClick = () => {\r\n    props.onClose(0);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Tab ID\"\r\n              name=\"tab_id\"\r\n              value={groupValues.tab_id}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Tab Name*\"\r\n              name=\"tab_name\"\r\n              value={groupValues.group_name}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n        </div>\r\n        {groupValues.tabArray?.length > 0 ? (\r\n          <SimpleTable\r\n            columns={listColumn}\r\n            rows={groupValues.tabArray}\r\n            onDelete={tabArrayDelet}\r\n          />\r\n        ) : null}\r\n        <hr />\r\n        <div className=\"container-fluid\">\r\n          {/* <h1>Add Box:</h1> */}\r\n          <div className=\"row mt-5\">\r\n            <div className=\"col-md-3 mb-3\">\r\n              <TextField\r\n                label=\"Tab Name\"\r\n                fullWidth\r\n                onChange={(e) => {\r\n                  setgroupTab({ ...groupTab, tab_name: e.target.value });\r\n                }}\r\n                value={groupTab.tab_name}\r\n                variant=\"outlined\"\r\n                name=\"tab_name\"\r\n                size=\"small\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-4 mb-3\">\r\n              <TextField\r\n                label=\"Sequence\"\r\n                fullWidth\r\n                onChange={(e) => {\r\n                  setgroupTab({ ...groupTab, sequence: e.target.value });\r\n                }}\r\n                value={groupTab.sequence}\r\n                variant=\"outlined\"\r\n                name=\"sequence\"\r\n                size=\"small\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2 mb-3 pl-5\">\r\n              <Button\r\n                color=\"primary\"\r\n                className=\"mr-2\"\r\n                // disableElevation\r\n                variant=\"contained\"\r\n                onClick={submitAddBox}\r\n              >\r\n                Add New\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-12 mt-3 text-right\">\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"mr-2\"\r\n              onClick={onCancelClick}\r\n              disableElevation\r\n            >\r\n              Cancel\r\n            </Button>\r\n            {groupValues.type == \"preview\" ? (\r\n              \"\"\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={onSave}\r\n                color=\"primary\"\r\n                disableElevation\r\n              >\r\n                Save\r\n              </Button>\r\n            )}\r\n          </div>\r\n          {showMessage.type != \"\" ? (\r\n            <Alert severity={showMessage.type}>{showMessage.msg}</Alert>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddOrEditGroup;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\browse.js",["1649","1650","1651","1652","1653"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_cos_tab\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_cos_tab\",\r\n        { mtab_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_cos_tab\",\r\n        { mtab_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"mtab_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"mtab_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n         \r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.mtab_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.mtab_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.mtab_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\browse.js",["1654","1655","1656","1657","1658"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_cos_finance\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_cos_finance\",\r\n        { finance_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_cos_finance\",\r\n        { finance_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"finance_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"finance_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.finance_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.finance_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.finance_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\form.js",["1659","1660","1661","1662"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        finance_id:0,\r\n        finance_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                finance_name: groupValues.finance_name,\r\n                finance_id: groupValues.finance_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_cos_finance\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n        }\r\n       \r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Finance ID\" name=\"finance_id\"disabled value={groupValues.finance_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Finance Name\" name=\"finance_name\" value={groupValues.finance_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\form.js",["1663","1664","1665","1666"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        enq_type_id:0,\r\n        enq_type: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                // user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                enq_type: groupValues.enq_type,\r\n                enq_type_id: groupValues.enq_type_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_enq_type\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Type ID\" name=\"enq_type_id\"disabled value={groupValues.enq_type_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Type Name\" name=\"enq_type\" value={groupValues.enq_type} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                {/* <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div> */}\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\browse.js",["1667","1668","1669","1670","1671"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_enq_type\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_enq_type\",\r\n        { enq_type_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_enq_type\",\r\n        { enq_type_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"enq_type_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"enq_type\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            // {\r\n            //   field: \"description\",\r\n            //   headerName: \"Description\",\r\n            //   width: 450,\r\n            // },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.enq_type_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.enq_type_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.enq_type_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\browse.js",["1672","1673","1674","1675","1676"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_supply\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_supply\",\r\n        { item_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_supply\",\r\n        { item_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"item_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"item_name\",\r\n              headerName: \"Item Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.item_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.item_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.item_id}\r\n          getRowClassName={(params)=>params.row.item_id%2?\"odd\" :\"even\"}\r\n\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\form.js",["1677","1678","1679","1680"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        item_id:0,\r\n        item_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                item_name: groupValues.item_name,\r\n                item_id: groupValues.item_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_supply\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (props.editData) {\r\n            setGroupValues(props.editData);\r\n          }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Supply Item ID\" name=\"item_id\" disabled value={groupValues.item_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Supply Item Name\" name=\"item_name\" value={groupValues.item_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\form.js",["1681","1682","1683","1684"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        department_id:0,\r\n        department_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                department_name: groupValues.department_name,\r\n                department_id: groupValues.department_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_department\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Department ID\" name=\"department_id\" disabled value={groupValues.department_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Department Name\" name=\"department_name\" value={groupValues.department_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\browse.js",["1685","1686","1687","1688","1689"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_department\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_department\",\r\n        { department_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_department\",\r\n        { department_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"department_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"department_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.department_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.department_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          getRowClassName={(params)=>params.row.department_id%2?\"odd\" :\"even\"}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.department_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\browse.js",["1690","1691","1692","1693","1694"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_siemens\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_siemens\",\r\n        { se_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_siemens\",\r\n        { se_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"se_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"roll_no\",\r\n              headerName: \"Roll No.\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"Engg_name\",\r\n              headerName: \"Engg Name\",\r\n              width: 450,\r\n            },\r\n           \r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.se_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.se_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.se_id}\r\n          getRowClassName={(params)=>params.row.se_id%2?\"odd\" :\"even\"}\r\n\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\form.js",["1695","1696","1697","1698"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        se_id:0,\r\n        engg_name: \"\",\r\n        roll_no: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                roll_no: groupValues.roll_no,\r\n                engg_name: groupValues.engg_name,\r\n                se_id: groupValues.se_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_siemens\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Siemens ID\" name=\"se_id\" disabled value={groupValues.se_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Roll No\" name=\"roll_no\" value={groupValues.roll_no} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Engg Name\" value={groupValues.engg_name} onChange={handleOnChange} name=\"engg_name\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\form.js",["1699","1700","1701","1702"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        designation_id:0,\r\n        designation_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                designation_name: groupValues.designation_name,\r\n                designation_id: groupValues.designation_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_designation\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Designation ID\" name=\"designation_id\"disabled value={groupValues.designation_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Designation Name\" name=\"designation_name\" value={groupValues.designation_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\form.js",["1703","1704","1705"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        region_id:0,\r\n        region_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                region_name: groupValues.region_name,\r\n                region_id: groupValues.region_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_region\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (props.editData) {\r\n            setGroupValues(props.editData);\r\n          }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Region ID\" name=\"region_id\" disabled value={groupValues.region_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Region Name\" name=\"region_name\" value={groupValues.region_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type === \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\browse.js",["1706","1707","1708","1709","1710"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_designation\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_designation\",\r\n        { designation_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_designation\",\r\n        { designation_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"designation_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"designation_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.designation_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.designation_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.designation_id}\r\n          getRowClassName={(params)=>params.row.designation_id%2?\"odd\" :\"even\"}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\form.js",["1711","1712","1713","1714"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst AddOrEditGroup = (props) => {\r\n  const [groupValues, setGroupValues] = useState({\r\n    rating_id: 0,\r\n    rating_name: \"\",\r\n    description: \"\",\r\n  });\r\n  const [showMessage, setMessage] = useState({\r\n    type: \"\",\r\n    msg: \"\",\r\n  });\r\n  const insertForm = async () => {\r\n    try {\r\n      let body = {\r\n        user_name: localStorage.getItem(\"userName\"),\r\n        user_id: localStorage.getItem(\"userId\"),\r\n        description: groupValues.description,\r\n        rating_name: groupValues.rating_name,\r\n        rating_id: groupValues.rating_id,\r\n      };\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/insert_rating\",\r\n        body,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((result) => {\r\n        if (result.status == 200) {\r\n          showSuccessToast(result.message);\r\n          props.onClose(0);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (props.editData) {\r\n      setGroupValues(props.editData);\r\n    }\r\n  }, [props.editData]);\r\n  const onSave = () => {\r\n    insertForm();\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setGroupValues({\r\n      ...groupValues,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const onCancelClick = () => {\r\n    props.onClose(0);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Rating ID\"\r\n              name=\"rating_id\"\r\n              disabled\r\n              value={groupValues.rating_id}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Rating Name\"\r\n              name=\"rating_name\"\r\n              value={groupValues.rating_name}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              multiline\r\n              label=\"Description\"\r\n              value={groupValues.description}\r\n              onChange={handleOnChange}\r\n              name=\"description\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mt-3 text-right\">\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"mr-2\"\r\n              onClick={onCancelClick}\r\n              disableElevation\r\n            >\r\n              Cancel\r\n            </Button>\r\n            {groupValues.type == \"preview\" ? (\r\n              \"\"\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={onSave}\r\n                color=\"primary\"\r\n                disableElevation\r\n              >\r\n                Save\r\n              </Button>\r\n            )}\r\n          </div>\r\n          {showMessage.type != \"\" ? (\r\n            <Alert severity={showMessage.type}>{showMessage.msg}</Alert>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddOrEditGroup;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\browse.js",["1715","1716","1717","1718","1719"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_region\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_region\",\r\n        { region_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_region\",\r\n        { region_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"region_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"region_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.region_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.region_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.region_id}\r\n          getRowClassName={(params)=>params.row.region_id%2?\"odd\" :\"even\"}\r\n          \r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\form.js",["1720","1721","1722","1723"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        group_id:0,\r\n        group_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                group_name: groupValues.group_name,\r\n                group_id: groupValues.group_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_group\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Group ID\" name=\"group_id\" disabled value={groupValues.group_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Group Name\" name=\"group_name\" value={groupValues.group_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\browse.js",["1724","1725","1726","1727","1728"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_rating\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_rating\",\r\n        { rating_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_rating\",\r\n        { rating_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"rating_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"rating_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.rating_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.rating_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.rating_id}\r\n          getRowClassName={(params)=>params.row.rating_id%2?\"odd\" :\"even\"}\r\n\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\browse.js",["1729","1730","1731"],"import { TextField} from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_group\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_group\",\r\n        { group_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_group\",\r\n        { group_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"group_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"group_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.group_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.group_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.group_id}\r\n          // getRowClassName={(params,i)=>console.log(param)}\r\n          getRowClassName={(params)=>params.row.group_id%2?\"odd\" :\"even\"}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\form.js",["1732","1733","1734","1735"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField,Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nconst AddOrEditPincode = (props) => {\r\n    const [formValues , setFormValues] = useState({\r\n        pin_code_id:0,\r\n        pin_code_no:\"\",\r\n        city:\"\",\r\n        state:\"\",\r\n        district:\"\",\r\n        description:\"\",\r\n\r\n    });\r\n    const [showMessage , setMessage] = useState({\r\n        type:\"\",\r\n        msg:\"\"\r\n    })\r\n    const insertForm=async()=>{\r\n        try{\r\n          let body={\r\n            user_name: localStorage.getItem(\"userName\"),\r\n            user_id: localStorage.getItem(\"userId\"),\r\n            description:formValues.description,\r\n            pin_code_id:formValues.pin_code_id,\r\n            pin_code_no:formValues.pin_code_no,\r\n            city:formValues.city,\r\n            state:formValues.state,\r\n            district:formValues.district,\r\n          }\r\n    \r\n    await CommonController.commonApiCallFilter(\r\n        \"master/insert_pincode\",\r\n        body,\r\n        \"post\",\r\n        \"node\"\r\n    \r\n    ).then(result=>{\r\n        if(result.status==200){\r\n            showSuccessToast(result.message)\r\n            props.onClose(0);\r\n        }})\r\n        }catch(err){\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n   useEffect(() => {\r\n    if(props.editData){\r\n            setFormValues(props.editData)\r\n    }\r\n        },[props.editData]);\r\n         const onSave = () => {\r\n            insertForm()\r\n        }\r\n    const handleOnChange = (event) => {\r\n        setFormValues({...formValues,\r\n            [event.target.name]:event.target.value\r\n        });\r\n    }\r\n\r\n    const onCancelClick = () => {\r\n\r\n        props.onClose(0);\r\n    }\r\n  \r\n//     useEffect(() => {\r\n//         console.log(updatePincodeInfoResponse)\r\n//         if(updatePincodeInfoResponse){\r\n//              setMessage({...showMessage,\r\n//                 type:updatePincodeInfoResponse.valid ? \"success\" : \"error\",\r\n//                 msg:updatePincodeInfoResponse.valid ? getPincodeInfo ? \"Pincode updated successfully\" : \"Pincode Saved successfully\" : \"Something went wrong\"\r\n//             });\r\n//             setTimeout(() => {\r\n//                 setMessage({\r\n//                     type:\"\",\r\n//                     msg:\"\"\r\n//                 });\r\n//                 props.onClose(0);\r\n//             }, 2000);\r\n//             dispatch(clearPincodeInfoResponse());\r\n//         }\r\n//     },[updatePincodeInfoResponse]);\r\n// // \r\n\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n            <div className=\"col-md-4 mb-3\">\r\n                    <TextField label=\"Pincode ID\" type=\"number\"disabled name=\"pin_code_id\" value={formValues.pin_code_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\"/>\r\n                </div>\r\n                <div className=\"col-md-4 mb-3\">\r\n                    <TextField label=\"Pincode\" type=\"number\" name=\"pin_code_no\" value={formValues.pin_code_no} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\"/>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"City\" name=\"city\" value={formValues.city} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\"/>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"State\" name=\"state\" value={formValues.state} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\"/>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"District\" name=\"district\" value={formValues.district} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\"/>\r\n                </div>\r\n                {/* <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" name=\"description\" value={formValues.description} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\"/>\r\n                </div> */}\r\n                 \r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                   {formValues.type==\"preview\"?\"\": <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n\r\nexport default AddOrEditPincode;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\form.js",["1736","1737","1738","1739"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        gg_id:0,\r\n        gg_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                gg_name: groupValues.gg_name,\r\n                gg_id: groupValues.gg_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_gg\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\" ID GG\" name=\"gg_id\" value={groupValues.gg_id} disabled onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\" Name GG\" name=\"gg_name\" value={groupValues.gg_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\browse.js",["1740","1741","1742","1743","1744","1745"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst BrowsePincode = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_pincode\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const deleteData = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_pincode\",\r\n        { pin_code_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_pincode\",\r\n        { pin_code_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"pin_code_id\",\r\n              headerName: \"ID\",\r\n              width: 110,\r\n            },\r\n            {\r\n              field: \"pin_code_no\",\r\n              headerName: \"Pin Code No\",\r\n              width: 230,\r\n            },\r\n            {\r\n              field: \"city\",\r\n              headerName: \"City\",\r\n              width: 230,\r\n            },\r\n            {\r\n              field: \"state\",\r\n              headerName: \"State\",\r\n              width: 230,\r\n            },\r\n            {\r\n              field: \"district\",\r\n              headerName: \"District\",\r\n              width: 230,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.pin_code_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => deleteData(params.row.pin_code_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 100,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.pin_code_id}\r\n          getRowClassName={(params)=>params.row.pin_code_id%2?\"odd\" :\"even\"}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default BrowsePincode;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\browse.js",["1746","1747","1748","1749","1750"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_gg\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_gg\",\r\n        { gg_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_gg\",\r\n        { gg_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"gg_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"gg_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.gg_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.gg_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.gg_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\form.js",["1751","1752","1753","1754"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        uom_id:0,\r\n        uom: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                uom: groupValues.uom,\r\n                uom_id: groupValues.uom_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_unit\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\" ID\" name=\"uom_id\" value={groupValues.uom_id}disabled onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\" Name\" name=\"uom\" value={groupValues.uom} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\browse.js",["1755","1756","1757","1758","1759"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_unit\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_unit\",\r\n        { uom_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_unit\",\r\n        { uom_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"uom_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"uom\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.uom_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.uom_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.uom_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\form.js",["1760","1761","1762","1763"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        p_group_id:0,\r\n        p_group_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                p_group_name: groupValues.p_group_name,\r\n                p_group_id: groupValues.p_group_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_pgroup\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Group ID\" name=\"p_group_id\"disabled value={groupValues.p_group_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Group Name\" name=\"p_group_name\" value={groupValues.p_group_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\browse.js",["1764","1765","1766","1767","1768"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_pgroup\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_pgroup\",\r\n        { p_group_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_pgroup\",\r\n        { p_group_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"p_group_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"p_group_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.p_group_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.p_group_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.p_group_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\form.js",["1769","1770","1771","1772"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        item_id:0,\r\n        item_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                item_name: groupValues.item_name,\r\n                item_id: groupValues.item_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_item\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Item ID\" name=\"item_id\" value={groupValues.item_id}disabled onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Item Name\" name=\"item_name\" value={groupValues.item_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\form.js",["1773","1774","1775","1776"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        status_id:0,\r\n        status_name: \"\",\r\n        description: \"\"\r\n\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                status_name: groupValues.status_name,\r\n                status_id: groupValues.status_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_enq_status\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Status ID\" name=\"status_id\" value={groupValues.status_id}disabled onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Status Name\" name=\"status_name\" value={groupValues.status_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                {/* <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div> */}\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\browse.js",["1777","1778","1779","1780","1781"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_item\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_item\",\r\n        { item_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_item\",\r\n        { item_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"item_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"item_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.item_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.item_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.item_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\browse.js",["1782","1783","1784","1785","1786"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_enq_status\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_enq_status\",\r\n        { status_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_enq_status\",\r\n        { status_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"status_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"status_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n          \r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.status_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.status_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.status_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\form.js",["1787","1788","1789","1790"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        enq_priority_id:0,\r\n        enq_priority: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                // user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                enq_priority: groupValues.enq_priority,\r\n                enq_priority_id: groupValues.enq_priority_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_enq_priority\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Priority ID\" name=\"enq_priority_id\"disabled value={groupValues.enq_priority_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Priority Name\" name=\"enq_priority\" value={groupValues.enq_priority} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\browse.js",["1791","1792","1793","1794","1795"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_enq_priority\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_enq_priority\",\r\n        { enq_priority_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_enq_priority\",\r\n        { enq_priority_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"enq_priority_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"enq_priority\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.enq_priority_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.enq_priority_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.enq_priority_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\form.js",["1796","1797","1798","1799"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        enq_ref_id:0,\r\n        enq_ref: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                enq_ref: groupValues.enq_ref,\r\n                enq_ref_id: groupValues.enq_ref_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_enq_reference\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n        setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Reference ID\" name=\"enq_ref_id\" value={groupValues.enq_ref_id} disabled onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Reference Name\" name=\"enq_ref\" value={groupValues.enq_ref} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                {/* <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div> */}\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\browse.js",["1800","1801","1802","1803","1804"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_enq_reference\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_enq_reference\",\r\n        { enq_ref_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_enq_reference\",\r\n        { enq_ref_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"enq_ref_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"enq_ref\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n           \r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.enq_ref_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.enq_ref_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.enq_ref_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\browse.js",["1805","1806","1807","1808","1809"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_category\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_category\",\r\n        { p_category_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_category\",\r\n        { p_category_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"p_category_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"p_category_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.p_category_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.p_category_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.p_category_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\form.js",["1810","1811","1812","1813"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    console.log(props.editData)\r\n    const [groupValues, setGroupValues] = useState({\r\n        p_category_id:0,\r\n        p_category_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                p_category_name: groupValues.p_category_name,\r\n                p_category_id: groupValues.p_category_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_category\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n        setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Category ID\" name=\"p_category_id\"disabled value={groupValues.p_category_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Category Name\" name=\"p_category_name\" value={groupValues.p_category_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\index.js",["1814","1815","1816"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DeliveryChallanMdcBrowse from \"./browse\";\r\nimport AddDeliveryChallanMdc from \"./mdc-add\";\r\n\r\nconst ChallanIndexMdc = ({ type }) => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(1);\r\n            }}\r\n          >\r\n            Manufacturing DC\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          \r\n            <DeliveryChallanMdcBrowse/>\r\n        \r\n        ) : (\r\n        \r\n        <AddDeliveryChallanMdc/>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallanIndexMdc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\browse.js",["1817","1818","1819","1820","1821","1822","1823","1824","1825","1826"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst DeliveryChallanMdcBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  console.log(browseListData)\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/mdc/browsemdc\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          console.log(data)\r\n          setTotalRecords(data.totalrecord);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"widget-container\">\r\n        <div className=\"widget-box first\">\r\n          <span>Amount</span>\r\n          <p>{currenyMasking(amountFigures.amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box second\">\r\n          <span>MDC Amount</span>\r\n          <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box third\">\r\n          <span>Actual Amount</span>\r\n          <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n        </div>\r\n      </div> */}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"dc_no\",\r\n              headerName: \"D.C No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"so_no\",\r\n              headerName: \"So No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n           \r\n            {\r\n              field: \"party_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"carrier\",\r\n              headerName: \"Carrier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"vehicle\",\r\n              headerName: \"Vehicle No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"value\",\r\n              headerName: \"Value\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"approved\",\r\n              headerName: \"Approved\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"status\",\r\n              headerName: \"Status\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"comments\",\r\n              headerName: \"Comments\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeliveryChallanMdcBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\mdc-add.js",["1827","1828","1829","1830","1831"],"import {\r\n  Button,\r\n  TextField,\r\n  Fab,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete,} from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\nconst AddDeliveryChallanMdc = ({ challanType }) => {\r\n  const [tableList, settableList] = useState([]);\r\n  const [formData, setFormData] = useState({\r\n    date: \"\",\r\n    dc_no: \"\",\r\n    po_no: \"\",\r\n    po_date: \"\",\r\n    courier: \"\",\r\n    vehicle_no: \"\",\r\n    contact_person: \"\",\r\n    cperson_id: \"\",\r\n    remarks: \"\",\r\n    no_of_box: \"\",\r\n    value: \"\",\r\n    box_no: \"\",\r\n    description: \"\",\r\n    qty: \"\",\r\n   \r\n  });\r\nconst [contactlist, setcontactlist] = useState(null)\r\nconst [saleslist, setsaleslist] = useState(null)\r\n  const [showDIList, setShowDIList] = useState(false);\r\n  const [accountList, setaccountList] = useState([]);\r\n  const [salesOrderList, setsalesOrderList] = useState([])\r\n  const toggleDIList = () => setShowDIList(!showDIList);\r\n  const submitAddBox = () => {\r\n          if (formData.box_no===\"\") {\r\n          showErrorToast(\"Please Enter Box No\");\r\n        }else if (formData.description===\"\") {\r\n          showErrorToast(\"Please Enter description\");\r\n        }else if (formData.qty===\"\") {\r\n          showErrorToast(\"Please Enter Quality\");\r\n         } else{\r\n          settableList([\r\n            ...tableList,\r\n            {\r\n              box_no: formData.box_no,\r\n              description: formData.description,\r\n              qty: formData.qty,\r\n            },\r\n          ]);\r\n          setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n         }\r\n  };\r\n \r\n  const handleChange = (event) => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value });\r\n  };\r\n  const handleDateChange = (name, date) => {\r\n    setFormData({ ...formData, [name]: date });\r\n  };\r\n \r\n  const handleDeleteTable = (e) => {\r\n    tableList.splice(tableList.indexOf(e), 1);\r\n    settableList([...tableList]);\r\n  };\r\n\r\n  const diListColumn = [\r\n    {\r\n      id: \"box_no\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Box No\",\r\n    },\r\n    {\r\n      id: \"description\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Description\",\r\n    },\r\n    {\r\n      id: \"qty\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Qty\",\r\n    },\r\n  ];\r\n\r\n  const getDCNo = async () => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistics/dc/generateDc\",\r\n        {},\r\n        \"get\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setFormData({ ...formData, dc_no: data.data.dc_no });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  //Party name\r\n  const getCompanyList = async (search) => {\r\n    // setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistic/mdc/accountlist\",\r\n        { search:search},\r\n        \"get\",\r\n        \"node\"\r\n      ).then((data) => {\r\n  console.log(data)\r\n        if (data.status === 200) {\r\n          setaccountList(data.result);\r\n          console.log(accountList)\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const getSalesOrder = async (search) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistic/mdc/picksomdc?search=\" + search,\r\n        \"\",\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setsalesOrderList(data.result)\r\n        }\r\n      }).catch(err=>{\r\n        showErrorToast(err.message)\r\n      })\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  //contact list\r\n  const getAccountContactList = async () => {\r\n\r\n    try {\r\n     \r\n      let search=contactlist.company_id;\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistic/mdc/accountcontactlist\",\r\n        { search:search},\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setFormData({\r\n            ...formData,\r\n            cperson_id: data.result.cperson_id,\r\n            contact_person: data.result.cperson_name,\r\n          });\r\n        }else{\r\n         showErrorToast(data.message)\r\n        }\r\n      }).catch(err=>{\r\n        showErrorToast(err)\r\n      })\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const submitMdc = async () => {\r\n    try {\r\n      if (formData.po_no === \"\") {\r\n        showErrorToast(\"Please Enter Po No\");\r\n      }else if (formData.po_date === \"\") {\r\n        showErrorToast(\"Please Enter Po Date\");\r\n      }  else if (tableList.length < 0) {\r\n        showErrorToast(\"Please add box\");\r\n      } else if (formData.remarks === \"\") {\r\n        showErrorToast(\"Please enter remarks\");\r\n      } else if (contactlist.company_name === \"\") {\r\n        showErrorToast(\"Please Select Party Name\");\r\n      } else if (formData.courier === \"\") {\r\n        showErrorToast(\"Please Enter Courier\");\r\n      } else if (formData.vehicle_no === \"\") {\r\n        showErrorToast(\"Please Enter Vehicle NO\");\r\n      } else if (formData.contact_person === \"\") {\r\n        showErrorToast(\"Please Enter Contact Person\");\r\n      } else if (formData.no_of_box === \"\") {\r\n        showErrorToast(\"Please Enter No Of Box\");\r\n      \r\n      } else if (formData.value === \"\") {\r\n        showErrorToast(\"Please Enter Value\");\r\n      \r\n      } else {\r\n        const body = {\r\n          tran_id: \"0\",\r\n          date:moment().format(\"MM/DD/YYYY\"),\r\n          dc_no: formData.dc_no,\r\n          so_id:saleslist.tran_id,\r\n          company_id:contactlist.company_id,\r\n          company_name:contactlist.company_name,\r\n          cperson_id: formData.cperson_id,\r\n          cperson_name: formData.contact_person,\r\n          po_no: formData.po_no,\r\n          po_date: formData.po_date,\r\n          carrier: formData.courier,\r\n          vehicle: formData.vehicle_no,\r\n          remarks: formData.remarks,\r\n          noofbox: formData.no_of_box,\r\n          value: formData.value,\r\n          user_name: localStorage.getItem(\"userName\"),\r\n          manuDcDetail: tableList,\r\n          user_id: localStorage.getItem(\"userId\"),\r\n        };\r\n        await CommonController.commonApiCallFilter(\r\n          \"logistic/mdc/insertmdc\",\r\n          body,\r\n          \"post\",\r\n          \"node\"\r\n        )\r\n          .then((result) => {\r\n            if (result.status === 200) {\r\n              showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n              // window.location.reload();\r\n              settableList([])\r\n              setFormData({\r\n                ...formData,\r\n                date: \"\",\r\n                po_no: \"\",\r\n                po_date: \"\",\r\n                courier: \"\",\r\n                vehicle_no: \"\",\r\n                contact_person: \"\",\r\n                cperson_id: \"\",\r\n                remarks: \"\",\r\n                no_of_box: \"\",\r\n               \r\n                value: \"\",\r\n             \r\n              \r\n              });\r\n              setsaleslist(null)\r\n              setcontactlist(null)\r\n            } else {\r\n              showErrorToast(result.message.code);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            showErrorToast(err);\r\n          });\r\n      }\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getAccountContactList();\r\n\r\n  }, [contactlist]);\r\n\r\n  useEffect(() => {\r\n    getDCNo();\r\n  }, []);\r\n\r\n \r\n \r\n\r\n  const {\r\n    dc_no,\r\n    po_no,\r\n    courier,\r\n    po_date,\r\n    vehicle_no,\r\n    contact_person,\r\n    remarks,\r\n    no_of_box,\r\n    value,\r\n    box_no,\r\n    description,\r\n    qty,\r\n  } = formData;\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row mt-5\">\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Date\"\r\n            disabled\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={moment().format(\"MM/DD/YYYY\")}\r\n            size=\"small\"\r\n            name=\"date\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"DC NO.\"\r\n            disabled\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={dc_no}\r\n            name={\"dc_no\"}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"PO No.\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={po_no}\r\n            name=\"po_no\"\r\n            size=\"small\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <DatePicker\r\n            label=\"PO Date\"\r\n            // value={po_date}\r\n            format=\"dd/MM/yyyy\"\r\n            onChange={(date) => handleDateChange(\"po_date\", date)}\r\n            animateYearScrolling\r\n            inputVariant=\"outlined\"\r\n            size=\"small\"\r\n            autoOk\r\n            fullWidth\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mb-3\">\r\n        <Autocomplete\r\n              id=\"combo-box-demo\"\r\n              options={accountList}\r\n              fullWidth\r\n              size=\"small\"\r\n              getOptionLabel={(option) =>option.company_name}\r\n              value={contactlist}\r\n              onChange={(e, value) => setcontactlist(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onInput={(e) => {\r\n                    debounce(getCompanyList(e.target.value, 200));\r\n                  }}\r\n                  label=\"Party Name\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          {/* <TextField\r\n            label=\"Party Name\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={party_name}\r\n            name=\"party_name\"\r\n            // disabled\r\n            onChange={handleChange}\r\n            select\r\n          >\r\n            {accountList.map((val) => (\r\n              <MenuItem key={val.company_id} value={val.company_name}>\r\n                {val.company_name}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField> */}\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Courier\"\r\n            fullWidth\r\n            onChange={handleChange}\r\n            value={courier}\r\n            variant=\"outlined\"\r\n            name=\"courier\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Vehicle No\"\r\n            fullWidth\r\n            value={vehicle_no}\r\n            onChange={handleChange}\r\n            name={\"vehicle_no\"}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mb-3\">\r\n          <TextField\r\n            label=\"Contact Person\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={contact_person}\r\n            name={\"contact_person\"}\r\n            size=\"small\"\r\n            onChange={handleChange}\r\n            // select\r\n          >\r\n            {/* <MenuItem value=\"ab\">ab</MenuItem> */}\r\n          </TextField>\r\n        </div>\r\n\r\n        <div className=\"col-md-6 mb-3\">\r\n          <TextField\r\n            label=\"Remarks\"\r\n            value={remarks}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"remarks\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mb-3\">\r\n          <TextField\r\n            label=\"No Of Box\"\r\n            value={no_of_box}\r\n            name=\"no_of_box\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n        <Autocomplete\r\n              id=\"combo-box-demo\"\r\n              options={salesOrderList}\r\n              fullWidth\r\n              getOptionLabel={(option) =>option.so_no}\r\n              value={saleslist}\r\n              onChange={(e, value) => setsaleslist(value)}\r\n              sx={{ height:20 }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onChange={(e) => {\r\n                    debounce(getSalesOrder(e.target.value));\r\n                  }}\r\n                  label=\"Sales Order\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          {/* <TextField\r\n            label=\"Sales Order\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={sales_order}\r\n            onChange={handleChange}\r\n            name=\"sales_order\"\r\n            size=\"small\"\r\n            select\r\n          >\r\n           {salesOrderList.map((val,i)=>( <MenuItem key={i }value={val.so_no}> {val.so_no}</MenuItem>))}\r\n          </TextField> */}\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Value\"\r\n            fullWidth\r\n            value={value}\r\n            name=\"value\"\r\n            variant=\"outlined\"\r\n            onChange={handleChange}\r\n            size=\"small\"\r\n            multiline\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {tableList.length > 0 ? (\r\n        <SimpleTable\r\n          columns={diListColumn}\r\n          rows={tableList}\r\n          onDelete={handleDeleteTable}\r\n        />\r\n      ) : null}\r\n      <hr />\r\n      <div className=\"container-fluid\">\r\n        {/* <h1>Add Box:</h1> */}\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"Box No\"\r\n              fullWidth\r\n              onChange={handleChange}\r\n              value={box_no}\r\n              variant=\"outlined\"\r\n              name=\"box_no\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 mb-3\">\r\n            <TextField\r\n              label=\"Description\"\r\n              fullWidth\r\n              onChange={handleChange}\r\n              value={description}\r\n              variant=\"outlined\"\r\n              name=\"description\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"Qty\"\r\n              fullWidth\r\n              onChange={handleChange}\r\n              value={qty}\r\n              variant=\"outlined\"\r\n              name=\"qty\"\r\n              type=\"number\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-2 mb-3 pl-5\">\r\n            <Button\r\n              color=\"primary\"\r\n              // className=\"mr-2\"\r\n              // disableElevation\r\n              variant=\"contained\"\r\n              onClick={submitAddBox}\r\n            >\r\n              Add New\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* <div className=\"float-action-btn\">\r\n          <Fab\r\n            variant=\"extended\"\r\n            onClick={addBox}\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n          >\r\n            <AddIcon />\r\n            Add Box\r\n          </Fab>\r\n        </div> */}\r\n\r\n      <hr />\r\n      <div className=\"w-100 mt-3 text-right\">\r\n        <Button\r\n          color=\"primary\"\r\n          className=\"mr-2\"\r\n          disableElevation\r\n          variant=\"contained\"\r\n          onClick={submitMdc}\r\n        >\r\n          Save\r\n        </Button>\r\n        <Button color=\"primary\" disableElevation variant=\"contained\">\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddDeliveryChallanMdc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\index.js",["1832","1833"],"import React, { useState } from \"react\";\r\nimport SlWipAdd from \"./add\";\r\n\r\nimport SlWipBrowse from \"./browse\";\r\n\r\n\r\nexport default function SlWipIndex({slType}) {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(1);\r\n            }}\r\n          >\r\n           {`New ${slType} WIP` }\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? <SlWipBrowse slType={slType}/> : <SlWipAdd />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\index.js",["1834","1835"],"import React,{useState} from 'react'\r\nimport MrnAddDc from './add';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function MrnDcIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        New Material Receipt Note\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <MrnBrowseDc/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <MrnAddDc/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\add.js",["1836","1837","1838","1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst MrnAddDc = ({ challanType }) => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MrnAddDc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\browse.js",["1850","1851","1852","1853","1854","1855","1856","1857","1858","1859"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst MrnBrowseDc = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_mrn_dc\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totaldata);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"widget-container\">\r\n        <div className=\"widget-box first\">\r\n          <span>Amount</span>\r\n          <p>{currenyMasking(amountFigures.amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box second\">\r\n          <span>MDC Amount</span>\r\n          <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box third\">\r\n          <span>Actual Amount</span>\r\n          <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n        </div>\r\n      </div> */}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n             \r\n            },\r\n         \r\n\r\n            {\r\n              field: \"mrn_no\",\r\n              headerName: \"MRN No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mrn_date\",\r\n              headerName: \"MRN Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Comp ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.po_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            {\r\n                field: \"status\",\r\n                headerName: \"Status\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_date\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.docket_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default MrnBrowseDc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\index.js",["1860","1861","1862"],"import React,{useState} from 'react'\r\nimport RgpBrowseDc from './browse';\r\n\r\nimport RrgpAdd from './rrgp/add';\r\n\r\n\r\n\r\nexport default function ReturnableIndex() {\r\n    const challanType = new URLSearchParams(window.location.search).get(\"type\");\r\n    const [index, setindex] = useState(0)\r\n    // const history = useHistory();\r\n    // console.log(challanType);\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={\r\n                            `nav-link ` +\r\n                            (index === 0\r\n                                ? \"active\"\r\n                                : \"\")\r\n                        }\r\n                        onClick={() => {\r\n                            // window.location.href = `/logistics/delivery-challan?type=${encodeURIComponent(\r\n                            //   \"SL\" \r\n                            // )}`;\r\n                            setindex(0)\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={\r\n                            `nav-link ` +\r\n                            (index === 1 ? \"active\" : \"\")\r\n                        }\r\n                        onClick={() =>\r\n                            // (window.location.href = `/logistics/delivery-challan?type=${encodeURIComponent(\r\n                            //   \"Non SL\"\r\n                            // )}`)\r\n                            setindex(1)\r\n                        }\r\n                    >\r\n                        Returnable Gate Pass\r\n                    </a>\r\n                </li>\r\n              \r\n              \r\n               \r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {/* {(index === 0 || index === 1) && <ChallanIndex\r\n                    type={challanType ? decodeURIComponent(challanType) : \"SL\"}\r\n                />}  */}\r\n                \r\n                {  index===0&& <RgpBrowseDc/>}\r\n                {  index===1&& <RrgpAdd/>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\add.js",["1863","1864","1865","1866","1867","1868","1869","1870","1871","1872","1873","1874","1875","1876"],"F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\browse.js",["1877","1878","1879","1880","1881","1882","1883","1884","1885","1886"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst RgpBrowseDc = () => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_rgp\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n                field: \"date\",\r\n                headerName: \"Date\",\r\n                width: 100,\r\n                renderCell: (params) => {\r\n                  return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n                },\r\n              },\r\n            {\r\n              field: \"rgp_no\",\r\n              headerName: \"RGP No.\",\r\n              width: 120,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Package\",\r\n              headerName: \"Package\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"Transport\",\r\n                headerName: \"Transport\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Attachement\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default RgpBrowseDc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\index.js",["1887","1888","1889","1890"],"import React,{useState} from 'react'\r\nimport JobWorkAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport JobWorkBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function JobWorkIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                    Job Work In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <JobWorkBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <JobWorkAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\subIndex.js",["1891","1892","1893","1894"],"import React,{useState} from 'react'\r\nimport JobWorkAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport JobWorkBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function JobWorkSubIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                    Job Work In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <JobWorkBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <JobWorkAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n",["1895","1896"],"F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\add.js",["1897","1898","1899","1900","1901","1902","1903","1904","1905","1906","1907","1908","1909","1910"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst JobWorkAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JobWorkAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\browse.js",["1911","1912","1913","1914","1915","1916","1917","1918","1919","1920"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst JobWorkBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_jwin\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"widget-container\">\r\n        <div className=\"widget-box first\">\r\n          <span>Amount</span>\r\n          <p>{currenyMasking(amountFigures.amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box second\">\r\n          <span>MDC Amount</span>\r\n          <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box third\">\r\n          <span>Actual Amount</span>\r\n          <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n        </div>\r\n      </div> */}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n\r\n            {\r\n              field: \"jwin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Ref Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.ref_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"Destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Attachement\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobWorkBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\index.js",["1921","1922","1923","1924"],"import React,{useState} from 'react'\r\nimport CcrAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport CcrBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function CcrInIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        CCR In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CcrBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CcrAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\index.js",["1925","1926"],"import React,{useState} from 'react'\r\nimport CourierAdd from './add'\r\nimport CourierBrowse from './browse'\r\nexport default function CourierInIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                \r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        Courier In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CourierBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CourierAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\subIndex.js",["1927","1928","1929","1930"],"import React,{useState} from 'react'\r\nimport CcrAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport CcrBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function CcrSubIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        CCR In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CcrBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CcrAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\subIndex.js",[],"F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\add.js",["1931","1932","1933","1934","1935","1936","1937","1938","1939","1940","1941","1942","1943","1944"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst CourierAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourierAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\browse.js",["1945","1946","1947","1948","1949","1950","1951","1952","1953","1954"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst CourierBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_courierin\",\r\n         params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n   \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"tran_no\",\r\n              headerName: \"Tran No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n           \r\n            // {\r\n            //   field: \"so_no\",\r\n            //   headerName: \"So No\",\r\n            //   width: 120,\r\n            // },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Description\",\r\n              headerName: \"Description\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"box_no\",\r\n              headerName: \"Box No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"no_of_packets\",\r\n              headerName: \"No Of Packets\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 120,\r\n            },\r\n\r\n            // {\r\n            //   field: \"comments\",\r\n            //   headerName: \"Comments\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CourierBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\add.js",["1955","1956","1957","1958","1959","1960","1961","1962","1963","1964","1965","1966","1967","1968"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst CcrAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CcrAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\browse.js",["1969","1970","1971","1972","1973","1974","1975","1976","1977","1978"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst CcrBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_ccrin\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n  \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n\r\n            {\r\n              field: \"ccrin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"cperson_name\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_no\",\r\n              headerName: \"Notification No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_date\",\r\n              headerName: \"Notification Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.notification_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"carrier\",\r\n                headerName: \"carrier\",\r\n                width: 120,\r\n              },\r\n              {\r\n                field: \"destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CcrBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\index.js",["1979","1980","1981","1982","1983","1984"],"import React,{useState} from 'react'\r\nimport CcrAdd from './add';\r\nimport CcrOutAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport CcrOutBrowse from './browse';\r\nimport CcrBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function CcrOutIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        CCR Out\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CcrOutBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CcrOutAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\add.js",["1985","1986","1987","1988","1989","1990","1991","1992","1993","1994","1995","1996","1997","1998"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst CcrOutAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CcrOutAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\browse.js",["1999","2000","2001","2002","2003","2004","2005","2006","2007","2008"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\n// import { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst CcrOutBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_ccrout\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n              field: \"ccrout_no\",\r\n              headerName: \"JWOUT No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ccrin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"cperson_name\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_no\",\r\n              headerName: \"Notification No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_date\",\r\n              headerName: \"Notification Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.notification_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"carrier\",\r\n                headerName: \"carrier\",\r\n                width: 120,\r\n              },\r\n              {\r\n                field: \"destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CcrOutBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\index.js",["2009","2010"],"import React,{useState} from 'react'\r\n\r\nimport CourierOutBrowse from './browse';\r\nimport CourierOutAdd from './add'\r\n\r\nexport default function CourierOutIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        Courier Out\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CourierOutBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CourierOutAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\index.js",["2011","2012"],"import React,{useState} from 'react'\r\nimport CourierInvoiceBrowse from './browse'\r\nimport CourierInvoiceAdd from './add'\r\nexport default function CourierInvoiceIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        Courier Invoice\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                <CourierInvoiceBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CourierInvoiceAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\browse.js",["2013","2014","2015","2016","2017","2018","2019","2020","2021","2022"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst CourierOutBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  console.log(browseListData)\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_courierout\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n     \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"tran_no\",\r\n              headerName: \"Tran No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n           \r\n            // {\r\n            //   field: \"so_no\",\r\n            //   headerName: \"So No\",\r\n            //   width: 120,\r\n            // },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Description\",\r\n              headerName: \"Description\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"box_no\",\r\n              headerName: \"Box No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"no_of_packets\",\r\n              headerName: \"No Of Packets\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 120,\r\n            },\r\n\r\n            // {\r\n            //   field: \"comments\",\r\n            //   headerName: \"Comments\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n          \r\n          ]}  \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CourierOutBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\add.js",["2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst CourierOutAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourierOutAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\add.js",["2037","2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst CourierInvoiceAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourierInvoiceAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\browse.js",["2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst CourierInvoiceBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  console.log(browseListData)\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_courierinvoice\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n     \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"mrn_no\",\r\n              headerName: \"MRN No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mrn_date\",\r\n              headerName: \"MRN Date\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"comp_id\",\r\n              headerName: \"Comp ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"status\",\r\n                headerName: \"Status\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_date\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CourierInvoiceBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\index.js",["2062","2063"],"import React,{useState} from 'react'\r\nimport JobWorkOutAdd from './add';\r\nimport JobWorkOutBrowse from './browse';\r\n\r\nexport default function JobWorkOutIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                    Job Work Out\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <JobWorkOutBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <JobWorkOutAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\add.js",["2064","2065","2066","2067","2068","2069","2070","2071","2072","2073","2074","2075","2076","2077"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst JobWorkOutAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JobWorkOutAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\browse.js",["2078","2079","2080","2081","2082","2083","2084","2085","2086","2087"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst JobWorkOutBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_jwout\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n              field: \"jwout_no\",\r\n              headerName: \"JWOUT No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"jwin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Ref Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.ref_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"Destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Attachement\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobWorkOutBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\index.js",["2088","2089"],"import React,{useState} from 'react'\r\nimport MrnPoAdd from './add';\r\n\r\nimport MrnPoBrowse from './browse';\r\n\r\nexport default function MrnPoIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        New MRN(PO)\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <MrnPoBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <MrnPoAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\add.js",["2090","2091","2092","2093","2094","2095","2096","2097","2098","2099","2100","2101","2102","2103"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst MrnPoAdd = ({ challanType }) => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MrnPoAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\browse.js",["2104","2105","2106","2107","2108","2109","2110","2111","2112","2113"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst MrnPoBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_mrn_po\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totaldata);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n   \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n             \r\n            },\r\n         \r\n\r\n            {\r\n              field: \"mrn_no\",\r\n              headerName: \"MRN No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mrn_date\",\r\n              headerName: \"MRN Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Comp ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.po_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            {\r\n                field: \"status\",\r\n                headerName: \"Status\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_date\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.docket_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n\r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default MrnPoBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\index.js",["2114","2115","2116","2117","2118","2119"],"import React, { useState } from \"react\";\r\nimport RgpAdd from \"./add\";\r\nimport RrgpAdd from \"./add\";\r\nimport MrnAddDc from \"./add\";\r\nimport RrgpBrowse from \"./browse\";\r\nimport RgpBrowseDc from \"./browse\";\r\nimport MrnBrowseDc from \"./browse\";\r\n\r\nexport default function RrgpIndex() {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(1);\r\n            }}\r\n          >\r\n            Return Of Returnable Gate Pass{\" \"}\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? <RrgpBrowse /> : <RrgpAdd/>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\add.js",["2120","2121","2122","2123","2124","2125","2126","2127","2128","2129","2130","2131","2132","2133"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst RrgpAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RrgpAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\browse.js",["2134","2135","2136","2137","2138","2139","2140","2141","2142"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst RrgpBrowse = () => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_rgp\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n          setAmountFigures({\r\n            amount: data.amount,\r\n            mdc_amount: data.mdc_amount,\r\n            actual_amount: data.actual_amount,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n    \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n                field: \"date\",\r\n                headerName: \"Date\",\r\n                width: 100,\r\n                renderCell: (params) => {\r\n                  return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n                },\r\n              },\r\n              {\r\n                field: \"rrgp_no\",\r\n                headerName: \"RRGP No.\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"rgp_no\",\r\n              headerName: \"RGP No.\",\r\n              width: 120,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"gate_no\",\r\n              headerName: \"Gate No\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"challan_no\",\r\n                headerName: \"Challan No\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"bill_no\",\r\n              headerName: \"Bill No\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"Status\",\r\n            //   headerName: \"Status\",\r\n            //   width: 120,\r\n            // },\r\n            // {\r\n            //   field: \"Attachement\",\r\n            //   headerName: \"Docket No.\",\r\n            //   width: 150,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default RrgpBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\browse.js",["2143","2144","2145","2146","2147","2148","2149","2150","2151"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst SlWipBrowse = ({slType}) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:false,\r\n    status: \"\",\r\n    approval:\"\",\r\n    sl_type:\"\"\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (sl) => {\r\n\r\n      setBodyParam({...bodyParam,sl_type:sl})\r\n     \r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistics/dc/browseWip\",\r\n        params,\r\n        bodyParam,\r\n        \"node\"\r\n      ).then((data) => {\r\n    \r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totaldata);\r\n          \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    handleBodyParam(slType)\r\n  \r\n  }, [slType]);\r\n \r\n\r\n  useEffect(() => {\r\n    \r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"SR. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n                field: \"date\",\r\n                headerName: \"Date\",\r\n                width: 100,\r\n                renderCell: (params) => {\r\n                  return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n                },\r\n              },\r\n\r\n            {\r\n              field: \"dc_no\",\r\n              headerName: \"DC No\",\r\n              width: 120,\r\n            },\r\n         \r\n            {\r\n              field: \"Company\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"sales_order\",\r\n              headerName: \"Sales Order\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"so_date\",\r\n                headerName: \"So Date\",\r\n                width: 120,\r\n                renderCell:(params)=>{\r\n                  return moment(params.row.so_date).format(\"DD/MM/YYYY\");\r\n                }\r\n              },\r\n              {\r\n                field: \"ref_date\",\r\n                headerName: \"Ref Date\",\r\n                width: 120,\r\n                renderCell:(params)=>{\r\n                  return moment(params.row.ref_date).format(\"DD/MM/YYYY\");\r\n                }\r\n              },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"di_no\",\r\n              headerName: \"DI No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"pi_no\",\r\n              headerName: \"PI No.\",\r\n              width: 150,\r\n            },\r\n            \r\n            {\r\n              field: \"dis_through\",\r\n              headerName: \"Dispatch Thr\",\r\n              width: 120,\r\n            }, {\r\n              field: \"Destination\",\r\n              headerName: \"Destination\",\r\n              width: 120,\r\n            }, {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"amount\",\r\n              headerName: \"Amount\",\r\n              width: 120,\r\n            },{\r\n              field: \"mdc_amount\",\r\n              headerName: \"MDC Amount\",\r\n              width: 120,\r\n            },{\r\n              field: \"actual_amount\",\r\n              headerName: \"Actual Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default SlWipBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\add.js",["2152","2153","2154","2155","2156","2157","2158","2159","2160","2161","2162","2163","2164","2165"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst SlWipAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SlWipAdd;\r\n","F:\\React code\\diagnostic\\src\\components\\third_menu.js",["2166"],"import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ThirdMenu = (props) => {\r\n  const { list, onMenuChange } = props;\r\n  const selectedMenu = window.location.pathname.split(\"/\")[1];\r\n  const id1 = window.location.pathname.split(\"/\")[2];\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[3];\r\n  const id2 = window.location.pathname.split(\"/\")[4];\r\n  const thirdMenu = window.location.pathname.split(\"/\")[5];\r\n\r\n  return (\r\n    <div className=\"header-bottom third\">\r\n      <div className=\"px-3\">\r\n        <div className=\"header-navs header-navs-left\">\r\n          <ul className=\"menu-nav mb-0 list-unstyled d-flex flex-wrap\">\r\n            {list.length > 0\r\n              ? list.map((item, index) => {\r\n                  if (item.level ===3) {\r\n                    // console.log(\r\n                    //   item.transaction_name\r\n                    //     .replace(/[^a-zA-Z ]/g, \"\")\r\n                    //     .replace(/\\s+/g, \"-\")\r\n                    //     .toLowerCase()\r\n                    // ); \r\n                  \r\n                    return (\r\n                      <li className=\"menu-item\" key={\"sublist\" + index}>\r\n                        <Link\r\n                          onClick={onMenuChange}\r\n                          className={\r\n                            \"menu-link py-2 px-4 rounded mr-2 d-inline-block \" +\r\n                            (thirdMenu ===\r\n                            item.transaction_name\r\n                              .replace(/[^a-zA-Z ]/g, \"\")\r\n                              .replace(/\\s+/g, \"-\")\r\n                              .toLowerCase()\r\n                              ? \"bg-danger text-white\"\r\n                              : \"\")\r\n                          }\r\n                          to={`/${selectedMenu?.toLowerCase()}/${id1}/${selectedSubMenu?.toLowerCase()}/${id2}/${item.transaction_name\r\n                            .replace(/[^a-zA-Z ]/g, \"\")\r\n                            .replace(/\\s+/g, \"-\")\r\n                            .toLowerCase()}/${item.transaction_id}`}\r\n                        >\r\n                          {\" \"}\r\n                          <span className=\"menu-text\">\r\n                            {item.transaction_name}\r\n                          </span>\r\n                        </Link>\r\n                      </li>\r\n                    );\r\n                  }\r\n                })\r\n              : null}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThirdMenu;\r\n\r\n// + (selectedSubMenu === (item.transaction_name.replace(/\\s+/g, '-').toLowerCase()) ? \"active\" : \"\")\r\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\index.js",["2167","2168","2169"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesQuotationBrowse from \"./browse\";\n\n\n\nconst SalesQuotationIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Quotation\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesQuotationBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesQuotationIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\index.js",["2170","2171","2172"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSoAmdBrowse from \"./browse\";\n\nconst SalesSoAmdIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SO Amendment\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSoAmdBrowse/>\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSoAmdIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\browse.js",["2173","2174","2175","2176","2177","2178","2179","2180","2181","2182","2183","2184","2185"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesQuotationBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesQuotationBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\browse.js",["2186","2187","2188","2189","2190","2191","2192","2193","2194","2195","2196","2197","2198"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSoAmdBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSoAmdBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\index.js",["2199","2200","2201"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesMarketingBrowse from \"./browse\";\n\nconst SalesMarketingIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n\n            New Marketing Visit\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesMarketingBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesMarketingIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\browse.js",["2202","2203","2204","2205","2206","2207","2208","2209","2210","2211"],"import {\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesMarketingBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesMarketingBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\index.js",["2212","2213","2214"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesIssueBrowse from \"./browse\";\n\n\nconst SalesIssueIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n            >\n            New Marketing Visit\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesIssueBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesIssueIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\browse.js",["2215","2216","2217","2218","2219","2220","2221","2222"],"import {\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\nconst SalesIssueBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesIssueBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\index.js",["2223","2224","2225"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SoDetailBrowse from \"./browse\";\n\nconst SoDetail = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New So Detail\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SoDetailBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SoDetail;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\browse.js",["2226","2227","2228","2229","2230","2231","2232","2233","2234","2235","2236","2237","2238"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SoDetailBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SoDetailBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\index.js",["2239","2240","2241","2242"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSlSoPosSummariseBrowse from \"./browse\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesSlSoPosSummariseIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SO POS Summarize\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSlSoPosSummariseBrowse/>\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSlSoPosSummariseIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\index.js",["2243","2244","2245","2246"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSiDiBrowse from \"./browse\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesSiDiIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SL DI\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSiDiBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSiDiIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\index.js",["2247","2248","2249","2250"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSlSoPosBrowse from \"./browse\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesSlSoPosIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SO POS\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSlSoPosBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSlSoPosIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\browse.js",["2251","2252","2253","2254","2255","2256","2257","2258","2259","2260","2261","2262","2263"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSiDiBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSiDiBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\browse.js",["2264","2265","2266","2267","2268","2269","2270","2271","2272","2273","2274","2275","2276"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSlSoPosBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                      \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                      \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSlSoPosBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\browse.js",["2277","2278","2279","2280","2281","2282","2283","2284","2285","2286","2287","2288","2289"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSlSoPosSummariseBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSlSoPosSummariseBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\index.js",["2290","2291","2292","2293","2294","2295","2296","2297","2298","2299","2300","2301","2302","2303"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport IdClauseIndex from \"./ldClause\";\r\nimport FrightIndex from \"./fright\";\r\nimport InsuranceIndex from \"./insurance\";\r\nimport OctrolIndex from \"./octrol\";\r\nimport Pfindex from \"./p&f\";\r\nimport LoadingIndex from \"./loading\";\r\nimport BoardingIndex from \"./boarding\";\r\nimport TravelChargeIndex from \"./travelCharge\";\r\nimport ConveyanceIndex from \"./conveyance\";\r\nimport PaymentTermsIndex from \"./paymentTerms\";\r\nimport DeliveryIndex from \"./delivery\";\r\nimport ValidityIndex from \"./validity\";\r\nimport ModeOfDispatchIndex from \"./modeOfDispatch\";\r\nimport InspectionIndex from \"./inspection\";\r\n\r\n\r\n// const panel = [\r\n//   {\r\n//     name: \"Group\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Pin Code\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Region\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Rating\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Department\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Designation\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Siemens\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Supply Items\",\r\n//     component: \"\",\r\n//   },\r\n// ];\r\n\r\nconst ConfigSalesOrder = ({list}) => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <IdClauseIndex/>;\r\n        break;\r\n      case 1:\r\n        return < FrightIndex/>;\r\n        break;\r\n      case 2:\r\n        return <InsuranceIndex />;\r\n        break;\r\n      case 3:\r\n        return <OctrolIndex />;\r\n        break;\r\n      case 4:\r\n        return <Pfindex />;\r\n        break;\r\n      case 5:\r\n        return <LoadingIndex />;\r\n        break;\r\n      case 6:\r\n        return <BoardingIndex/>;\r\n        break;\r\n      case 7:\r\n        return <TravelChargeIndex />;\r\n        break;\r\n        case 8:\r\n          return <ConveyanceIndex />;\r\n          break;\r\n          case 9:\r\n            return <PaymentTermsIndex />;\r\n            break;\r\n            case 10:\r\n              return <DeliveryIndex />;\r\n              break;\r\n              case 11:\r\n                return <ValidityIndex />;\r\n                break;\r\n                case 12:\r\n                  return <ModeOfDispatchIndex />;\r\n                  break;\r\n                  case 13:\r\n                    return <InspectionIndex />;\r\n                    break;\r\n                   \r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {list.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.display_name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigSalesOrder;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\fright\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\ldClause\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\insurance\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\octrol\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\loading\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\boarding\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\travelCharge\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\delivery\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\paymentTerms\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\p&f\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\modeOfDispatch\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\validity\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\inspection\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\conveyance\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\fright\\browse.js",["2304","2305","2306","2307","2308"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_freight\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_freight\",\r\n        { freight_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_freight\",\r\n        { freight_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"freight_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"freight_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.freight_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.freight_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.freight_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\ldClause\\browse.js",["2309","2310","2311"],"import { TextField} from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_clasue\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_clasue\",\r\n        { ld_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_clasue\",\r\n        { ld_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ld_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"ld_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.ld_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.ld_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.ld_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\ldClause\\form.js",["2312","2313","2314","2315"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        ld_id:0,\r\n        ld_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                ld_name: groupValues.ld_name,\r\n                ld_id: groupValues.ld_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_clasue\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Ld Clause ID\" name=\"ld_id\"disabled value={groupValues.ld_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Ld Clause Name\" name=\"ld_name\" value={groupValues.ld_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\insurance\\browse.js",["2316","2317","2318","2319","2320"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_insurance\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_insurance\",\r\n        { insurance_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_insurance\",\r\n        { insurance_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"insurance_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"insurance_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.insurance_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.insurance_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.insurance_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\fright\\form.js",["2321","2322","2323","2324"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\n\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        freight_id:0,\r\n        freight_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                // user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                freight_name: groupValues.freight_name,\r\n                freight_id: groupValues.freight_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_freight\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Freight ID\" name=\"freight_id\"disabled value={groupValues.freight_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Freight Name\" name=\"freight_name\" value={groupValues.freight_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\octrol\\browse.js",["2325","2326","2327","2328","2329"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_octroi\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_octroi\",\r\n        { octroi_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_octroi\",\r\n        { octroi_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"octroi_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"octroi_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.octroi_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.octroi_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.octroi_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\insurance\\form.js",["2330","2331","2332","2333"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst AddOrEditGroup = (props) => {\r\n  const [groupValues, setGroupValues] = useState({\r\n    insurance_id:0,\r\n    insurance_name: \"\",\r\n    description: \"\",\r\n  });\r\n  const [showMessage, setMessage] = useState({\r\n    type: \"\",\r\n    msg: \"\",\r\n  });\r\n  const insertForm = async () => {\r\n    try {\r\n      let body = {\r\n        user_name: localStorage.getItem(\"userName\"),\r\n        user_id: localStorage.getItem(\"userId\"),\r\n        description: groupValues.description,\r\n        insurance_name: groupValues.insurance_name,\r\n        insurance_id: groupValues.insurance_id,\r\n      };\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/insert_sale_insurance\",\r\n        body,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((result) => {\r\n        if (result.status == 200) {\r\n          showSuccessToast(result.message);\r\n          props.onClose(0);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (props.editData) {\r\n      setGroupValues(props.editData);\r\n    }\r\n  }, [props.editData]);\r\n  const onSave = () => {\r\n    insertForm();\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setGroupValues({\r\n      ...groupValues,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const onCancelClick = () => {\r\n    props.onClose(0);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Insurance ID\"\r\n              disabled\r\n              name=\"insurance_id\"\r\n              value={groupValues.insurance_id}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Insurance Name\"\r\n              name=\"insurance_name\"\r\n              value={groupValues.insurance_name}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              multiline\r\n              label=\"Description\"\r\n              value={groupValues.description}\r\n              onChange={handleOnChange}\r\n              name=\"description\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mt-3 text-right\">\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"mr-2\"\r\n              onClick={onCancelClick}\r\n              disableElevation\r\n            >\r\n              Cancel\r\n            </Button>\r\n            {groupValues.type == \"preview\" ? (\r\n              \"\"\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={onSave}\r\n                color=\"primary\"\r\n                disableElevation\r\n              >\r\n                Save\r\n              </Button>\r\n            )}\r\n          </div>\r\n          {showMessage.type != \"\" ? (\r\n            <Alert severity={showMessage.type}>{showMessage.msg}</Alert>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddOrEditGroup;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\octrol\\form.js",["2334","2335","2336","2337"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        octroi_id:0,\r\n        octroi_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                octroi_name: groupValues.octroi_name,\r\n                octroi_id: groupValues.octroi_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_octroi\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Octroi ID\" name=\"octroi_id\"disabled value={groupValues.octroi_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Octroi Name\" name=\"octroi_name\" value={groupValues.octroi_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\boarding\\form.js",["2338","2339","2340","2341"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        boarding_id:0,\r\n        boarding_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                boarding_name: groupValues.boarding_name,\r\n                boarding_id: groupValues.boarding_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_boarding\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Boarding ID\" name=\"boarding_id\"disabled value={groupValues.boarding_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Boarding Name\" name=\"boarding_name\" value={groupValues.boarding_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\boarding\\browse.js",["2342","2343","2344","2345","2346"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_boarding\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_boarding\",\r\n        { boarding_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_boarding\",\r\n        { boarding_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"boarding_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"boarding_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.boarding_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.boarding_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.boarding_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\loading\\browse.js",["2347","2348","2349","2350","2351"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_loading\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_loading\",\r\n        { loading_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_loading\",\r\n        { loading_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"loading_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"group_loading\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.loading_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.loading_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.loading_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\travelCharge\\browse.js",["2352","2353","2354","2355","2356"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_travel\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_travel\",\r\n        { travel_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_travel\",\r\n        { travel_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"travel_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"travel_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.travel_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.travel_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.travel_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\travelCharge\\form.js",["2357","2358","2359","2360"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        travel_id:0,\r\n        travel_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                travel_name: groupValues.travel_name,\r\n                travel_id: groupValues.travel_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_travel\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Travel ID\" name=\"travel_id\"disabled value={groupValues.travel_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Travel Name\" name=\"travel_name\" value={groupValues.travel_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\delivery\\browse.js",["2361","2362","2363","2364","2365"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_delivery\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_delivery\",\r\n        { delivery_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_delivery\",\r\n        { delivery_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"delivery_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"delivery_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.delivery_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.delivery_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.delivery_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\delivery\\form.js",["2366","2367","2368","2369"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        delivery_id:0,\r\n        delivery_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                delivery_name: groupValues.delivery_name,\r\n                delivery_id: groupValues.delivery_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_delivery\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Delivery ID\" name=\"delivery_id\"disabled value={groupValues.delivery_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Delivery Name\" name=\"delivery_name\" value={groupValues.delivery_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\paymentTerms\\browse.js",["2370","2371","2372","2373","2374"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_payment\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_payment\",\r\n        { payment_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_payment\",\r\n        { payment_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"payment_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"payment_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.payment_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.payment_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.payment_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\paymentTerms\\form.js",["2375","2376","2377","2378"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        payment_id:0,\r\n        payment_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                payment_name: groupValues.payment_name,\r\n                payment_id: groupValues.payment_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_payment\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Payment ID\"disabled name=\"payment_id\" value={groupValues.payment_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Payment Name\" name=\"payment_name\" value={groupValues.payment_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\p&f\\browse.js",["2379","2380","2381","2382","2383"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_pf\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_pf\",\r\n        { pf_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_pf\",\r\n        { pf_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"pf_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"pf_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.pf_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.pf_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.pf_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\p&f\\form.js",["2384","2385","2386","2387"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        pf_id:0,\r\n        pf_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                pf_name: groupValues.pf_name,\r\n                pf_id: groupValues.pf_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_pf\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Pf ID\" name=\"pf_id\"disabled value={groupValues.pf_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Pf Name\" name=\"pf_name\" value={groupValues.pf_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\modeOfDispatch\\browse.js",["2388","2389","2390","2391","2392"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_mode\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_mode\",\r\n        { mode_of_dispatch_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_mode\",\r\n        { mode_of_dispatch_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"mode_of_dispatch_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"mode_of_dispatch_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.mode_of_dispatch_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.mode_of_dispatch_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.mode_of_dispatch_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\modeOfDispatch\\form.js",["2393","2394","2395","2396"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        mode_of_dispatch_id:0,\r\n        mode_of_dispatch_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                mode_of_dispatch_name: groupValues.mode_of_dispatch_name,\r\n                mode_of_dispatch_id: groupValues.mode_of_dispatch_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_mode\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Mode Of Dispatch ID\" name=\"mode_of_dispatch_id\"disabled value={groupValues.mode_of_dispatch_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Mode Of Dispatch Name\" name=\"mode_of_dispatch_name\" value={groupValues.mode_of_dispatch_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\validity\\browse.js",["2397","2398","2399","2400","2401"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_validity\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_validity\",\r\n        { validity_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_validity\",\r\n        { validity_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"validity_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"validity_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.validity_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.validity_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.validity_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\loading\\form.js",["2402","2403","2404","2405"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        loading_id:0,\r\n        loading_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                loading_name: groupValues.loading_name,\r\n                loading_id: groupValues.loading_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_loading\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Loading ID\" name=\"loading_id\"disabled value={groupValues.loading_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Loading Name\" name=\"loading_name\" value={groupValues.loading_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\validity\\form.js",["2406","2407","2408","2409"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        validity_id:0,\r\n        validity_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                validity_name: groupValues.validity_name,\r\n                validity_id: groupValues.validity_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_validity\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Validity ID\" name=\"validity_id\"disabled value={groupValues.validity_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Validity Name\" name=\"validity_name\" value={groupValues.validity_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\inspection\\form.js",["2410","2411","2412","2413"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        inspection_id: 0,\r\n        inspection_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                inspection_name: groupValues.inspection_name,\r\n                inspection_id: groupValues.inspection_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_inspection\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Inspection ID\" name=\"inspection_id\"disabled value={groupValues.inspection_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Inspection Name\" name=\"inspection_name\" value={groupValues.inspection_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\conveyance\\browse.js",["2414","2415","2416"],"import { TextField} from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_conveyance\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_conveyance\",\r\n        { conveyance_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_conveyance\",\r\n        { conveyance_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"conveyance_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"conveyance_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.conveyance_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.conveyance_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.conveyance_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\conveyance\\form.js",["2417","2418","2419","2420"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        conveyance_id:0,\r\n        conveyance_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                conveyance_name: groupValues.conveyance_name,\r\n                conveyance_id: groupValues.conveyance_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_sale_conveyance\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n            setGroupValues(props.editData)\r\n            }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Conveyance ID\" name=\"conveyance_id\"disabled value={groupValues.conveyance_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Conveyance Name\" name=\"conveyance_name\" value={groupValues.conveyance_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\salesOrder\\inspection\\browse.js",["2421","2422","2423","2424","2425"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_sale_inspection\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_sale_inspection\",\r\n        { inspection_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_sale_inspection\",\r\n        { inspection_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"inspection_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"inspection_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.inspection_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.inspection_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.inspection_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\subIndex.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\form.js",["2426","2427","2428","2429"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        status_id:0,\r\n        status_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                status_name: groupValues.status_name,\r\n                status_id: groupValues.status_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_quot\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n        setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Status ID\" name=\"status_id\"disabled value={groupValues.status_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Status Name\" name=\"status_name\" value={groupValues.status_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\quotation\\browse.js",["2430","2431","2432","2433","2434"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_quot\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_quot\",\r\n        { status_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_quot\",\r\n        { status_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"status_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"status_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 450,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.status_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.status_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.status_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\subIndex.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\browse.js",["2435","2436","2437","2438","2439"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_courier\",\r\n        params,\r\n        \"\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_courier\",\r\n        { courier_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_courier\",\r\n        { courier_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"courier_id\",\r\n              headerName: \"ID\",\r\n              flex: 10,\r\n            },\r\n            {\r\n              field: \"courier_name\",\r\n              headerName: \"Name\",\r\n              width: 450,\r\n            },\r\n            // {\r\n            //   field: \"description\",\r\n            //   headerName: \"Description\",\r\n            //   width: 450,\r\n            // },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.courier_id)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt mr-2\"\r\n                    onClick={() => onDelete(params.row.courier_id)}\r\n                  ></i>\r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.courier_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\courier\\form.js",["2440","2441","2442","2443"],"import React, { useEffect, useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { CommonController } from '../../../../_redux/controller/common.controller';\r\nimport { showErrorToast, showSuccessToast } from '../../../../components/common';\r\nconst AddOrEditGroup = (props) => {\r\n    const [groupValues, setGroupValues] = useState({\r\n        courier_id:0,\r\n        courier_name: \"\",\r\n        description: \"\"\r\n    });\r\n    const [showMessage, setMessage] = useState({\r\n        type: \"\",\r\n        msg: \"\"\r\n    })\r\n    const insertForm = async () => {\r\n        try {\r\n            let body = {\r\n                // user_name: localStorage.getItem(\"userName\"),\r\n                user_id: localStorage.getItem(\"userId\"),\r\n                description: groupValues.description,\r\n                courier_name: groupValues.courier_name,\r\n                courier_id: groupValues.courier_id\r\n            }\r\n            await CommonController.commonApiCallFilter(\r\n                \"master/insert_courier\",\r\n                body,\r\n                \"post\",\r\n                \"node\"\r\n            ).then(result => {\r\n                if (result.status == 200) {\r\n                    showSuccessToast(result.message)\r\n                    props.onClose(0);\r\n                }\r\n            })\r\n        } catch (err) {\r\n            showErrorToast(err)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if(props.editData){\r\n        setGroupValues(props.editData)\r\n        }\r\n    }, [props.editData]);\r\n    const onSave = () => {\r\n        insertForm()\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setGroupValues({\r\n            ...groupValues,\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n    const onCancelClick = () => {\r\n        props.onClose(0);\r\n    }\r\n    return <React.Fragment>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Courier ID\" name=\"courier_id\"disabled value={groupValues.courier_id} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <TextField label=\"Courier Name\" name=\"courier_name\" value={groupValues.courier_name} onChange={handleOnChange} fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div>\r\n                {/* <div className=\"col-md-4\">\r\n                    <TextField multiline label=\"Description\" value={groupValues.description} onChange={handleOnChange} name=\"description\" fullWidth variant=\"outlined\" size=\"small\" />\r\n                </div> */}\r\n                <div className=\"col-md-12 mt-3 text-right\">\r\n                    <Button variant=\"contained\" className=\"mr-2\" onClick={onCancelClick} disableElevation>Cancel</Button>\r\n                    {groupValues.type == \"preview\" ? \"\" : <Button variant=\"contained\" onClick={onSave} color=\"primary\" disableElevation>Save</Button>}\r\n                </div>\r\n                {showMessage.type != \"\" ? <Alert severity={showMessage.type}>{showMessage.msg}</Alert> : null}\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n}\r\nexport default AddOrEditGroup;","F:\\React code\\diagnostic\\src\\components\\leftModal.js",["2444","2445","2446"],"import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport SwipeableDrawer from \"@mui/material/SwipeableDrawer\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport LogoutIcon from \"@mui/icons-material/Logout\";\r\nimport PersonIcon from \"@mui/icons-material/Person\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport CameraAltIcon from \"@mui/icons-material/CameraAlt\";\r\nimport SettingsIcon from \"@mui/icons-material/Settings\";\r\nimport LockResetIcon from \"@mui/icons-material/LockReset\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport KeyIcon from '@mui/icons-material/Key';\r\nimport user from \"../assets/image/user.jpg\";\r\nimport { Avatar, Grid, Input, Stack, TextField } from \"@mui/material\";\r\nimport { memo } from \"react\";\r\nimport moment from \"moment/moment\";\r\nimport { nodeUrl } from \"../config\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport { showSuccessToast } from \"./common\";\r\nimport {Typography } from \"@material-ui/core\";\r\nfunction SwipeableTemporaryDrawer({ leftTrue, profileList, updateImage }) {\r\n  const id = localStorage.getItem(\"userId\");\r\n  const [state, setState] = React.useState({\r\n    right: false,\r\n  });\r\nconst [ modalPassword, setmodalPassword] = React.useState(false)\r\n  const [modal, setmodal] = React.useState(false);\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    console.log();\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n  const handleSubmitPassword=()=>{\r\n    console.log(\"cvbnm,\")\r\n  }\r\n  const handelUpdateImage = async (e) => {\r\n    let value = e.target.files[0];\r\n    let formData = new FormData();\r\n    formData.append(\"file_path\", value);\r\n    formData.append(\"user_id\", id);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${nodeUrl}user/user_image_upload`,\r\n      data: formData,\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    }).then((data) => {\r\n      if (data.status === 200) {\r\n        showSuccessToast(data.message);\r\n        updateImage();\r\n      }\r\n    });\r\n  };\r\n  const handleLogOut = () => {\r\n    localStorage.clear();\r\n    window.location = \"/login\";\r\n  };\r\n  const handleModalClose = () => {\r\n    setmodal(false);\r\n  };\r\n  React.useEffect(() => {\r\n    setState(leftTrue);\r\n    toggleDrawer(\"right\", state.right);\r\n  }, [leftTrue]);\r\n  const list = (anchor) => (\r\n    <Box\r\n      sx={{ width: anchor === \"top\" || anchor === \"bottom\" ? \"auto\" : 250 }}\r\n      role=\"presentation\"\r\n      // onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <h4 className=\"py-5 ml-3\">Profile</h4>\r\n      <Divider />\r\n      {/* <img src={user} class=\"rounded mx-auto d-block py-5\" alt=\"...\"></img> */}\r\n      <div>\r\n        <Avatar\r\n          alt=\"Remy Sharp\"\r\n          className=\"mx-auto d-block m-3\"\r\n          src={`${nodeUrl + profileList.image_path}`}\r\n          sx={{ width: 120, height: 120 }}\r\n        />\r\n        <div className=\"custom_edit\">\r\n          <label htmlFor=\"file-upload\" style={{ cursor: \"pointer\" }}>\r\n            <CameraAltIcon for=\"file-upload\" fontSize=\"large\" />\r\n          </label>\r\n          <Input\r\n            id=\"file-upload\"\r\n            type=\"file\"\r\n            sx={{ display: \"none\" }}\r\n            onChange={handelUpdateImage}\r\n          />\r\n        </div>\r\n      </div>\r\n      {/* {profileList.map(value=>{})} */}\r\n      {/* <Typography>xcvbnm</Typography> */}\r\n      <list\r\n        sx={{ width: \"100%\", maxWidth: 360, bgcolor: \"background.paper\" }}\r\n        component=\"nav\"\r\n        // onClose={toggleDrawer(\"right\", false)}\r\n        aria-labelledby=\"nested-list-subheader\"\r\n      >\r\n        {/* <ListItemButton onClick={() =>{ setmodal(true);toggleDrawer(\"right\", false)}}> */}\r\n        <ListItemButton\r\n          onClick={() => {\r\n            setmodal(true);\r\n          }}\r\n        >\r\n          <ListItemIcon>\r\n            <PersonIcon />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary=\"Profile\"\r\n            onClick={toggleDrawer(\"right\", false)}\r\n          />\r\n        </ListItemButton>\r\n        <ListItemButton onClick={()=>setmodalPassword(true)}>\r\n          <ListItemIcon>\r\n            <LockResetIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Reset Password\"\r\n          onClick={toggleDrawer(\"right\", false)}\r\n          />\r\n        </ListItemButton>\r\n        <ListItemButton>\r\n          <ListItemIcon>\r\n            <SettingsIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"Setting\" />\r\n        </ListItemButton>\r\n        <ListItemButton onClick={handleLogOut}>\r\n          <ListItemIcon>\r\n            <LogoutIcon />\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"LogOut\" />\r\n        </ListItemButton>\r\n      </list>\r\n    </Box>\r\n  );\r\n  return (\r\n    <div>\r\n      <SwipeableDrawer\r\n        anchor={\"right\"}\r\n        open={state.right}\r\n        onClose={toggleDrawer(\"right\", false)}\r\n        onOpen={toggleDrawer(\"right\", true)}\r\n      >\r\n        {list(\"right\")}\r\n      </SwipeableDrawer>\r\n      <Modal\r\n        show={modal}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        {/* <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Modal heading\r\n        </Modal.Title>\r\n      </Modal.Header> */}\r\n        <Avatar\r\n          alt=\"Remy Sharp\"\r\n          className=\"mx-auto d-block m-3\"\r\n          src={`${nodeUrl + profileList.image_path}`}\r\n          sx={{ width: 150, height: 150 }}\r\n        />\r\n        <Modal.Body>\r\n          <Grid\r\n            container\r\n            rowSpacing={2}\r\n            columnSpacing={{ xs: 1, sm: 2, md: 3 }}\r\n          >\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Name\"\r\n                value={profileList.first_name + \" \" + profileList.last_name}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Mobile No\"\r\n                value={profileList.mobile}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Email\"\r\n                value={profileList.email}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"D.O.B\"\r\n                value={moment(profileList.dob).format(\"DD/MM/YYYY\")}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Gender\"\r\n                value={profileList.gender}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Department Name\"\r\n                value={profileList.department_name}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Relationship\"\r\n                value={profileList.m_status}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Father Or Husband Name\"\r\n                value={profileList.Father_husband_name}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <TextField\r\n                id=\"standard-multiline-flexible\"\r\n                label=\"Mother Name\"\r\n                value={profileList.mother_name}\r\n                variant=\"standard\"\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button onClick={handleModalClose}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal\r\n        show={modalPassword}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Body>\r\n          {/* <Stack\r\n            spacing={2}\r\n            direction=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\"\r\n          >\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <stack spacing={2}>\r\n              <Button onClick={handleModalClose}>Close</Button>\r\n              <Button onClick={handleModalClose}>Close</Button>\r\n            </stack>\r\n          </Stack> */}\r\n\r\n<Box\r\n          sx={{\r\n            // marginTop: ,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 2, bgcolor: '#3949ac' }}>\r\n            {/* <LockOutlinedIcon /> */}\r\n            <KeyIcon/>\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h2\">\r\n            Reset Password\r\n          </Typography>\r\n          <Box component=\"form\" noValidate sx={{ mt: 1 }}>\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"password\"\r\n              placeholder=\"Password\"\r\n              label=\"New Password\"\r\n              name=\"password\"\r\n              // autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n              label=\"Confirm Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <Grid container spacing={2}>\r\n              <Grid item >\r\n              <Button\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={handleSubmitPassword}\r\n              >\r\n                Continue\r\n               </Button>\r\n              </Grid>\r\n              <Grid item>\r\n               <Button\r\n              variant=\"text\"\r\n              color=\"error\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n              onClick={()=>{setmodalPassword(false)}}>\r\n                Cancel\r\n               </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n        </Modal.Body>\r\n        {/* <Modal.Footer>\r\n          <Button onClick={handleModalClose}>Close</Button>\r\n        </Modal.Footer> */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nexport default memo(SwipeableTemporaryDrawer);\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\tcs.js",["2447","2448","2449"],"import { Button } from \"@material-ui/core\";\nimport { Autocomplete, TextField } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nexport const TCSAccount = ({ accountType }) => {\n  const [companyList, setCompanyList] = useState([]);\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [formData, setformData] = useState({\n    company_id:0,\n    tcs_per: \"\",\n    company_name:\"\"\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"master/browse_account_master_tcs\",\n      params,\n      { account_type: accountType },\n      \"node\"\n    )\n      .then((data) => {\n        if (data.status === 200) {\n          setBrowseListData(data.data);\n          setTotalRecords(data.totalRecords);\n        }\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n  const saveForm = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"master/insert_account_master_tcs\",\n        formData,\n        \"post\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          showSuccessToast(\"success\");\n          getBrowseListData();\n          setformData({...formData, tcs_per: \"\" });\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n  useEffect(() => {\n    getBrowseListData();\n  }, [accountType, params]);\n  useEffect(() => {\n    CommonController.commonApiCallFilter(\n      \"master/list_account_master_tcs\",\n      \"\",\n      \"post\",\n      \"node\"\n    ).then((data) => {\n      if (data.status === 200){\n        setCompanyList(data[accountType]);\n      } \n    });\n  }, []);\n  return (\n    <div className=\"py-3\">\n      <div className=\"row\">\n        <div className=\"col-md-3 ml-3\">\n          <Autocomplete\n            size=\"small\"\n            options={companyList}\n            getOptionLabel={(option) => option.company_name}\n            fullWidth\n            value={formData.company_name!=\"\"?{company_name:formData.company_name ,company_id:formData.company_id}:null}\n            onChange={(event, value) =>\n              setformData({ ...formData, company_id: value.company_id ,company_name:value.company_name})\n            }\n            variant=\"outlined\"\n            renderInput={(params) => (\n              <TextField {...params} label=\"Company Name\" variant=\"outlined\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"tcs(%)\"\n            fullWidth\n            // disabled\n            variant=\"outlined\"\n            size=\"small\"\n            value={formData.tcs_per}\n            onChange={(e) =>\n              setformData({ ...formData, tcs_per: e.target.value })\n            }\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <Button\n            variant=\"contained\"\n            onClick={saveForm}\n            color=\"primary\"\n            disableElevation\n          >\n            Submit\n          </Button>\n        </div>\n      </div>\n      <hr />\n      <div className=\"col-md-3 mb-5\">\n        <TextField\n          label=\"Search\"\n          fullWidth\n          // disabled\n          variant=\"outlined\"\n          size=\"small\"\n          name=\"company_id\"\n          value={params.filter_value}\n          onChange={(e)=>setParams({...params,filter_value:e.target.value})}\n        />\n      </div>\n      <div style={{ height: 500, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"company_id\",\n              headerName: \"ID\",\n              width: 300,\n              hide: false,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 700,\n              hide: false,\n            },\n            {\n              field: \"tcs_per\",\n              headerName: \"TCS Per\",\n              width: 400,\n              hide: false,\n            },\n            {\n              field: \"\",\n              headerName: \"Action\",\n              width: 180,\n              hide: false,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          getRowClassName={(params) => {\n            return params.row.sr_no % 2 === 0 ? \"even\" : \"odd\";\n          }}\n          rowsPerPageOptions={[1]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          // onColumnVisibilityChange={(e) => handleColumnHide(e)}\n\n          rows={browseListData} //accountMasterList\n          getRowId={(browseListData) => browseListData.company_id}\n        />\n      </div>\n    </div>\n  );\n};\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\menustructure\\index.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\menustructure\\browse.js",["2450","2451","2452","2453","2454","2455","2456","2457","2458","2459","2460","2461"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n// import {\r\n//   CommonController,\r\n// } from \"../../../../\";\r\nimport {\r\n  CommonController,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\r\nimport {\r\n  debounce,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../components/common\";\r\nconst ConfigGroupBrowse = ({ type, onEdit, onPreviewData }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const getBrowseListData = async () => {\r\n    const id=localStorage.getItem(\"userId\")\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"master/browse_menu\",\r\n        params,\r\n        {user_id:id},\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setBrowseListData(data.data);\r\n            setTotalRecords(data.totalRecords);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  const onDelete = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/delete_category\",\r\n        { p_category_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            getBrowseListData();\r\n            showSuccessToast(\"Success Delete\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const onPreview = async (id) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/preview_category\",\r\n        { p_category_id: id },\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((result) => {\r\n          if (result.status == 200) {\r\n            onPreviewData(...result.data);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          {/* <DateFilter onDateUpdate={() => getBrowseListData()} /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"transaction_id\",\r\n              headerName: \"ID\",\r\n              width: 100,\r\n            },\r\n            {\r\n              field: \"display_name\",\r\n              headerName: \"Display Name\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"transaction_name\",\r\n              headerName: \"Transaction Name\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"parent_transaction\",\r\n              headerName: \"Parent Name\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"level\",\r\n              headerName: \"Level\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"main_form\",\r\n              headerName: \"Main Form\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"sequence\",\r\n              headerName: \"Sequence\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <div className=\"action_btns\">\r\n                  {/* <i\r\n                    className=\"fas fa-search mr-2\"\r\n                    onClick={() => onPreview(params.row.p_category_id)}\r\n                  ></i> */}\r\n                  <i\r\n                    className=\"far fa-edit mr-2\"\r\n                    onClick={() => onEdit(params.row)}\r\n                  ></i>\r\n                 \r\n                </div>\r\n              ),\r\n              width: 150,\r\n            },\r\n          ]}\r\n          // pagination\r\n          \r\n          disableColumnFilter\r\n          // pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          // rowsPerPageOptions={[10, 15, 25, 100]}\r\n          getRowClassName={(params) => {\r\n            return params.row.sr_no % 2 === 0 ? \"even\" : \"odd\";\r\n          }}\r\n          // rowCount={totalRecord}\r\n          // paginationMode=\"server\"\r\n          // onPageSizeChange={handlePageSizeChange}\r\n          // onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          // components={\r\n          //   browseListData.length > 0\r\n          //     ? {\r\n          //         Pagination: CustomPagination,\r\n          //         NoRowsOverlay: CustomNoRowsOverlay,\r\n          //       }\r\n          //     : {}\r\n          // }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) => browseListData.transaction_id}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default ConfigGroupBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\menustructure\\form.js",["2462","2463","2464","2465","2466","2467","2468"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button, MenuItem, Checkbox, FormControlLabel} from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../components/common\";\r\n\r\n\r\nconst AddOrEditGroup = (props) => {\r\n  const [groupValues, setGroupValues] = useState({\r\n    transaction_id: 0,\r\n    transaction_name: \"\",\r\n    display_name: \"\",\r\n    sequence: null,\r\n    parent_id:null,\r\n    main_form:null,\r\n    level:null\r\n  });\r\n  const [listtransection, setlisttransection] = useState([])\r\n  const [showMessage, setMessage] = useState({\r\n    type: \"\",\r\n    msg: \"\",\r\n  });\r\n  const insertForm = async () => {\r\n    try {\r\n      let body = {...groupValues}\r\n        body.user_id= localStorage.getItem(\"userId\")\r\n  \r\n      await CommonController.commonApiCallFilter(\r\n        \"master/insert_menu\",\r\n        body,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((result) => {\r\n        if (result.status == 200) {\r\n          showSuccessToast(result.message);\r\n          props.onClose(0);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const listTransection = async () => {\r\n    try {\r\n\r\n      let body = {\r\n        transaction_id: groupValues.transaction_id,\r\n      };\r\n      await CommonController.commonApiCallFilter(\r\n        \"master/list_transection\",\r\n        body,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((result) => {\r\n        if (result.status == 200) {\r\n            setlisttransection(result.data)\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (props.editData) {\r\n      setGroupValues(props.editData);\r\n      listTransection()\r\n    }\r\n  }, [props.editData]);\r\n  const onSave = () => {\r\n    insertForm();\r\n  };\r\n  const handleOnChange = (event) => {\r\n    console.log(event.target.value)\r\n    console.log(event.target.name)\r\n    setGroupValues({\r\n      ...groupValues,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n  const onCancelClick = () => {\r\n    props.onClose(0);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Transaction ID\"\r\n              name=\"transaction_id\"\r\n              disabled\r\n              value={groupValues.transaction_id}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              label=\"Display Name\"\r\n              name=\"display_name\"\r\n              value={groupValues.display_name}\r\n              onChange={handleOnChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4\">\r\n            <TextField\r\n              multiline\r\n              label=\"sequence\"\r\n              value={groupValues.sequence}\r\n              onChange={handleOnChange}\r\n              name=\"sequence\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              type=\"number\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 py-5\">\r\n            <TextField\r\n              multiline\r\n              label=\"Level\"\r\n              value={groupValues.level}\r\n              onChange={handleOnChange}\r\n              name=\"level\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              type=\"number\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 py-5\">\r\n            <TextField\r\n            //  id=\"outlined-select-currency\"\r\n             select\r\n             label=\"Parent Id\"\r\n             onChange={handleOnChange}\r\n              name=\"parent_id\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              SelectProps={{\r\n                native: true,\r\n              }}\r\n            >\r\n              <option value={groupValues.parent_id}>{groupValues.parent_transaction}</option>\r\n                {listtransection.map(val=>(\r\n                    <option key={val.transaction_id} value={val.transaction_id}>{val.transaction_name}</option>\r\n                ))}\r\n            </TextField>\r\n          </div>\r\n          <div className=\"col-md-4 py-5\">\r\n          {/* <FormControlLabel control={<Checkbox color=\"primary\" checked={groupValues.main_form ===true}/>} label=\"Main Form\" /> */}\r\n          <FormControlLabel control={<Checkbox color=\"primary\"checked={groupValues.main_form ===true} onChange={(e)=>setGroupValues({...groupValues,main_form:e.target.checked})}/>} label=\"Main Form\" />\r\n          </div>\r\n          <div className=\"col-md-12 mt-3 text-right\">\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"mr-2\"\r\n              onClick={onCancelClick}\r\n              disableElevation\r\n            >\r\n              Cancel\r\n            </Button>\r\n            {groupValues.type == \"preview\" ? (\r\n              \"\"\r\n            ) : (\r\n              <Button\r\n                variant=\"contained\"\r\n                onClick={onSave}\r\n                color=\"primary\"\r\n                disableElevation\r\n              >\r\n                Save\r\n              </Button>\r\n            )}\r\n          </div>\r\n          {showMessage.type != \"\" ? (\r\n            <Alert severity={showMessage.type}>{showMessage.msg}</Alert>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default AddOrEditGroup;\r\n",{"ruleId":"2469","replacedBy":"2470"},{"ruleId":"2471","replacedBy":"2472"},{"ruleId":"2473","severity":1,"message":"2474","line":7,"column":8,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2477","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2478","line":17,"column":10,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2479","line":17,"column":22,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":35},{"ruleId":"2473","severity":1,"message":"2480","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2481","line":24,"column":10,"nodeType":"2475","messageId":"2476","endLine":24,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2482","line":24,"column":25,"nodeType":"2475","messageId":"2476","endLine":24,"endColumn":41},{"ruleId":"2483","severity":1,"message":"2484","line":32,"column":6,"nodeType":"2485","endLine":32,"endColumn":8,"suggestions":"2486"},{"ruleId":"2473","severity":1,"message":"2487","line":48,"column":13,"nodeType":"2475","messageId":"2476","endLine":48,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2488","line":54,"column":9,"nodeType":"2475","messageId":"2476","endLine":54,"endColumn":25},{"ruleId":"2473","severity":1,"message":"2489","line":6,"column":10,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2490","line":13,"column":21,"nodeType":"2475","messageId":"2476","endLine":13,"endColumn":33},{"ruleId":"2483","severity":1,"message":"2491","line":76,"column":4,"nodeType":"2485","endLine":76,"endColumn":27,"suggestions":"2492"},{"ruleId":"2483","severity":1,"message":"2491","line":98,"column":4,"nodeType":"2485","endLine":98,"endColumn":26,"suggestions":"2493"},{"ruleId":"2494","severity":1,"message":"2495","line":110,"column":8,"nodeType":"2496","endLine":110,"endColumn":50},{"ruleId":"2494","severity":1,"message":"2495","line":144,"column":11,"nodeType":"2496","endLine":144,"endColumn":86},{"ruleId":"2473","severity":1,"message":"2497","line":2,"column":8,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":18},{"ruleId":"2483","severity":1,"message":"2484","line":26,"column":3,"nodeType":"2485","endLine":26,"endColumn":22,"suggestions":"2498"},{"ruleId":"2483","severity":1,"message":"2484","line":35,"column":3,"nodeType":"2485","endLine":35,"endColumn":34,"suggestions":"2499"},{"ruleId":"2473","severity":1,"message":"2500","line":2,"column":117,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":132},{"ruleId":"2473","severity":1,"message":"2501","line":2,"column":134,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":156},{"ruleId":"2473","severity":1,"message":"2502","line":2,"column":198,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":227},{"ruleId":"2473","severity":1,"message":"2503","line":57,"column":15,"nodeType":"2475","messageId":"2476","endLine":57,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2503","line":68,"column":15,"nodeType":"2475","messageId":"2476","endLine":68,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2503","line":78,"column":15,"nodeType":"2475","messageId":"2476","endLine":78,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2504","line":33,"column":15,"nodeType":"2475","messageId":"2476","endLine":33,"endColumn":26},{"ruleId":"2483","severity":1,"message":"2505","line":38,"column":5,"nodeType":"2485","endLine":38,"endColumn":7,"suggestions":"2506"},{"ruleId":"2507","severity":1,"message":"2508","line":17,"column":9,"nodeType":"2496","endLine":21,"endColumn":11},{"ruleId":"2507","severity":1,"message":"2508","line":22,"column":9,"nodeType":"2496","endLine":26,"endColumn":11},{"ruleId":"2509","severity":1,"message":"2510","line":14,"column":40,"nodeType":"2511","messageId":"2512","endLine":14,"endColumn":42},{"ruleId":"2473","severity":1,"message":"2513","line":8,"column":3,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":7},{"ruleId":"2473","severity":1,"message":"2514","line":9,"column":3,"nodeType":"2475","messageId":"2476","endLine":9,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2515","line":14,"column":8,"nodeType":"2475","messageId":"2476","endLine":14,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2516","line":16,"column":8,"nodeType":"2475","messageId":"2476","endLine":16,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2517","line":21,"column":10,"nodeType":"2475","messageId":"2476","endLine":21,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2518","line":57,"column":9,"nodeType":"2475","messageId":"2476","endLine":57,"endColumn":13},{"ruleId":"2473","severity":1,"message":"2519","line":66,"column":9,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":19},{"ruleId":"2483","severity":1,"message":"2520","line":106,"column":5,"nodeType":"2485","endLine":106,"endColumn":7,"suggestions":"2521"},{"ruleId":"2483","severity":1,"message":"2522","line":217,"column":128,"nodeType":"2485","endLine":217,"endColumn":141,"suggestions":"2523"},{"ruleId":"2473","severity":1,"message":"2524","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2525","line":1,"column":27,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2526","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2527","line":2,"column":23,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":34},{"ruleId":"2473","severity":1,"message":"2528","line":3,"column":35,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":44},{"ruleId":"2473","severity":1,"message":"2529","line":13,"column":10,"nodeType":"2475","messageId":"2476","endLine":13,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2530","line":19,"column":10,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":18},{"ruleId":"2473","severity":1,"message":"2531","line":19,"column":20,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":31},{"ruleId":"2473","severity":1,"message":"2532","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2533","line":8,"column":8,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":89,"column":6,"nodeType":"2485","endLine":89,"endColumn":8,"suggestions":"2535"},{"ruleId":"2483","severity":1,"message":"2534","line":93,"column":6,"nodeType":"2485","endLine":93,"endColumn":14,"suggestions":"2536"},{"ruleId":"2483","severity":1,"message":"2534","line":65,"column":6,"nodeType":"2485","endLine":65,"endColumn":8,"suggestions":"2537"},{"ruleId":"2483","severity":1,"message":"2534","line":69,"column":6,"nodeType":"2485","endLine":69,"endColumn":17,"suggestions":"2538"},{"ruleId":"2473","severity":1,"message":"2539","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2514","line":2,"column":18,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2540","line":5,"column":10,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2541","line":5,"column":28,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2542","line":5,"column":39,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":47},{"ruleId":"2483","severity":1,"message":"2534","line":60,"column":6,"nodeType":"2485","endLine":60,"endColumn":8,"suggestions":"2543"},{"ruleId":"2483","severity":1,"message":"2534","line":64,"column":6,"nodeType":"2485","endLine":64,"endColumn":17,"suggestions":"2544"},{"ruleId":"2483","severity":1,"message":"2545","line":69,"column":6,"nodeType":"2485","endLine":69,"endColumn":8,"suggestions":"2546"},{"ruleId":"2547","severity":1,"message":"2548","line":226,"column":52,"nodeType":"2549","messageId":"2550","endLine":226,"endColumn":54},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2551","line":6,"column":10,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2552","line":97,"column":6,"nodeType":"2485","endLine":97,"endColumn":14,"suggestions":"2553"},{"ruleId":"2483","severity":1,"message":"2534","line":101,"column":6,"nodeType":"2485","endLine":101,"endColumn":25,"suggestions":"2554"},{"ruleId":"2483","severity":1,"message":"2534","line":61,"column":6,"nodeType":"2485","endLine":61,"endColumn":8,"suggestions":"2555"},{"ruleId":"2483","severity":1,"message":"2534","line":65,"column":6,"nodeType":"2485","endLine":65,"endColumn":14,"suggestions":"2556"},{"ruleId":"2473","severity":1,"message":"2526","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":21},{"ruleId":"2494","severity":1,"message":"2557","line":19,"column":11,"nodeType":"2496","endLine":25,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":31,"column":13,"nodeType":"2496","endLine":37,"endColumn":14},{"ruleId":"2494","severity":1,"message":"2557","line":17,"column":11,"nodeType":"2496","endLine":23,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":28,"column":11,"nodeType":"2496","endLine":34,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":13,"column":11,"nodeType":"2496","endLine":20,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":25,"column":11,"nodeType":"2496","endLine":32,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2558","line":7,"column":9,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":11,"nodeType":"2496","endLine":24,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":11,"nodeType":"2496","endLine":35,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2526","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":21},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":11,"nodeType":"2496","endLine":24,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":11,"nodeType":"2496","endLine":35,"endColumn":12},{"ruleId":"2547","severity":1,"message":"2559","line":47,"column":71,"nodeType":"2549","messageId":"2550","endLine":47,"endColumn":73},{"ruleId":"2547","severity":1,"message":"2548","line":50,"column":67,"nodeType":"2549","messageId":"2550","endLine":50,"endColumn":69},{"ruleId":"2473","severity":1,"message":"2558","line":7,"column":9,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":11,"nodeType":"2496","endLine":24,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":11,"nodeType":"2496","endLine":35,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":19,"column":11,"nodeType":"2496","endLine":22,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":27,"column":11,"nodeType":"2496","endLine":30,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2484","line":20,"column":6,"nodeType":"2485","endLine":20,"endColumn":8,"suggestions":"2560"},{"ruleId":"2494","severity":1,"message":"2557","line":26,"column":13,"nodeType":"2496","endLine":29,"endColumn":14},{"ruleId":"2494","severity":1,"message":"2557","line":34,"column":13,"nodeType":"2496","endLine":37,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2526","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":21},{"ruleId":"2494","severity":1,"message":"2557","line":16,"column":11,"nodeType":"2496","endLine":22,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":27,"column":11,"nodeType":"2496","endLine":33,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2561","line":69,"column":5,"nodeType":"2485","endLine":69,"endColumn":7,"suggestions":"2562"},{"ruleId":"2483","severity":1,"message":"2563","line":75,"column":6,"nodeType":"2485","endLine":75,"endColumn":18,"suggestions":"2564"},{"ruleId":"2473","severity":1,"message":"2565","line":1,"column":8,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":13},{"ruleId":"2473","severity":1,"message":"2566","line":2,"column":8,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":17},{"ruleId":"2483","severity":1,"message":"2534","line":116,"column":6,"nodeType":"2485","endLine":116,"endColumn":8,"suggestions":"2567"},{"ruleId":"2483","severity":1,"message":"2534","line":119,"column":6,"nodeType":"2485","endLine":119,"endColumn":25,"suggestions":"2568"},{"ruleId":"2507","severity":1,"message":"2508","line":294,"column":25,"nodeType":"2496","endLine":299,"endColumn":27},{"ruleId":"2507","severity":1,"message":"2508","line":408,"column":23,"nodeType":"2496","endLine":408,"endColumn":72},{"ruleId":"2473","severity":1,"message":"2569","line":16,"column":19,"nodeType":"2475","messageId":"2476","endLine":16,"endColumn":29},{"ruleId":"2483","severity":1,"message":"2484","line":31,"column":6,"nodeType":"2485","endLine":31,"endColumn":8,"suggestions":"2570"},{"ruleId":"2483","severity":1,"message":"2571","line":89,"column":6,"nodeType":"2485","endLine":89,"endColumn":8,"suggestions":"2572"},{"ruleId":"2483","severity":1,"message":"2534","line":70,"column":6,"nodeType":"2485","endLine":70,"endColumn":8,"suggestions":"2573"},{"ruleId":"2483","severity":1,"message":"2534","line":74,"column":6,"nodeType":"2485","endLine":74,"endColumn":25,"suggestions":"2574"},{"ruleId":"2483","severity":1,"message":"2575","line":93,"column":6,"nodeType":"2485","endLine":93,"endColumn":17,"suggestions":"2576"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2577","line":3,"column":10,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2578","line":5,"column":26,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":42},{"ruleId":"2473","severity":1,"message":"2579","line":8,"column":10,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2580","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2581","line":23,"column":19,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":29},{"ruleId":"2483","severity":1,"message":"2534","line":75,"column":6,"nodeType":"2485","endLine":75,"endColumn":8,"suggestions":"2582"},{"ruleId":"2483","severity":1,"message":"2534","line":79,"column":6,"nodeType":"2485","endLine":79,"endColumn":25,"suggestions":"2583"},{"ruleId":"2483","severity":1,"message":"2534","line":145,"column":6,"nodeType":"2485","endLine":145,"endColumn":8,"suggestions":"2584"},{"ruleId":"2483","severity":1,"message":"2534","line":149,"column":6,"nodeType":"2485","endLine":149,"endColumn":51,"suggestions":"2585"},{"ruleId":"2547","severity":1,"message":"2548","line":360,"column":31,"nodeType":"2549","messageId":"2550","endLine":360,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":360,"column":58,"nodeType":"2549","messageId":"2550","endLine":360,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":443,"column":23,"nodeType":"2496","endLine":443,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":466,"column":78,"nodeType":"2549","messageId":"2550","endLine":466,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":472,"column":79,"nodeType":"2549","messageId":"2550","endLine":472,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":479,"column":38,"nodeType":"2549","messageId":"2550","endLine":479,"endColumn":40},{"ruleId":"2483","severity":1,"message":"2586","line":113,"column":6,"nodeType":"2485","endLine":113,"endColumn":26,"suggestions":"2587"},{"ruleId":"2494","severity":1,"message":"2557","line":119,"column":11,"nodeType":"2496","endLine":122,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":127,"column":11,"nodeType":"2496","endLine":130,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2588","line":26,"column":8,"nodeType":"2475","messageId":"2476","endLine":26,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2589","line":43,"column":23,"nodeType":"2475","messageId":"2476","endLine":43,"endColumn":38},{"ruleId":"2483","severity":1,"message":"2484","line":113,"column":6,"nodeType":"2485","endLine":113,"endColumn":8,"suggestions":"2590"},{"ruleId":"2483","severity":1,"message":"2591","line":128,"column":6,"nodeType":"2485","endLine":128,"endColumn":35,"suggestions":"2592"},{"ruleId":"2547","severity":1,"message":"2559","line":227,"column":52,"nodeType":"2549","messageId":"2550","endLine":227,"endColumn":54},{"ruleId":"2483","severity":1,"message":"2534","line":63,"column":6,"nodeType":"2485","endLine":63,"endColumn":8,"suggestions":"2593"},{"ruleId":"2483","severity":1,"message":"2534","line":67,"column":6,"nodeType":"2485","endLine":67,"endColumn":14,"suggestions":"2594"},{"ruleId":"2473","severity":1,"message":"2595","line":51,"column":23,"nodeType":"2475","messageId":"2476","endLine":51,"endColumn":37},{"ruleId":"2483","severity":1,"message":"2596","line":108,"column":6,"nodeType":"2485","endLine":108,"endColumn":26,"suggestions":"2597"},{"ruleId":"2473","severity":1,"message":"2598","line":18,"column":7,"nodeType":"2475","messageId":"2476","endLine":18,"endColumn":14},{"ruleId":"2483","severity":1,"message":"2534","line":59,"column":6,"nodeType":"2485","endLine":59,"endColumn":8,"suggestions":"2599"},{"ruleId":"2483","severity":1,"message":"2534","line":63,"column":6,"nodeType":"2485","endLine":63,"endColumn":22,"suggestions":"2600"},{"ruleId":"2509","severity":1,"message":"2601","line":115,"column":52,"nodeType":"2511","messageId":"2512","endLine":115,"endColumn":54},{"ruleId":"2483","severity":1,"message":"2484","line":190,"column":6,"nodeType":"2485","endLine":190,"endColumn":8,"suggestions":"2602"},{"ruleId":"2603","severity":1,"message":"2604","line":335,"column":11,"nodeType":"2475","messageId":"2605","endLine":335,"endColumn":18},{"ruleId":"2603","severity":1,"message":"2604","line":356,"column":11,"nodeType":"2475","messageId":"2605","endLine":356,"endColumn":18},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2606","line":15,"column":9,"nodeType":"2475","messageId":"2476","endLine":15,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2607","line":39,"column":9,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":24},{"ruleId":"2483","severity":1,"message":"2534","line":79,"column":6,"nodeType":"2485","endLine":79,"endColumn":8,"suggestions":"2608"},{"ruleId":"2483","severity":1,"message":"2534","line":83,"column":6,"nodeType":"2485","endLine":83,"endColumn":25,"suggestions":"2609"},{"ruleId":"2483","severity":1,"message":"2610","line":37,"column":6,"nodeType":"2485","endLine":37,"endColumn":8,"suggestions":"2611"},{"ruleId":"2483","severity":1,"message":"2612","line":57,"column":6,"nodeType":"2485","endLine":57,"endColumn":15,"suggestions":"2613"},{"ruleId":"2473","severity":1,"message":"2614","line":20,"column":7,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2615","line":34,"column":5,"nodeType":"2475","messageId":"2476","endLine":34,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2616","line":37,"column":5,"nodeType":"2475","messageId":"2476","endLine":37,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2617","line":38,"column":5,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":13},{"ruleId":"2509","severity":1,"message":"2510","line":51,"column":35,"nodeType":"2511","messageId":"2512","endLine":51,"endColumn":37},{"ruleId":"2483","severity":1,"message":"2618","line":143,"column":13,"nodeType":"2511","endLine":162,"endColumn":4},{"ruleId":"2483","severity":1,"message":"2619","line":162,"column":6,"nodeType":"2485","endLine":162,"endColumn":8,"suggestions":"2620"},{"ruleId":"2483","severity":1,"message":"2618","line":164,"column":13,"nodeType":"2511","endLine":182,"endColumn":4},{"ruleId":"2483","severity":1,"message":"2621","line":182,"column":6,"nodeType":"2485","endLine":182,"endColumn":14,"suggestions":"2622"},{"ruleId":"2509","severity":1,"message":"2510","line":268,"column":42,"nodeType":"2511","messageId":"2512","endLine":268,"endColumn":44},{"ruleId":"2547","severity":1,"message":"2548","line":276,"column":41,"nodeType":"2549","messageId":"2550","endLine":276,"endColumn":43},{"ruleId":"2509","severity":1,"message":"2510","line":292,"column":54,"nodeType":"2511","messageId":"2512","endLine":292,"endColumn":56},{"ruleId":"2473","severity":1,"message":"2623","line":3,"column":3,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":11},{"ruleId":"2483","severity":1,"message":"2624","line":140,"column":6,"nodeType":"2485","endLine":140,"endColumn":8,"suggestions":"2625"},{"ruleId":"2547","severity":1,"message":"2548","line":275,"column":36,"nodeType":"2549","messageId":"2550","endLine":275,"endColumn":38},{"ruleId":"2547","severity":1,"message":"2548","line":283,"column":42,"nodeType":"2549","messageId":"2550","endLine":283,"endColumn":44},{"ruleId":"2547","severity":1,"message":"2548","line":288,"column":42,"nodeType":"2549","messageId":"2550","endLine":288,"endColumn":44},{"ruleId":"2547","severity":1,"message":"2548","line":23,"column":26,"nodeType":"2549","messageId":"2550","endLine":23,"endColumn":28},{"ruleId":"2547","severity":1,"message":"2548","line":28,"column":26,"nodeType":"2549","messageId":"2550","endLine":28,"endColumn":28},{"ruleId":"2547","severity":1,"message":"2548","line":33,"column":27,"nodeType":"2549","messageId":"2550","endLine":33,"endColumn":29},{"ruleId":"2473","severity":1,"message":"2626","line":4,"column":10,"nodeType":"2475","messageId":"2476","endLine":4,"endColumn":22},{"ruleId":"2483","severity":1,"message":"2534","line":45,"column":6,"nodeType":"2485","endLine":45,"endColumn":8,"suggestions":"2627"},{"ruleId":"2483","severity":1,"message":"2534","line":49,"column":6,"nodeType":"2485","endLine":49,"endColumn":17,"suggestions":"2628"},{"ruleId":"2473","severity":1,"message":"2629","line":8,"column":10,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2630","line":13,"column":10,"nodeType":"2475","messageId":"2476","endLine":13,"endColumn":19},{"ruleId":"2473","severity":1,"message":"2631","line":13,"column":21,"nodeType":"2475","messageId":"2476","endLine":13,"endColumn":33},{"ruleId":"2473","severity":1,"message":"2632","line":14,"column":7,"nodeType":"2475","messageId":"2476","endLine":14,"endColumn":16},{"ruleId":"2483","severity":1,"message":"2484","line":31,"column":5,"nodeType":"2485","endLine":31,"endColumn":7,"suggestions":"2633"},{"ruleId":"2494","severity":1,"message":"2557","line":41,"column":11,"nodeType":"2496","endLine":44,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":50,"column":7,"nodeType":"2496","endLine":53,"endColumn":8},{"ruleId":"2494","severity":1,"message":"2557","line":59,"column":11,"nodeType":"2496","endLine":62,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":23,"column":11,"nodeType":"2496","endLine":29,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":34,"column":11,"nodeType":"2496","endLine":40,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":25,"column":11,"nodeType":"2496","endLine":31,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":36,"column":11,"nodeType":"2496","endLine":42,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":21,"column":11,"nodeType":"2496","endLine":27,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":32,"column":11,"nodeType":"2496","endLine":38,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2526","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":21},{"ruleId":"2494","severity":1,"message":"2557","line":14,"column":11,"nodeType":"2496","endLine":20,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":25,"column":11,"nodeType":"2496","endLine":31,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2529","line":4,"column":10,"nodeType":"2475","messageId":"2476","endLine":4,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2588","line":18,"column":8,"nodeType":"2475","messageId":"2476","endLine":18,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2634","line":19,"column":8,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2635","line":20,"column":10,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2629","line":22,"column":3,"nodeType":"2475","messageId":"2476","endLine":22,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2636","line":24,"column":3,"nodeType":"2475","messageId":"2476","endLine":24,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2637","line":47,"column":9,"nodeType":"2475","messageId":"2476","endLine":47,"endColumn":33},{"ruleId":"2473","severity":1,"message":"2638","line":54,"column":9,"nodeType":"2475","messageId":"2476","endLine":54,"endColumn":29},{"ruleId":"2473","severity":1,"message":"2639","line":318,"column":11,"nodeType":"2475","messageId":"2476","endLine":318,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2639","line":328,"column":11,"nodeType":"2475","messageId":"2476","endLine":328,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2640","line":344,"column":9,"nodeType":"2475","messageId":"2476","endLine":344,"endColumn":19},{"ruleId":"2483","severity":1,"message":"2641","line":356,"column":6,"nodeType":"2485","endLine":356,"endColumn":8,"suggestions":"2642"},{"ruleId":"2483","severity":1,"message":"2643","line":362,"column":6,"nodeType":"2485","endLine":362,"endColumn":35,"suggestions":"2644"},{"ruleId":"2547","severity":1,"message":"2559","line":130,"column":21,"nodeType":"2549","messageId":"2550","endLine":130,"endColumn":23},{"ruleId":"2547","severity":1,"message":"2559","line":134,"column":21,"nodeType":"2549","messageId":"2550","endLine":134,"endColumn":23},{"ruleId":"2494","severity":1,"message":"2557","line":168,"column":11,"nodeType":"2496","endLine":171,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":176,"column":11,"nodeType":"2496","endLine":179,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":184,"column":11,"nodeType":"2496","endLine":187,"endColumn":12},{"ruleId":"2547","severity":1,"message":"2548","line":243,"column":20,"nodeType":"2549","messageId":"2550","endLine":243,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2490","line":17,"column":21,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":33},{"ruleId":"2483","severity":1,"message":"2645","line":45,"column":6,"nodeType":"2485","endLine":45,"endColumn":26,"suggestions":"2646"},{"ruleId":"2483","severity":1,"message":"2534","line":63,"column":6,"nodeType":"2485","endLine":63,"endColumn":8,"suggestions":"2647"},{"ruleId":"2483","severity":1,"message":"2534","line":67,"column":6,"nodeType":"2485","endLine":67,"endColumn":14,"suggestions":"2648"},{"ruleId":"2483","severity":1,"message":"2586","line":84,"column":6,"nodeType":"2485","endLine":84,"endColumn":26,"suggestions":"2649"},{"ruleId":"2494","severity":1,"message":"2557","line":173,"column":11,"nodeType":"2496","endLine":176,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":181,"column":11,"nodeType":"2496","endLine":184,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2650","line":81,"column":9,"nodeType":"2475","messageId":"2476","endLine":81,"endColumn":25},{"ruleId":"2483","severity":1,"message":"2534","line":89,"column":6,"nodeType":"2485","endLine":89,"endColumn":8,"suggestions":"2651"},{"ruleId":"2483","severity":1,"message":"2534","line":93,"column":6,"nodeType":"2485","endLine":93,"endColumn":51,"suggestions":"2652"},{"ruleId":"2547","severity":1,"message":"2548","line":282,"column":78,"nodeType":"2549","messageId":"2550","endLine":282,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":288,"column":79,"nodeType":"2549","messageId":"2550","endLine":288,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":295,"column":38,"nodeType":"2549","messageId":"2550","endLine":295,"endColumn":40},{"ruleId":"2483","severity":1,"message":"2534","line":61,"column":6,"nodeType":"2485","endLine":61,"endColumn":8,"suggestions":"2653"},{"ruleId":"2483","severity":1,"message":"2534","line":65,"column":6,"nodeType":"2485","endLine":65,"endColumn":14,"suggestions":"2654"},{"ruleId":"2473","severity":1,"message":"2490","line":17,"column":21,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":33},{"ruleId":"2483","severity":1,"message":"2618","line":39,"column":13,"nodeType":"2511","endLine":69,"endColumn":4},{"ruleId":"2483","severity":1,"message":"2655","line":69,"column":6,"nodeType":"2485","endLine":69,"endColumn":52,"suggestions":"2656"},{"ruleId":"2547","severity":1,"message":"2559","line":133,"column":38,"nodeType":"2549","messageId":"2550","endLine":133,"endColumn":40},{"ruleId":"2547","severity":1,"message":"2559","line":336,"column":29,"nodeType":"2549","messageId":"2550","endLine":336,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2559","line":359,"column":35,"nodeType":"2549","messageId":"2550","endLine":359,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2657","line":3,"column":3,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2514","line":6,"column":3,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2658","line":7,"column":3,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":9},{"ruleId":"2659","severity":1,"message":"2660","line":35,"column":9,"nodeType":"2661","messageId":"2662","endLine":35,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":38,"column":9,"nodeType":"2661","messageId":"2662","endLine":38,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":41,"column":9,"nodeType":"2661","messageId":"2662","endLine":41,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":39,"column":9,"nodeType":"2661","messageId":"2662","endLine":39,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":42,"column":9,"nodeType":"2661","messageId":"2662","endLine":42,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":45,"column":9,"nodeType":"2661","messageId":"2662","endLine":45,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":48,"column":9,"nodeType":"2661","messageId":"2662","endLine":48,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2663","line":10,"column":10,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":22},{"ruleId":"2659","severity":1,"message":"2660","line":46,"column":9,"nodeType":"2661","messageId":"2662","endLine":46,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":49,"column":9,"nodeType":"2661","messageId":"2662","endLine":49,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":52,"column":9,"nodeType":"2661","messageId":"2662","endLine":52,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":55,"column":9,"nodeType":"2661","messageId":"2662","endLine":55,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":58,"column":9,"nodeType":"2661","messageId":"2662","endLine":58,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":59,"column":9,"nodeType":"2661","messageId":"2662","endLine":59,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":62,"column":9,"nodeType":"2661","messageId":"2662","endLine":62,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":65,"column":9,"nodeType":"2661","messageId":"2662","endLine":65,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":68,"column":9,"nodeType":"2661","messageId":"2662","endLine":68,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":71,"column":9,"nodeType":"2661","messageId":"2662","endLine":71,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":74,"column":9,"nodeType":"2661","messageId":"2662","endLine":74,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":77,"column":9,"nodeType":"2661","messageId":"2662","endLine":77,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":80,"column":9,"nodeType":"2661","messageId":"2662","endLine":80,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2665"},{"ruleId":"2473","severity":1,"message":"2664","line":21,"column":23,"nodeType":"2475","messageId":"2476","endLine":21,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":64,"column":27,"nodeType":"2549","messageId":"2550","endLine":64,"endColumn":29},{"ruleId":"2547","severity":1,"message":"2548","line":175,"column":31,"nodeType":"2549","messageId":"2550","endLine":175,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2559","line":188,"column":29,"nodeType":"2549","messageId":"2550","endLine":188,"endColumn":31},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2666"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2667"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":39,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":74,"column":35,"nodeType":"2549","messageId":"2550","endLine":74,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2668"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2669"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2670"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2671"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2672"},{"ruleId":"2473","severity":1,"message":"2664","line":15,"column":23,"nodeType":"2475","messageId":"2476","endLine":15,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":34,"column":27,"nodeType":"2549","messageId":"2550","endLine":34,"endColumn":29},{"ruleId":"2547","severity":1,"message":"2548","line":108,"column":31,"nodeType":"2549","messageId":"2550","endLine":108,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2559","line":121,"column":29,"nodeType":"2549","messageId":"2550","endLine":121,"endColumn":31},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2673"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2674"},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":29,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":92,"column":29,"nodeType":"2549","messageId":"2550","endLine":92,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":105,"column":6,"nodeType":"2485","endLine":105,"endColumn":14,"suggestions":"2675"},{"ruleId":"2473","severity":1,"message":"2664","line":16,"column":26,"nodeType":"2475","messageId":"2476","endLine":16,"endColumn":36},{"ruleId":"2547","severity":1,"message":"2548","line":40,"column":25,"nodeType":"2549","messageId":"2550","endLine":40,"endColumn":27},{"ruleId":"2547","severity":1,"message":"2548","line":110,"column":36,"nodeType":"2549","messageId":"2550","endLine":110,"endColumn":38},{"ruleId":"2547","severity":1,"message":"2559","line":112,"column":35,"nodeType":"2549","messageId":"2550","endLine":112,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":8,"column":3,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":17},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2677"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2678"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2679"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2680"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":13,"column":25,"nodeType":"2475","messageId":"2476","endLine":13,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":32,"column":35,"nodeType":"2549","messageId":"2550","endLine":32,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":39,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":74,"column":35,"nodeType":"2549","messageId":"2550","endLine":74,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2681"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2682"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2683"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":30,"column":35,"nodeType":"2549","messageId":"2550","endLine":30,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":70,"column":39,"nodeType":"2549","messageId":"2550","endLine":70,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":72,"column":35,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2684"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2685"},{"ruleId":"2473","severity":1,"message":"2664","line":13,"column":25,"nodeType":"2475","messageId":"2476","endLine":13,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":32,"column":35,"nodeType":"2549","messageId":"2550","endLine":32,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":39,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":74,"column":35,"nodeType":"2549","messageId":"2550","endLine":74,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2526","line":2,"column":10,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":21},{"ruleId":"2494","severity":1,"message":"2557","line":17,"column":11,"nodeType":"2496","endLine":23,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":28,"column":11,"nodeType":"2496","endLine":34,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":86,"column":9,"nodeType":"2475","messageId":"2476","endLine":86,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":97,"column":6,"nodeType":"2485","endLine":97,"endColumn":8,"suggestions":"2689"},{"ruleId":"2483","severity":1,"message":"2534","line":101,"column":6,"nodeType":"2485","endLine":101,"endColumn":25,"suggestions":"2690"},{"ruleId":"2473","severity":1,"message":"2691","line":4,"column":3,"nodeType":"2475","messageId":"2476","endLine":4,"endColumn":6},{"ruleId":"2473","severity":1,"message":"2692","line":41,"column":9,"nodeType":"2475","messageId":"2476","endLine":41,"endColumn":21},{"ruleId":"2483","severity":1,"message":"2693","line":266,"column":6,"nodeType":"2485","endLine":266,"endColumn":19,"suggestions":"2694"},{"ruleId":"2483","severity":1,"message":"2624","line":270,"column":6,"nodeType":"2485","endLine":270,"endColumn":8,"suggestions":"2695"},{"ruleId":"2473","severity":1,"message":"2696","line":279,"column":5,"nodeType":"2475","messageId":"2476","endLine":279,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":11,"nodeType":"2496","endLine":24,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":11,"nodeType":"2496","endLine":35,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":16,"column":21,"nodeType":"2496","endLine":22,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":27,"column":21,"nodeType":"2496","endLine":33,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2701"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2702"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":85,"column":9,"nodeType":"2475","messageId":"2476","endLine":85,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":96,"column":6,"nodeType":"2485","endLine":96,"endColumn":8,"suggestions":"2706"},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":25,"suggestions":"2707"},{"ruleId":"2473","severity":1,"message":"2708","line":9,"column":11,"nodeType":"2475","messageId":"2476","endLine":9,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":21,"nodeType":"2496","endLine":31,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":36,"column":21,"nodeType":"2496","endLine":47,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2709"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2710"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":85,"column":9,"nodeType":"2475","messageId":"2476","endLine":85,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":96,"column":6,"nodeType":"2485","endLine":96,"endColumn":8,"suggestions":"2711"},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":25,"suggestions":"2712"},{"ruleId":"2473","severity":1,"message":"2713","line":3,"column":8,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2714","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":19},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":21,"nodeType":"2496","endLine":24,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":21,"nodeType":"2496","endLine":35,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2713","line":3,"column":8,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2714","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":19},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":21,"nodeType":"2496","endLine":24,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":21,"nodeType":"2496","endLine":35,"endColumn":22},{"ruleId":"2469","replacedBy":"2715"},{"ruleId":"2471","replacedBy":"2716"},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2717"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2718"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":84,"column":9,"nodeType":"2475","messageId":"2476","endLine":84,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":95,"column":6,"nodeType":"2485","endLine":95,"endColumn":8,"suggestions":"2719"},{"ruleId":"2483","severity":1,"message":"2534","line":99,"column":6,"nodeType":"2485","endLine":99,"endColumn":25,"suggestions":"2720"},{"ruleId":"2473","severity":1,"message":"2713","line":3,"column":8,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2714","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":19},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":21,"nodeType":"2496","endLine":24,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":21,"nodeType":"2496","endLine":35,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":16,"column":21,"nodeType":"2496","endLine":22,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":27,"column":21,"nodeType":"2496","endLine":33,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2713","line":3,"column":8,"nodeType":"2475","messageId":"2476","endLine":3,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2714","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":19},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":21,"nodeType":"2496","endLine":24,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":21,"nodeType":"2496","endLine":35,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2721"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2722"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":85,"column":9,"nodeType":"2475","messageId":"2476","endLine":85,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":96,"column":6,"nodeType":"2485","endLine":96,"endColumn":8,"suggestions":"2723"},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":25,"suggestions":"2724"},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2725"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2726"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":84,"column":9,"nodeType":"2475","messageId":"2476","endLine":84,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":95,"column":6,"nodeType":"2485","endLine":95,"endColumn":8,"suggestions":"2727"},{"ruleId":"2483","severity":1,"message":"2534","line":99,"column":6,"nodeType":"2485","endLine":99,"endColumn":25,"suggestions":"2728"},{"ruleId":"2473","severity":1,"message":"2729","line":2,"column":8,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2713","line":4,"column":8,"nodeType":"2475","messageId":"2476","endLine":4,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2730","line":6,"column":8,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2714","line":7,"column":8,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":19},{"ruleId":"2494","severity":1,"message":"2557","line":20,"column":21,"nodeType":"2496","endLine":26,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":31,"column":21,"nodeType":"2496","endLine":37,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2731"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2732"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":18,"column":8,"nodeType":"2475","messageId":"2476","endLine":18,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":24,"column":10,"nodeType":"2475","messageId":"2476","endLine":24,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":24,"column":25,"nodeType":"2475","messageId":"2476","endLine":24,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":53,"column":9,"nodeType":"2475","messageId":"2476","endLine":53,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":85,"column":9,"nodeType":"2475","messageId":"2476","endLine":85,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":96,"column":6,"nodeType":"2485","endLine":96,"endColumn":8,"suggestions":"2733"},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":25,"suggestions":"2734"},{"ruleId":"2494","severity":1,"message":"2557","line":17,"column":21,"nodeType":"2496","endLine":23,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":28,"column":21,"nodeType":"2496","endLine":34,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":15,"column":21,"nodeType":"2496","endLine":21,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":26,"column":21,"nodeType":"2496","endLine":32,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":85,"column":9,"nodeType":"2475","messageId":"2476","endLine":85,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":96,"column":6,"nodeType":"2485","endLine":96,"endColumn":8,"suggestions":"2735"},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":25,"suggestions":"2736"},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2737"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2738"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2739"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2740"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2741","line":16,"column":8,"nodeType":"2475","messageId":"2476","endLine":16,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":85,"column":9,"nodeType":"2475","messageId":"2476","endLine":85,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":96,"column":6,"nodeType":"2485","endLine":96,"endColumn":8,"suggestions":"2742"},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":25,"suggestions":"2743"},{"ruleId":"2494","severity":1,"message":"2557","line":16,"column":21,"nodeType":"2496","endLine":22,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":27,"column":21,"nodeType":"2496","endLine":33,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2744"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2745"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":84,"column":9,"nodeType":"2475","messageId":"2476","endLine":84,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":95,"column":6,"nodeType":"2485","endLine":95,"endColumn":8,"suggestions":"2746"},{"ruleId":"2483","severity":1,"message":"2534","line":99,"column":6,"nodeType":"2485","endLine":99,"endColumn":25,"suggestions":"2747"},{"ruleId":"2494","severity":1,"message":"2557","line":17,"column":21,"nodeType":"2496","endLine":23,"endColumn":22},{"ruleId":"2494","severity":1,"message":"2557","line":28,"column":21,"nodeType":"2496","endLine":34,"endColumn":22},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2748"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2749"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":24,"column":10,"nodeType":"2475","messageId":"2476","endLine":24,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":24,"column":25,"nodeType":"2475","messageId":"2476","endLine":24,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2607","line":53,"column":9,"nodeType":"2475","messageId":"2476","endLine":53,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":85,"column":9,"nodeType":"2475","messageId":"2476","endLine":85,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":96,"column":6,"nodeType":"2485","endLine":96,"endColumn":8,"suggestions":"2750"},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":25,"suggestions":"2751"},{"ruleId":"2473","severity":1,"message":"2752","line":2,"column":8,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2713","line":4,"column":8,"nodeType":"2475","messageId":"2476","endLine":4,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2753","line":6,"column":8,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":19},{"ruleId":"2473","severity":1,"message":"2714","line":7,"column":8,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":19},{"ruleId":"2494","severity":1,"message":"2557","line":20,"column":11,"nodeType":"2496","endLine":26,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":31,"column":11,"nodeType":"2496","endLine":37,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2754"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2755"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2607","line":52,"column":9,"nodeType":"2475","messageId":"2476","endLine":52,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2688","line":89,"column":9,"nodeType":"2475","messageId":"2476","endLine":89,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2534","line":100,"column":6,"nodeType":"2485","endLine":100,"endColumn":8,"suggestions":"2756"},{"ruleId":"2483","severity":1,"message":"2534","line":104,"column":6,"nodeType":"2485","endLine":104,"endColumn":25,"suggestions":"2757"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2676","line":10,"column":3,"nodeType":"2475","messageId":"2476","endLine":10,"endColumn":17},{"ruleId":"2473","severity":1,"message":"2634","line":17,"column":8,"nodeType":"2475","messageId":"2476","endLine":17,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2686","line":23,"column":10,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2687","line":23,"column":25,"nodeType":"2475","messageId":"2476","endLine":23,"endColumn":41},{"ruleId":"2473","severity":1,"message":"2688","line":86,"column":9,"nodeType":"2475","messageId":"2476","endLine":86,"endColumn":20},{"ruleId":"2483","severity":1,"message":"2552","line":97,"column":6,"nodeType":"2485","endLine":97,"endColumn":14,"suggestions":"2758"},{"ruleId":"2483","severity":1,"message":"2534","line":103,"column":6,"nodeType":"2485","endLine":103,"endColumn":25,"suggestions":"2759"},{"ruleId":"2473","severity":1,"message":"2623","line":1,"column":18,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":28,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":36},{"ruleId":"2473","severity":1,"message":"2691","line":1,"column":49,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":52},{"ruleId":"2473","severity":1,"message":"2697","line":7,"column":10,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2692","line":38,"column":11,"nodeType":"2475","messageId":"2476","endLine":38,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2698","line":39,"column":11,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":23},{"ruleId":"2473","severity":1,"message":"2699","line":66,"column":11,"nodeType":"2475","messageId":"2476","endLine":66,"endColumn":28},{"ruleId":"2473","severity":1,"message":"2700","line":71,"column":11,"nodeType":"2475","messageId":"2476","endLine":71,"endColumn":23},{"ruleId":"2483","severity":1,"message":"2693","line":260,"column":8,"nodeType":"2485","endLine":260,"endColumn":21,"suggestions":"2760"},{"ruleId":"2483","severity":1,"message":"2624","line":264,"column":8,"nodeType":"2485","endLine":264,"endColumn":10,"suggestions":"2761"},{"ruleId":"2473","severity":1,"message":"2696","line":270,"column":9,"nodeType":"2475","messageId":"2476","endLine":270,"endColumn":16},{"ruleId":"2473","severity":1,"message":"2703","line":276,"column":9,"nodeType":"2475","messageId":"2476","endLine":276,"endColumn":15},{"ruleId":"2473","severity":1,"message":"2704","line":277,"column":9,"nodeType":"2475","messageId":"2476","endLine":277,"endColumn":20},{"ruleId":"2473","severity":1,"message":"2705","line":278,"column":9,"nodeType":"2475","messageId":"2476","endLine":278,"endColumn":12},{"ruleId":"2509","severity":1,"message":"2510","line":19,"column":40,"nodeType":"2511","messageId":"2512","endLine":19,"endColumn":42},{"ruleId":"2473","severity":1,"message":"2558","line":8,"column":9,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":19,"column":11,"nodeType":"2496","endLine":25,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":30,"column":11,"nodeType":"2496","endLine":36,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2558","line":6,"column":9,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":17,"column":11,"nodeType":"2496","endLine":23,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":28,"column":11,"nodeType":"2496","endLine":34,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2542","line":2,"column":3,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2762","line":19,"column":8,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2588","line":20,"column":8,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2598","line":35,"column":7,"nodeType":"2475","messageId":"2476","endLine":35,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2763","line":39,"column":7,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2534","line":155,"column":6,"nodeType":"2485","endLine":155,"endColumn":8,"suggestions":"2764"},{"ruleId":"2483","severity":1,"message":"2534","line":159,"column":6,"nodeType":"2485","endLine":159,"endColumn":51,"suggestions":"2765"},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":31,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":58,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":474,"column":23,"nodeType":"2496","endLine":474,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":497,"column":78,"nodeType":"2549","messageId":"2550","endLine":497,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":503,"column":79,"nodeType":"2549","messageId":"2550","endLine":503,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":510,"column":38,"nodeType":"2549","messageId":"2550","endLine":510,"endColumn":40},{"ruleId":"2473","severity":1,"message":"2542","line":2,"column":3,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2762","line":19,"column":8,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2588","line":20,"column":8,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2598","line":35,"column":7,"nodeType":"2475","messageId":"2476","endLine":35,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2763","line":39,"column":7,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2534","line":155,"column":6,"nodeType":"2485","endLine":155,"endColumn":8,"suggestions":"2766"},{"ruleId":"2483","severity":1,"message":"2534","line":159,"column":6,"nodeType":"2485","endLine":159,"endColumn":51,"suggestions":"2767"},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":31,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":58,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":474,"column":23,"nodeType":"2496","endLine":474,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":497,"column":78,"nodeType":"2549","messageId":"2550","endLine":497,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":503,"column":79,"nodeType":"2549","messageId":"2550","endLine":503,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":510,"column":38,"nodeType":"2549","messageId":"2550","endLine":510,"endColumn":40},{"ruleId":"2473","severity":1,"message":"2558","line":6,"column":9,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":17,"column":11,"nodeType":"2496","endLine":23,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":28,"column":11,"nodeType":"2496","endLine":34,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2598","line":30,"column":7,"nodeType":"2475","messageId":"2476","endLine":30,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2763","line":33,"column":7,"nodeType":"2475","messageId":"2476","endLine":33,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2534","line":147,"column":6,"nodeType":"2485","endLine":147,"endColumn":8,"suggestions":"2768"},{"ruleId":"2483","severity":1,"message":"2534","line":151,"column":6,"nodeType":"2485","endLine":151,"endColumn":51,"suggestions":"2769"},{"ruleId":"2547","severity":1,"message":"2548","line":383,"column":31,"nodeType":"2549","messageId":"2550","endLine":383,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":383,"column":58,"nodeType":"2549","messageId":"2550","endLine":383,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":466,"column":23,"nodeType":"2496","endLine":466,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":489,"column":78,"nodeType":"2549","messageId":"2550","endLine":489,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":495,"column":79,"nodeType":"2549","messageId":"2550","endLine":495,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":502,"column":38,"nodeType":"2549","messageId":"2550","endLine":502,"endColumn":40},{"ruleId":"2473","severity":1,"message":"2558","line":7,"column":9,"nodeType":"2475","messageId":"2476","endLine":7,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":18,"column":11,"nodeType":"2496","endLine":24,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":29,"column":11,"nodeType":"2496","endLine":35,"endColumn":14},{"ruleId":"2483","severity":1,"message":"2534","line":142,"column":6,"nodeType":"2485","endLine":142,"endColumn":8,"suggestions":"2770"},{"ruleId":"2483","severity":1,"message":"2534","line":146,"column":6,"nodeType":"2485","endLine":146,"endColumn":51,"suggestions":"2771"},{"ruleId":"2547","severity":1,"message":"2548","line":378,"column":31,"nodeType":"2549","messageId":"2550","endLine":378,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":378,"column":58,"nodeType":"2549","messageId":"2550","endLine":378,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":461,"column":23,"nodeType":"2496","endLine":461,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":484,"column":78,"nodeType":"2549","messageId":"2550","endLine":484,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":490,"column":79,"nodeType":"2549","messageId":"2550","endLine":490,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":497,"column":38,"nodeType":"2549","messageId":"2550","endLine":497,"endColumn":40},{"ruleId":"2473","severity":1,"message":"2558","line":6,"column":9,"nodeType":"2475","messageId":"2476","endLine":6,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":17,"column":11,"nodeType":"2496","endLine":23,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":28,"column":11,"nodeType":"2496","endLine":34,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2542","line":2,"column":3,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2762","line":19,"column":8,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2588","line":20,"column":8,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2598","line":35,"column":7,"nodeType":"2475","messageId":"2476","endLine":35,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2763","line":39,"column":7,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2534","line":155,"column":6,"nodeType":"2485","endLine":155,"endColumn":8,"suggestions":"2772"},{"ruleId":"2483","severity":1,"message":"2534","line":159,"column":6,"nodeType":"2485","endLine":159,"endColumn":51,"suggestions":"2773"},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":31,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":58,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":474,"column":23,"nodeType":"2496","endLine":474,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":497,"column":78,"nodeType":"2549","messageId":"2550","endLine":497,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":503,"column":79,"nodeType":"2549","messageId":"2550","endLine":503,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":510,"column":38,"nodeType":"2549","messageId":"2550","endLine":510,"endColumn":40},{"ruleId":"2473","severity":1,"message":"2774","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2558","line":8,"column":9,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":19,"column":11,"nodeType":"2496","endLine":25,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":30,"column":11,"nodeType":"2496","endLine":36,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2774","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2558","line":8,"column":9,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":19,"column":11,"nodeType":"2496","endLine":25,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":30,"column":11,"nodeType":"2496","endLine":36,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2774","line":5,"column":8,"nodeType":"2475","messageId":"2476","endLine":5,"endColumn":26},{"ruleId":"2473","severity":1,"message":"2558","line":8,"column":9,"nodeType":"2475","messageId":"2476","endLine":8,"endColumn":17},{"ruleId":"2494","severity":1,"message":"2557","line":19,"column":11,"nodeType":"2496","endLine":25,"endColumn":12},{"ruleId":"2494","severity":1,"message":"2557","line":30,"column":11,"nodeType":"2496","endLine":36,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2542","line":2,"column":3,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2762","line":19,"column":8,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2588","line":20,"column":8,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2598","line":35,"column":7,"nodeType":"2475","messageId":"2476","endLine":35,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2763","line":39,"column":7,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2534","line":155,"column":6,"nodeType":"2485","endLine":155,"endColumn":8,"suggestions":"2775"},{"ruleId":"2483","severity":1,"message":"2534","line":159,"column":6,"nodeType":"2485","endLine":159,"endColumn":51,"suggestions":"2776"},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":31,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":58,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":474,"column":23,"nodeType":"2496","endLine":474,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":497,"column":78,"nodeType":"2549","messageId":"2550","endLine":497,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":503,"column":79,"nodeType":"2549","messageId":"2550","endLine":503,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":510,"column":38,"nodeType":"2549","messageId":"2550","endLine":510,"endColumn":40},{"ruleId":"2473","severity":1,"message":"2542","line":2,"column":3,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2762","line":19,"column":8,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2588","line":20,"column":8,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2598","line":35,"column":7,"nodeType":"2475","messageId":"2476","endLine":35,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2763","line":39,"column":7,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2534","line":155,"column":6,"nodeType":"2485","endLine":155,"endColumn":8,"suggestions":"2777"},{"ruleId":"2483","severity":1,"message":"2534","line":159,"column":6,"nodeType":"2485","endLine":159,"endColumn":51,"suggestions":"2778"},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":31,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":58,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":474,"column":23,"nodeType":"2496","endLine":474,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":497,"column":78,"nodeType":"2549","messageId":"2550","endLine":497,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":503,"column":79,"nodeType":"2549","messageId":"2550","endLine":503,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":510,"column":38,"nodeType":"2549","messageId":"2550","endLine":510,"endColumn":40},{"ruleId":"2473","severity":1,"message":"2542","line":2,"column":3,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":11},{"ruleId":"2473","severity":1,"message":"2762","line":19,"column":8,"nodeType":"2475","messageId":"2476","endLine":19,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2588","line":20,"column":8,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2598","line":35,"column":7,"nodeType":"2475","messageId":"2476","endLine":35,"endColumn":14},{"ruleId":"2473","severity":1,"message":"2763","line":39,"column":7,"nodeType":"2475","messageId":"2476","endLine":39,"endColumn":12},{"ruleId":"2483","severity":1,"message":"2534","line":155,"column":6,"nodeType":"2485","endLine":155,"endColumn":8,"suggestions":"2779"},{"ruleId":"2483","severity":1,"message":"2534","line":159,"column":6,"nodeType":"2485","endLine":159,"endColumn":51,"suggestions":"2780"},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":31,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":391,"column":58,"nodeType":"2549","messageId":"2550","endLine":391,"endColumn":60},{"ruleId":"2507","severity":1,"message":"2508","line":474,"column":23,"nodeType":"2496","endLine":474,"endColumn":72},{"ruleId":"2547","severity":1,"message":"2548","line":497,"column":78,"nodeType":"2549","messageId":"2550","endLine":497,"endColumn":80},{"ruleId":"2547","severity":1,"message":"2548","line":503,"column":79,"nodeType":"2549","messageId":"2550","endLine":503,"endColumn":81},{"ruleId":"2547","severity":1,"message":"2548","line":510,"column":38,"nodeType":"2549","messageId":"2550","endLine":510,"endColumn":40},{"ruleId":"2659","severity":1,"message":"2660","line":66,"column":9,"nodeType":"2661","messageId":"2662","endLine":66,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":69,"column":9,"nodeType":"2661","messageId":"2662","endLine":69,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":72,"column":9,"nodeType":"2661","messageId":"2662","endLine":72,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":75,"column":9,"nodeType":"2661","messageId":"2662","endLine":75,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":78,"column":9,"nodeType":"2661","messageId":"2662","endLine":78,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":81,"column":9,"nodeType":"2661","messageId":"2662","endLine":81,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":84,"column":9,"nodeType":"2661","messageId":"2662","endLine":84,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":87,"column":9,"nodeType":"2661","messageId":"2662","endLine":87,"endColumn":15},{"ruleId":"2659","severity":1,"message":"2660","line":90,"column":11,"nodeType":"2661","messageId":"2662","endLine":90,"endColumn":17},{"ruleId":"2659","severity":1,"message":"2660","line":93,"column":13,"nodeType":"2661","messageId":"2662","endLine":93,"endColumn":19},{"ruleId":"2659","severity":1,"message":"2660","line":96,"column":15,"nodeType":"2661","messageId":"2662","endLine":96,"endColumn":21},{"ruleId":"2659","severity":1,"message":"2660","line":99,"column":17,"nodeType":"2661","messageId":"2662","endLine":99,"endColumn":23},{"ruleId":"2659","severity":1,"message":"2660","line":102,"column":19,"nodeType":"2661","messageId":"2662","endLine":102,"endColumn":25},{"ruleId":"2659","severity":1,"message":"2660","line":105,"column":21,"nodeType":"2661","messageId":"2662","endLine":105,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2781"},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2782"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2783"},{"ruleId":"2473","severity":1,"message":"2664","line":13,"column":25,"nodeType":"2475","messageId":"2476","endLine":13,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":32,"column":35,"nodeType":"2549","messageId":"2550","endLine":32,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":39,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":74,"column":35,"nodeType":"2549","messageId":"2550","endLine":74,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2784"},{"ruleId":"2473","severity":1,"message":"2664","line":15,"column":23,"nodeType":"2475","messageId":"2476","endLine":15,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":34,"column":27,"nodeType":"2549","messageId":"2550","endLine":34,"endColumn":29},{"ruleId":"2547","severity":1,"message":"2548","line":108,"column":31,"nodeType":"2549","messageId":"2550","endLine":108,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2559","line":121,"column":29,"nodeType":"2549","messageId":"2550","endLine":121,"endColumn":31},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2785"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2786"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2787"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2788"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2789"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2790"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2791"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2792"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2793"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2794"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2795"},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":72,"column":29,"nodeType":"2549","messageId":"2550","endLine":72,"endColumn":31},{"ruleId":"2547","severity":1,"message":"2548","line":93,"column":29,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":106,"column":6,"nodeType":"2485","endLine":106,"endColumn":14,"suggestions":"2796"},{"ruleId":"2473","severity":1,"message":"2664","line":12,"column":25,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":35},{"ruleId":"2547","severity":1,"message":"2548","line":31,"column":35,"nodeType":"2549","messageId":"2550","endLine":31,"endColumn":37},{"ruleId":"2547","severity":1,"message":"2548","line":71,"column":39,"nodeType":"2549","messageId":"2550","endLine":71,"endColumn":41},{"ruleId":"2547","severity":1,"message":"2559","line":73,"column":35,"nodeType":"2549","messageId":"2550","endLine":73,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2516","line":15,"column":8,"nodeType":"2475","messageId":"2476","endLine":15,"endColumn":12},{"ruleId":"2473","severity":1,"message":"2797","line":16,"column":31,"nodeType":"2475","messageId":"2476","endLine":16,"endColumn":36},{"ruleId":"2483","severity":1,"message":"2798","line":72,"column":6,"nodeType":"2485","endLine":72,"endColumn":16,"suggestions":"2799"},{"ruleId":"2483","severity":1,"message":"2534","line":71,"column":6,"nodeType":"2485","endLine":71,"endColumn":27,"suggestions":"2800"},{"ruleId":"2483","severity":1,"message":"2801","line":83,"column":6,"nodeType":"2485","endLine":83,"endColumn":8,"suggestions":"2802"},{"ruleId":"2547","severity":1,"message":"2559","line":93,"column":41,"nodeType":"2549","messageId":"2550","endLine":93,"endColumn":43},{"ruleId":"2473","severity":1,"message":"2539","line":1,"column":21,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2514","line":1,"column":29,"nodeType":"2475","messageId":"2476","endLine":1,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2762","line":11,"column":8,"nodeType":"2475","messageId":"2476","endLine":11,"endColumn":24},{"ruleId":"2473","severity":1,"message":"2588","line":12,"column":8,"nodeType":"2475","messageId":"2476","endLine":12,"endColumn":27},{"ruleId":"2473","severity":1,"message":"2803","line":20,"column":10,"nodeType":"2475","messageId":"2476","endLine":20,"endColumn":21},{"ruleId":"2473","severity":1,"message":"2804","line":59,"column":9,"nodeType":"2475","messageId":"2476","endLine":59,"endColumn":29},{"ruleId":"2473","severity":1,"message":"2805","line":62,"column":9,"nodeType":"2475","messageId":"2476","endLine":62,"endColumn":25},{"ruleId":"2473","severity":1,"message":"2806","line":67,"column":9,"nodeType":"2475","messageId":"2476","endLine":67,"endColumn":17},{"ruleId":"2547","severity":1,"message":"2548","line":76,"column":29,"nodeType":"2549","messageId":"2550","endLine":76,"endColumn":31},{"ruleId":"2473","severity":1,"message":"2807","line":88,"column":9,"nodeType":"2475","messageId":"2476","endLine":88,"endColumn":18},{"ruleId":"2547","severity":1,"message":"2548","line":97,"column":29,"nodeType":"2549","messageId":"2550","endLine":97,"endColumn":31},{"ruleId":"2483","severity":1,"message":"2534","line":110,"column":6,"nodeType":"2485","endLine":110,"endColumn":14,"suggestions":"2808"},{"ruleId":"2473","severity":1,"message":"2514","line":2,"column":29,"nodeType":"2475","messageId":"2476","endLine":2,"endColumn":37},{"ruleId":"2473","severity":1,"message":"2664","line":22,"column":23,"nodeType":"2475","messageId":"2476","endLine":22,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2548","line":37,"column":27,"nodeType":"2549","messageId":"2550","endLine":37,"endColumn":29},{"ruleId":"2547","severity":1,"message":"2548","line":58,"column":27,"nodeType":"2549","messageId":"2550","endLine":58,"endColumn":29},{"ruleId":"2483","severity":1,"message":"2809","line":71,"column":6,"nodeType":"2485","endLine":71,"endColumn":22,"suggestions":"2810"},{"ruleId":"2547","severity":1,"message":"2548","line":172,"column":31,"nodeType":"2549","messageId":"2550","endLine":172,"endColumn":33},{"ruleId":"2547","severity":1,"message":"2559","line":185,"column":29,"nodeType":"2549","messageId":"2550","endLine":185,"endColumn":31},"no-native-reassign",["2811"],"no-negated-in-lhs",["2812"],"no-unused-vars","'Sidebar' is defined but never used.","Identifier","unusedVar","'getUserFilterList' is defined but never used.","'pinSidebar' is assigned a value but never used.","'setPinSidebar' is assigned a value but never used.","'subMenuList' is assigned a value but never used.","'selectedItems' is assigned a value but never used.","'setSelectedItems' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["2813"],"'groupedMenu' is assigned a value but never used.","'handleMenuChange' is assigned a value but never used.","'connect' is defined but never used.","'setValidator' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'messageAlert'. Either include it or remove the dependency array. You can also do a functional update 'setMessageAlert(m => ...)' if you only need 'messageAlert' in the 'setMessageAlert' call.",["2814"],["2815"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'MainLayout' is defined but never used.",["2816"],["2817"],"'getCategoryList' is defined but never used.","'getCategoryListSuccess' is defined but never used.","'updateProductListPriceSuccess' is defined but never used.","'response' is assigned a value but never used.","'accountEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'urlLocation'. Either include them or remove the dependency array.",["2818"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'logo' is defined but never used.","'user' is defined but never used.","'id' is defined but never used.","'open' is assigned a value but never used.","'handleMenu' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'calculateTime'. Either include it or remove the dependency array.",["2819"],"React Hook useCallback has an unnecessary dependency: 'profileList'. Either exclude it or remove the dependency array.",["2820"],"'BrowserRouter' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'useParams' is defined but never used.","'getAccountMasterFiltersList' is defined but never used.","'menuList' is assigned a value but never used.","'setmenuList' is assigned a value but never used.","'CcrIndex' is defined but never used.","'CourierIndex' is defined but never used.","React Hook useEffect has a missing dependency: 'getBrowseListData'. Either include it or remove the dependency array.",["2821"],["2822"],["2823"],["2824"],"'Button' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'Checkbox' is defined but never used.",["2825"],["2826"],"React Hook useEffect has a missing dependency: 'getMenuList'. Either include it or remove the dependency array.",["2827"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'handleBodyParam'. Either include it or remove the dependency array.",["2828"],["2829"],["2830"],["2831"],"The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'dispatch' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["2832"],"React Hook useEffect has a missing dependency: 'getDateFilter'. Either include it or remove the dependency array.",["2833"],"React Hook useEffect has missing dependencies: 'from_date', 'to_date', and 'updateDateFilter'. Either include them or remove the dependency array.",["2834"],"'React' is defined but never used.","'loaderImg' is defined but never used.",["2835"],["2836"],"'setLoading' is assigned a value but never used.",["2837"],"React Hook useEffect has a missing dependency: 'getSupportTicketData'. Either include it or remove the dependency array.",["2838"],["2839"],["2840"],"React Hook useEffect has a missing dependency: 'getTicketById'. Either include it or remove the dependency array.",["2841"],"'DatePicker' is defined but never used.","'showSuccessToast' is defined but never used.","'Loader' is defined but never used.","'empList' is assigned a value but never used.","'setEmpList' is assigned a value but never used.",["2842"],["2843"],["2844"],["2845"],"React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array.",["2846"],"'CustomNoRowsOverlay' is defined but never used.","'setTempVerified' is assigned a value but never used.",["2847"],"React Hook useEffect has missing dependencies: 'dispatch', 'handleUpdateFilterData', and 'jsonfilter'. Either include them or remove the dependency array.",["2848"],["2849"],["2850"],"'setDataLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addDropDownList' and 'dropdownList'. Either include them or remove the dependency array. You can also do a functional update 'setDropDownList(d => ...)' if you only need 'dropdownList' in the 'setDropDownList' call.",["2851"],"'user_id' is assigned a value but never used.",["2852"],["2853"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.",["2854"],"no-redeclare","'element' is already defined.","redeclared","'history' is assigned a value but never used.","'handleBodyParam' is assigned a value but never used.",["2855"],["2856"],"React Hook useEffect has a missing dependency: 'getEntryNo'. Either include it or remove the dependency array.",["2857"],"React Hook useEffect has a missing dependency: 'selectedPackingList'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setItemListBody' needs the current value of 'selectedPackingList'.",["2858"],"'StyledTableCell' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'apiBody', 'isNode', 'params', and 'url'. Either include them or remove the dependency array.",["2859"],"React Hook useEffect has missing dependencies: 'apiBody', 'isNode', and 'url'. Either include them or remove the dependency array.",["2860"],"'formatMs' is defined but never used.","React Hook useEffect has a missing dependency: 'getDCNo'. Either include it or remove the dependency array.",["2861"],"'Autocomplete' is defined but never used.",["2862"],["2863"],"'getBrowseUserRight' is defined but never used.","'userRight' is assigned a value but never used.","'setuserRight' is assigned a value but never used.","'thirdMenu' is assigned a value but never used.",["2864"],"'ActionButtons' is defined but never used.","'selectedAccountId' is defined but never used.","'UserRight' is defined but never used.","'getuserRightListResponse' is assigned a value but never used.","'updatefilterjsonData' is assigned a value but never used.","'param' is assigned a value but never used.","'handleEdit' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'browse_id' and 'dispatch'. Either include them or remove the dependency array.",["2865"],"React Hook useEffect has missing dependencies: 'filter', 'getBrowseListData', and 'handleUpdateFilterData'. Either include them or remove the dependency array.",["2866"],"React Hook useEffect has a missing dependency: 'insertParams'. Either include it or remove the dependency array. You can also do a functional update 'setInsertParams(i => ...)' if you only need 'insertParams' in the 'setInsertParams' call.",["2867"],["2868"],["2869"],["2870"],"'handleDateChange' is assigned a value but never used.",["2871"],["2872"],["2873"],["2874"],"React Hook useEffect has missing dependencies: 'insertParams' and 'selectedParams'. Either include them or remove the dependency array. You can also do a functional update 'setSelectedParams(s => ...)' if you only need 'selectedParams' in the 'setSelectedParams' call.",["2875"],"'FormControl' is defined but never used.","'Select' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'buttonLoader' is defined but never used.","'setMessage' is assigned a value but never used.",["2876"],["2877"],["2878"],["2879"],["2880"],["2881"],["2882"],["2883"],["2884"],["2885"],["2886"],"'currenyMasking' is defined but never used.",["2887"],["2888"],["2889"],["2890"],["2891"],["2892"],["2893"],["2894"],["2895"],"'amountFigures' is assigned a value but never used.","'setAmountFigures' is assigned a value but never used.","'handleRowId' is assigned a value but never used.",["2896"],["2897"],"'Fab' is defined but never used.","'toggleDIList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAccountContactList'. Either include it or remove the dependency array.",["2898"],["2899"],"'po_date' is assigned a value but never used.","'SimpleTable' is defined but never used.","'submitAddBox' is assigned a value but never used.","'handleDeleteTable' is assigned a value but never used.","'diListColumn' is assigned a value but never used.",["2900"],["2901"],"'box_no' is assigned a value but never used.","'description' is assigned a value but never used.","'qty' is assigned a value but never used.",["2902"],["2903"],"'challanType' is assigned a value but never used.",["2904"],["2905"],["2906"],["2907"],"'MrnAddDc' is defined but never used.","'MrnBrowseDc' is defined but never used.",["2811"],["2812"],["2908"],["2909"],["2910"],["2911"],["2912"],["2913"],["2914"],["2915"],["2916"],["2917"],["2918"],["2919"],"'CcrAdd' is defined but never used.","'CcrBrowse' is defined but never used.",["2920"],["2921"],["2922"],["2923"],["2924"],["2925"],["2926"],["2927"],["2928"],["2929"],"'moment' is defined but never used.",["2930"],["2931"],["2932"],["2933"],["2934"],["2935"],["2936"],["2937"],["2938"],["2939"],"'RgpAdd' is defined but never used.","'RgpBrowseDc' is defined but never used.",["2940"],["2941"],["2942"],["2943"],["2944"],["2945"],["2946"],["2947"],"'CustomPagination' is defined but never used.","'label' is assigned a value but never used.",["2948"],["2949"],["2950"],["2951"],["2952"],["2953"],["2954"],["2955"],["2956"],["2957"],"'SalesEnquiryBrowse' is defined but never used.",["2958"],["2959"],["2960"],["2961"],["2962"],["2963"],["2964"],["2965"],["2966"],["2967"],["2968"],["2969"],["2970"],["2971"],["2972"],["2973"],["2974"],["2975"],["2976"],["2977"],["2978"],["2979"],"'Stack' is defined but never used.","React Hook React.useEffect has missing dependencies: 'state.right' and 'toggleDrawer'. Either include them or remove the dependency array.",["2980"],["2981"],"React Hook useEffect has a missing dependency: 'accountType'. Either include it or remove the dependency array. If 'setCompanyList' needs the current value of 'accountType', you can also switch to useReducer instead of useState and read 'accountType' in the reducer.",["2982"],"'totalRecord' is assigned a value but never used.","'handlePageSizeChange' is assigned a value but never used.","'handlePageChange' is assigned a value but never used.","'onDelete' is assigned a value but never used.","'onPreview' is assigned a value but never used.",["2983"],"React Hook useEffect has a missing dependency: 'listTransection'. Either include it or remove the dependency array.",["2984"],"no-global-assign","no-unsafe-negation",{"desc":"2985","fix":"2986"},{"desc":"2987","fix":"2988"},{"desc":"2989","fix":"2990"},{"desc":"2991","fix":"2992"},{"desc":"2993","fix":"2994"},{"desc":"2995","fix":"2996"},{"desc":"2997","fix":"2998"},{"desc":"2999","fix":"3000"},{"desc":"3001","fix":"3002"},{"desc":"3003","fix":"3004"},{"desc":"3001","fix":"3005"},{"desc":"3006","fix":"3007"},{"desc":"3001","fix":"3008"},{"desc":"3006","fix":"3009"},{"desc":"3010","fix":"3011"},{"desc":"3012","fix":"3013"},{"desc":"3014","fix":"3015"},{"desc":"3001","fix":"3016"},{"desc":"3003","fix":"3017"},{"desc":"2985","fix":"3018"},{"desc":"3019","fix":"3020"},{"desc":"3021","fix":"3022"},{"desc":"3001","fix":"3023"},{"desc":"3014","fix":"3024"},{"desc":"2985","fix":"3025"},{"desc":"3026","fix":"3027"},{"desc":"3001","fix":"3028"},{"desc":"3014","fix":"3029"},{"desc":"3030","fix":"3031"},{"desc":"3001","fix":"3032"},{"desc":"3014","fix":"3033"},{"desc":"3001","fix":"3034"},{"desc":"3035","fix":"3036"},{"desc":"3037","fix":"3038"},{"desc":"2985","fix":"3039"},{"desc":"3040","fix":"3041"},{"desc":"3001","fix":"3042"},{"desc":"3003","fix":"3043"},{"desc":"3044","fix":"3045"},{"desc":"3001","fix":"3046"},{"desc":"3047","fix":"3048"},{"desc":"2985","fix":"3049"},{"desc":"3001","fix":"3050"},{"desc":"3014","fix":"3051"},{"desc":"3052","fix":"3053"},{"desc":"3054","fix":"3055"},{"desc":"3056","fix":"3057"},{"desc":"3056","fix":"3058"},{"desc":"3059","fix":"3060"},{"desc":"3001","fix":"3061"},{"desc":"3006","fix":"3062"},{"desc":"2985","fix":"3063"},{"desc":"3064","fix":"3065"},{"desc":"3066","fix":"3067"},{"desc":"3068","fix":"3069"},{"desc":"3001","fix":"3070"},{"desc":"3003","fix":"3071"},{"desc":"3037","fix":"3072"},{"desc":"3001","fix":"3073"},{"desc":"3035","fix":"3074"},{"desc":"3001","fix":"3075"},{"desc":"3003","fix":"3076"},{"desc":"3077","fix":"3078"},{"desc":"3003","fix":"3079"},{"desc":"3003","fix":"3080"},{"desc":"3003","fix":"3081"},{"desc":"3003","fix":"3082"},{"desc":"3003","fix":"3083"},{"desc":"3003","fix":"3084"},{"desc":"3003","fix":"3085"},{"desc":"3003","fix":"3086"},{"desc":"3003","fix":"3087"},{"desc":"3003","fix":"3088"},{"desc":"3003","fix":"3089"},{"desc":"3003","fix":"3090"},{"desc":"3003","fix":"3091"},{"desc":"3003","fix":"3092"},{"desc":"3003","fix":"3093"},{"desc":"3003","fix":"3094"},{"desc":"3003","fix":"3095"},{"desc":"3003","fix":"3096"},{"desc":"3003","fix":"3097"},{"desc":"3003","fix":"3098"},{"desc":"3001","fix":"3099"},{"desc":"3014","fix":"3100"},{"desc":"3101","fix":"3102"},{"desc":"3059","fix":"3103"},{"desc":"3101","fix":"3104"},{"desc":"3059","fix":"3105"},{"desc":"3001","fix":"3106"},{"desc":"3014","fix":"3107"},{"desc":"3101","fix":"3108"},{"desc":"3059","fix":"3109"},{"desc":"3001","fix":"3110"},{"desc":"3014","fix":"3111"},{"desc":"3101","fix":"3112"},{"desc":"3059","fix":"3113"},{"desc":"3001","fix":"3114"},{"desc":"3014","fix":"3115"},{"desc":"3101","fix":"3116"},{"desc":"3059","fix":"3117"},{"desc":"3001","fix":"3118"},{"desc":"3014","fix":"3119"},{"desc":"3101","fix":"3120"},{"desc":"3059","fix":"3121"},{"desc":"3001","fix":"3122"},{"desc":"3014","fix":"3123"},{"desc":"3101","fix":"3124"},{"desc":"3059","fix":"3125"},{"desc":"3001","fix":"3126"},{"desc":"3014","fix":"3127"},{"desc":"3001","fix":"3128"},{"desc":"3014","fix":"3129"},{"desc":"3101","fix":"3130"},{"desc":"3059","fix":"3131"},{"desc":"3101","fix":"3132"},{"desc":"3059","fix":"3133"},{"desc":"3001","fix":"3134"},{"desc":"3014","fix":"3135"},{"desc":"3101","fix":"3136"},{"desc":"3059","fix":"3137"},{"desc":"3001","fix":"3138"},{"desc":"3014","fix":"3139"},{"desc":"3101","fix":"3140"},{"desc":"3059","fix":"3141"},{"desc":"3001","fix":"3142"},{"desc":"3014","fix":"3143"},{"desc":"3101","fix":"3144"},{"desc":"3059","fix":"3145"},{"desc":"3001","fix":"3146"},{"desc":"3014","fix":"3147"},{"desc":"3012","fix":"3148"},{"desc":"3014","fix":"3149"},{"desc":"3101","fix":"3150"},{"desc":"3059","fix":"3151"},{"desc":"3001","fix":"3152"},{"desc":"3035","fix":"3153"},{"desc":"3001","fix":"3154"},{"desc":"3035","fix":"3155"},{"desc":"3001","fix":"3156"},{"desc":"3035","fix":"3157"},{"desc":"3001","fix":"3158"},{"desc":"3035","fix":"3159"},{"desc":"3001","fix":"3160"},{"desc":"3035","fix":"3161"},{"desc":"3001","fix":"3162"},{"desc":"3035","fix":"3163"},{"desc":"3001","fix":"3164"},{"desc":"3035","fix":"3165"},{"desc":"3001","fix":"3166"},{"desc":"3035","fix":"3167"},{"desc":"3003","fix":"3168"},{"desc":"3003","fix":"3169"},{"desc":"3003","fix":"3170"},{"desc":"3003","fix":"3171"},{"desc":"3003","fix":"3172"},{"desc":"3003","fix":"3173"},{"desc":"3003","fix":"3174"},{"desc":"3003","fix":"3175"},{"desc":"3003","fix":"3176"},{"desc":"3003","fix":"3177"},{"desc":"3003","fix":"3178"},{"desc":"3003","fix":"3179"},{"desc":"3003","fix":"3180"},{"desc":"3003","fix":"3181"},{"desc":"3003","fix":"3182"},{"desc":"3003","fix":"3183"},{"desc":"3184","fix":"3185"},{"desc":"3186","fix":"3187"},{"desc":"3188","fix":"3189"},{"desc":"3003","fix":"3190"},{"desc":"3191","fix":"3192"},"Update the dependencies array to be: [dispatch]",{"range":"3193","text":"3194"},"Update the dependencies array to be: [checkAuthCredResponse, messageAlert]",{"range":"3195","text":"3196"},"Update the dependencies array to be: [checkAuthOtpResponse, messageAlert]",{"range":"3197","text":"3198"},"Update the dependencies array to be: [dispatch, isAuthorisedByUrl]",{"range":"3199","text":"3200"},"Update the dependencies array to be: [dispatch, getDecryptUserDetailsResponse]",{"range":"3201","text":"3202"},"Update the dependencies array to be: [dispatch, urlLocation]",{"range":"3203","text":"3204"},"Update the dependencies array to be: [calculateTime]",{"range":"3205","text":"3206"},"Update the dependencies array to be: []",{"range":"3207","text":"3208"},"Update the dependencies array to be: [getBrowseListData]",{"range":"3209","text":"3210"},"Update the dependencies array to be: [getBrowseListData, params]",{"range":"3211","text":"3212"},{"range":"3213","text":"3210"},"Update the dependencies array to be: [bodyParam, getBrowseListData]",{"range":"3214","text":"3215"},{"range":"3216","text":"3210"},{"range":"3217","text":"3215"},"Update the dependencies array to be: [getMenuList]",{"range":"3218","text":"3219"},"Update the dependencies array to be: [handleBodyParam, slType]",{"range":"3220","text":"3221"},"Update the dependencies array to be: [params, bodyParam, getBrowseListData]",{"range":"3222","text":"3223"},{"range":"3224","text":"3210"},{"range":"3225","text":"3212"},{"range":"3226","text":"3194"},"Update the dependencies array to be: [getDateFilter]",{"range":"3227","text":"3228"},"Update the dependencies array to be: [dateUpdate, from_date, to_date, updateDateFilter]",{"range":"3229","text":"3230"},{"range":"3231","text":"3210"},{"range":"3232","text":"3223"},{"range":"3233","text":"3194"},"Update the dependencies array to be: [getSupportTicketData]",{"range":"3234","text":"3235"},{"range":"3236","text":"3210"},{"range":"3237","text":"3223"},"Update the dependencies array to be: [getTicketById, previewId]",{"range":"3238","text":"3239"},{"range":"3240","text":"3210"},{"range":"3241","text":"3223"},{"range":"3242","text":"3210"},"Update the dependencies array to be: [params, getuserRightListResponse, bodyParam, getBrowseListData]",{"range":"3243","text":"3244"},"Update the dependencies array to be: [formData, selectedIdResponse]",{"range":"3245","text":"3246"},{"range":"3247","text":"3194"},"Update the dependencies array to be: [productMasterFilter, params, dispatch, jsonfilter, handleUpdateFilterData]",{"range":"3248","text":"3249"},{"range":"3250","text":"3210"},{"range":"3251","text":"3212"},"Update the dependencies array to be: [addDropDownList, dropdownList, selectedIdResponse]",{"range":"3252","text":"3253"},{"range":"3254","text":"3210"},"Update the dependencies array to be: [params, filter, getBrowseListData]",{"range":"3255","text":"3256"},{"range":"3257","text":"3194"},{"range":"3258","text":"3210"},{"range":"3259","text":"3223"},"Update the dependencies array to be: [getEntryNo]",{"range":"3260","text":"3261"},"Update the dependencies array to be: [boxList, selectedPackingList]",{"range":"3262","text":"3263"},"Update the dependencies array to be: [apiBody, isNode, params, url]",{"range":"3264","text":"3265"},{"range":"3266","text":"3265"},"Update the dependencies array to be: [getDCNo]",{"range":"3267","text":"3268"},{"range":"3269","text":"3210"},{"range":"3270","text":"3215"},{"range":"3271","text":"3194"},"Update the dependencies array to be: [browse_id, dispatch]",{"range":"3272","text":"3273"},"Update the dependencies array to be: [params, accountMasterFilter, getBrowseListData, filter, handleUpdateFilterData]",{"range":"3274","text":"3275"},"Update the dependencies array to be: [insertParams, selectedIdResponse]",{"range":"3276","text":"3277"},{"range":"3278","text":"3210"},{"range":"3279","text":"3212"},{"range":"3280","text":"3246"},{"range":"3281","text":"3210"},{"range":"3282","text":"3244"},{"range":"3283","text":"3210"},{"range":"3284","text":"3212"},"Update the dependencies array to be: [selectedComboMLFBIdResponse, mlfbProductList, selectedParams, insertParams]",{"range":"3285","text":"3286"},{"range":"3287","text":"3212"},{"range":"3288","text":"3212"},{"range":"3289","text":"3212"},{"range":"3290","text":"3212"},{"range":"3291","text":"3212"},{"range":"3292","text":"3212"},{"range":"3293","text":"3212"},{"range":"3294","text":"3212"},{"range":"3295","text":"3212"},{"range":"3296","text":"3212"},{"range":"3297","text":"3212"},{"range":"3298","text":"3212"},{"range":"3299","text":"3212"},{"range":"3300","text":"3212"},{"range":"3301","text":"3212"},{"range":"3302","text":"3212"},{"range":"3303","text":"3212"},{"range":"3304","text":"3212"},{"range":"3305","text":"3212"},{"range":"3306","text":"3212"},{"range":"3307","text":"3210"},{"range":"3308","text":"3223"},"Update the dependencies array to be: [contactlist, getAccountContactList]",{"range":"3309","text":"3310"},{"range":"3311","text":"3268"},{"range":"3312","text":"3310"},{"range":"3313","text":"3268"},{"range":"3314","text":"3210"},{"range":"3315","text":"3223"},{"range":"3316","text":"3310"},{"range":"3317","text":"3268"},{"range":"3318","text":"3210"},{"range":"3319","text":"3223"},{"range":"3320","text":"3310"},{"range":"3321","text":"3268"},{"range":"3322","text":"3210"},{"range":"3323","text":"3223"},{"range":"3324","text":"3310"},{"range":"3325","text":"3268"},{"range":"3326","text":"3210"},{"range":"3327","text":"3223"},{"range":"3328","text":"3310"},{"range":"3329","text":"3268"},{"range":"3330","text":"3210"},{"range":"3331","text":"3223"},{"range":"3332","text":"3310"},{"range":"3333","text":"3268"},{"range":"3334","text":"3210"},{"range":"3335","text":"3223"},{"range":"3336","text":"3210"},{"range":"3337","text":"3223"},{"range":"3338","text":"3310"},{"range":"3339","text":"3268"},{"range":"3340","text":"3310"},{"range":"3341","text":"3268"},{"range":"3342","text":"3210"},{"range":"3343","text":"3223"},{"range":"3344","text":"3310"},{"range":"3345","text":"3268"},{"range":"3346","text":"3210"},{"range":"3347","text":"3223"},{"range":"3348","text":"3310"},{"range":"3349","text":"3268"},{"range":"3350","text":"3210"},{"range":"3351","text":"3223"},{"range":"3352","text":"3310"},{"range":"3353","text":"3268"},{"range":"3354","text":"3210"},{"range":"3355","text":"3223"},{"range":"3356","text":"3221"},{"range":"3357","text":"3223"},{"range":"3358","text":"3310"},{"range":"3359","text":"3268"},{"range":"3360","text":"3210"},{"range":"3361","text":"3244"},{"range":"3362","text":"3210"},{"range":"3363","text":"3244"},{"range":"3364","text":"3210"},{"range":"3365","text":"3244"},{"range":"3366","text":"3210"},{"range":"3367","text":"3244"},{"range":"3368","text":"3210"},{"range":"3369","text":"3244"},{"range":"3370","text":"3210"},{"range":"3371","text":"3244"},{"range":"3372","text":"3210"},{"range":"3373","text":"3244"},{"range":"3374","text":"3210"},{"range":"3375","text":"3244"},{"range":"3376","text":"3212"},{"range":"3377","text":"3212"},{"range":"3378","text":"3212"},{"range":"3379","text":"3212"},{"range":"3380","text":"3212"},{"range":"3381","text":"3212"},{"range":"3382","text":"3212"},{"range":"3383","text":"3212"},{"range":"3384","text":"3212"},{"range":"3385","text":"3212"},{"range":"3386","text":"3212"},{"range":"3387","text":"3212"},{"range":"3388","text":"3212"},{"range":"3389","text":"3212"},{"range":"3390","text":"3212"},{"range":"3391","text":"3212"},"Update the dependencies array to be: [leftTrue, state.right, toggleDrawer]",{"range":"3392","text":"3393"},"Update the dependencies array to be: [accountType, getBrowseListData, params]",{"range":"3394","text":"3395"},"Update the dependencies array to be: [accountType]",{"range":"3396","text":"3397"},{"range":"3398","text":"3212"},"Update the dependencies array to be: [listTransection, props.editData]",{"range":"3399","text":"3400"},[1108,1110],"[dispatch]",[2227,2250],"[checkAuthCredResponse, messageAlert]",[3106,3128],"[checkAuthOtpResponse, messageAlert]",[861,880],"[dispatch, isAuthorisedByUrl]",[1196,1227],"[dispatch, getDecryptUserDetailsResponse]",[1324,1326],"[dispatch, urlLocation]",[3240,3242],"[calculateTime]",[8166,8179],"[]",[2531,2533],"[getBrowseListData]",[2587,2595],"[getBrowseListData, params]",[1842,1844],[1898,1909],"[bodyParam, getBrowseListData]",[1847,1849],[1903,1914],[2024,2026],"[getMenuList]",[2613,2621],"[handleBodyParam, slType]",[2679,2698],"[params, bodyParam, getBrowseListData]",[1918,1920],[1974,1982],[675,677],[1929,1931],"[getDateFilter]",[2031,2043],"[dateUpdate, from_date, to_date, updateDateFilter]",[3211,3213],[3266,3285],[1027,1029],[2636,2638],"[getSupportTicketData]",[2027,2029],[2083,2102],[2577,2588],"[getTicketById, previewId]",[2276,2278],[2332,2351],[3997,3999],[4053,4098],"[params, getuserRightListResponse, bodyParam, getBrowseListData]",[2946,2966],"[formData, selectedIdResponse]",[3661,3663],[4114,4143],"[productMasterFilter, params, dispatch, jsonfilter, handleUpdateFilterData]",[1933,1935],[1989,1997],[2757,2777],"[addDropDownList, dropdownList, selectedIdResponse]",[1901,1903],[1961,1977],"[params, filter, getBrowseListData]",[5621,5623],[2135,2137],[2191,2210],[1192,1194],"[getEntryNo]",[1671,1680],"[boxList, selectedPackingList]",[4206,4208],"[apiBody, isNode, params, url]",[4717,4725],[3023,3025],"[getDCNo]",[1348,1350],[1404,1415],[1190,1192],[9815,9817],"[browse_id, dispatch]",[9929,9958],"[params, accountMasterFilter, getBrowseListData, filter, handleUpdateFilterData]",[1375,1395],"[insertParams, selectedIdResponse]",[1992,1994],[2048,2056],[2131,2151],[2631,2633],[2687,2732],[1924,1926],[1980,1988],[2390,2436],"[selectedComboMLFBIdResponse, mlfbProductList, selectedParams, insertParams]",[2882,2890],[2869,2877],[2887,2895],[2880,2888],[2866,2874],[2890,2898],[2865,2873],[2895,2903],[2870,2878],[2870,2878],[2844,2852],[2874,2882],[2850,2858],[2858,2866],[2872,2880],[2860,2868],[2882,2890],[2900,2908],[2893,2901],[2884,2892],[2586,2588],[2646,2665],[7682,7695],"[contactlist, getAccountContactList]",[7743,7745],[9367,9380],[9436,9438],[2497,2499],[2557,2576],[9350,9363],[9419,9421],[2487,2489],[2547,2566],[9354,9367],[9423,9425],[2489,2491],[2549,2568],[9354,9367],[9423,9425],[2503,2505],[2563,2582],[9350,9363],[9419,9421],[2484,2486],[2544,2563],[9362,9375],[9431,9433],[2584,2586],[2644,2663],[2554,2556],[2614,2633],[9366,9379],[9435,9437],[9370,9383],[9439,9441],[2561,2563],[2621,2640],[9366,9379],[9435,9437],[2511,2513],[2571,2590],[9376,9389],[9445,9447],[2508,2510],[2568,2587],[9360,9373],[9429,9431],[2664,2666],[2724,2743],[2475,2483],[2550,2569],[9361,9374],[9430,9432],[4266,4268],[4322,4367],[4262,4264],[4318,4363],[4106,4108],[4162,4207],[3977,3979],[4033,4078],[4281,4283],[4337,4382],[4282,4284],[4338,4383],[4285,4287],[4341,4386],[4294,4296],[4350,4395],[2890,2898],[2858,2866],[2900,2908],[2885,2893],[2895,2903],[2890,2898],[2885,2893],[2895,2903],[2890,2898],[2865,2873],[2899,2907],[2895,2903],[2886,2894],[2905,2913],[2852,2860],[2863,2871],[2545,2555],"[leftTrue, state.right, toggleDrawer]",[2171,2192],"[accountType, getBrowseListData, params]",[2454,2456],"[accountType]",[2987,2995],[1847,1863],"[listTransection, props.editData]"]