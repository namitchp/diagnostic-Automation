[{"F:\\React code\\diagnostic\\src\\index.js":"1","F:\\React code\\diagnostic\\src\\App.js":"2","F:\\React code\\diagnostic\\src\\reportWebVitals.js":"3","F:\\React code\\diagnostic\\src\\_redux\\middleware\\index.js":"4","F:\\React code\\diagnostic\\src\\_redux\\reducers\\index.js":"5","F:\\React code\\diagnostic\\src\\layouts\\layout.js":"6","F:\\React code\\diagnostic\\src\\pages\\Auth\\Login.js":"7","F:\\React code\\diagnostic\\src\\pages\\index.js":"8","F:\\React code\\diagnostic\\src\\_redux\\middleware\\auth.saga.js":"9","F:\\React code\\diagnostic\\src\\_redux\\middleware\\common.saga.js":"10","F:\\React code\\diagnostic\\src\\_redux\\reducers\\auth.reducer.js":"11","F:\\React code\\diagnostic\\src\\_redux\\reducers\\common.reducer.js":"12","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\materialcode.saga.js":"13","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\configuration.saga.js":"14","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\product.saga.js":"15","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\account.reducer.js":"16","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\configuration.reducer.js":"17","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\materialcode.reducer.js":"18","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\product.reducer.js":"19","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\all.reducer.js":"20","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\account.saga.js":"21","F:\\React code\\diagnostic\\src\\routes.js":"22","F:\\React code\\diagnostic\\src\\components\\RouteWithSubRoutes.js":"23","F:\\React code\\diagnostic\\src\\components\\breadcrumbs.js":"24","F:\\React code\\diagnostic\\src\\components\\header.js":"25","F:\\React code\\diagnostic\\src\\components\\sidebar.js":"26","F:\\React code\\diagnostic\\src\\components\\GlobalAlert.js":"27","F:\\React code\\diagnostic\\src\\_redux\\actions\\common.action.js":"28","F:\\React code\\diagnostic\\src\\_redux\\actions\\auth.action.js":"29","F:\\React code\\diagnostic\\src\\_redux\\controller\\auth.controller.js":"30","F:\\React code\\diagnostic\\src\\_redux\\controller\\common.controller.js":"31","F:\\React code\\diagnostic\\src\\layouts\\Support.js":"32","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\materialcode.controller.js":"33","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\product.controller.js":"34","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\configuration.controller.js":"35","F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\account.controller.js":"36","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\account.action.js":"37","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\materialcode.action.js":"38","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\product.action.js":"39","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\all.action.js":"40","F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\configuration.action.js":"41","F:\\React code\\diagnostic\\src\\components\\sub_menu.js":"42","F:\\React code\\diagnostic\\src\\components\\main_menu.js":"43","F:\\React code\\diagnostic\\src\\components\\appbar.js":"44","F:\\React code\\diagnostic\\src\\layouts\\Stock.js":"45","F:\\React code\\diagnostic\\src\\layouts\\Sales.js":"46","F:\\React code\\diagnostic\\src\\layouts\\Profile.js":"47","F:\\React code\\diagnostic\\src\\layouts\\Masters.js":"48","F:\\React code\\diagnostic\\src\\layouts\\Logistics.js":"49","F:\\React code\\diagnostic\\src\\services.js":"50","F:\\React code\\diagnostic\\src\\pages\\Stock\\stockBrowse.js":"51","F:\\React code\\diagnostic\\src\\pages\\Stock\\serialLedgerBrowse.js":"52","F:\\React code\\diagnostic\\src\\pages\\Stock\\itemLedgerBrowse.js":"53","F:\\React code\\diagnostic\\src\\pages\\Profile\\profile.js":"54","F:\\React code\\diagnostic\\src\\pages\\Master\\user rights\\browse.js":"55","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\browse.js":"56","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\browse.js":"57","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\index.js":"58","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\index.js":"59","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\index.js":"60","F:\\React code\\diagnostic\\src\\config.js":"61","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\index.js":"62","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\index.js":"63","F:\\React code\\diagnostic\\src\\components\\common.js":"64","F:\\React code\\diagnostic\\src\\components\\CustomPagination.js":"65","F:\\React code\\diagnostic\\src\\components\\customRowComponent.js":"66","F:\\React code\\diagnostic\\src\\pages\\DC\\index.js":"67","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\index.js":"68","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\index.js":"69","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\index.js":"70","F:\\React code\\diagnostic\\src\\components\\dateFilter.js":"71","F:\\React code\\diagnostic\\src\\components\\action-buttons.js":"72","F:\\React code\\diagnostic\\src\\components\\loader.js":"73","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\browse.js":"74","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\addTicket.js":"75","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\tcBrowse.js":"76","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\addCommericial.js":"77","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\browse.js":"78","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\browse.js":"79","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\addProduct.js":"80","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\browse.js":"81","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\browse.js":"82","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\addItem.js":"83","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\browse.js":"84","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\addMaterialCode.js":"85","F:\\React code\\diagnostic\\src\\pages\\DC\\browse.js":"86","F:\\React code\\diagnostic\\src\\pages\\DC\\form.js":"87","F:\\React code\\diagnostic\\src\\components\\table-picker.js":"88","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\dc-add.js":"89","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\other.js":"90","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\general.js":"91","F:\\React code\\diagnostic\\src\\components\\basic-table.js":"92","F:\\React code\\diagnostic\\src\\pages\\Profile\\changePassword.js":"93","F:\\React code\\diagnostic\\src\\pages\\Profile\\attendance.js":"94","F:\\React code\\diagnostic\\src\\layouts\\Dashboard.js":"95","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\index.js":"96","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\index.js":"97","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\index.js":"98","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\index.js":"99","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\index.js":"100","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\index.js":"101","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\browse.js":"102","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\form.js":"103","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\addEntry.js":"104","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\browse.js":"105","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\addEntry.js":"106","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\browse.js":"107","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\browse.js":"108","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\addCombo.js":"109","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\tnc.js":"110","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\generalInfo.js":"111","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\contact_person.js":"112","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\index.js":"113","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\index.js":"114","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\index.js":"115","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\general.js":"116","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\index.js":"117","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\other.js":"118","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\index.js":"119","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\index.js":"120","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\index.js":"121","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\index.js":"122","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\index.js":"123","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\index.js":"124","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\index.js":"125","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\index.js":"126","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\index.js":"127","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\index.js":"128","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\index.js":"129","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\index.js":"130","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\index.js":"131","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\index.js":"132","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\index.js":"133","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\index.js":"134","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\index.js":"135","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\index.js":"136","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\index.js":"137","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\index.js":"138","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\form.js":"139","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\browse.js":"140","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\form.js":"141","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\browse.js":"142","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\browse.js":"143","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\form.js":"144","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\form.js":"145","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\browse.js":"146","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\browse.js":"147","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\form.js":"148","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\form.js":"149","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\browse.js":"150","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\browse.js":"151","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\form.js":"152","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\form.js":"153","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\form.js":"154","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\browse.js":"155","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\form.js":"156","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\browse.js":"157","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\form.js":"158","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\browse.js":"159","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\browse.js":"160","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\form.js":"161","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\form.js":"162","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\browse.js":"163","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\browse.js":"164","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\form.js":"165","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\browse.js":"166","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\form.js":"167","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\browse.js":"168","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\form.js":"169","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\form.js":"170","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\browse.js":"171","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\browse.js":"172","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\form.js":"173","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\browse.js":"174","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\form.js":"175","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\browse.js":"176","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\browse.js":"177","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\form.js":"178","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\index.js":"179","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\browse.js":"180","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\mdc-add.js":"181","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\index.js":"182","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\index.js":"183","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\add.js":"184","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\browse.js":"185","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\index.js":"186","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\add.js":"187","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\browse.js":"188","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\index.js":"189","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\subIndex.js":"190","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\add.js":"191","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\browse.js":"192","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\index.js":"193","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\index.js":"194","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\subIndex.js":"195","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\subIndex.js":"196","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\add.js":"197","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\browse.js":"198","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\add.js":"199","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\browse.js":"200","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\index.js":"201","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\add.js":"202","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\browse.js":"203","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\index.js":"204","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\index.js":"205","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\browse.js":"206","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\add.js":"207","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\add.js":"208","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\browse.js":"209","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\index.js":"210","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\add.js":"211","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\browse.js":"212","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\index.js":"213","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\add.js":"214","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\browse.js":"215","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\index.js":"216","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\add.js":"217","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\browse.js":"218","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\browse.js":"219","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\add.js":"220","F:\\React code\\diagnostic\\src\\components\\third_menu.js":"221","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\index.js":"222","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\index.js":"223","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\browse.js":"224","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\browse.js":"225","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\index.js":"226","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\browse.js":"227","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\index.js":"228","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\browse.js":"229","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\index.js":"230","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\browse.js":"231","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\index.js":"232","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\index.js":"233","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\index.js":"234","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\browse.js":"235","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\browse.js":"236","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\browse.js":"237"},{"size":969,"mtime":1664465247239,"results":"238","hashOfConfig":"239"},{"size":1997,"mtime":1664465247530,"results":"240","hashOfConfig":"239"},{"size":362,"mtime":1664465247078,"results":"241","hashOfConfig":"239"},{"size":729,"mtime":1664465247625,"results":"242","hashOfConfig":"239"},{"size":873,"mtime":1664465248520,"results":"243","hashOfConfig":"239"},{"size":3281,"mtime":1667539011397,"results":"244","hashOfConfig":"239"},{"size":7492,"mtime":1664465250715,"results":"245","hashOfConfig":"239"},{"size":2150,"mtime":1664465250481,"results":"246","hashOfConfig":"239"},{"size":1598,"mtime":1664465247717,"results":"247","hashOfConfig":"239"},{"size":1763,"mtime":1664465247669,"results":"248","hashOfConfig":"239"},{"size":2149,"mtime":1664465248603,"results":"249","hashOfConfig":"239"},{"size":1074,"mtime":1664465248560,"results":"250","hashOfConfig":"239"},{"size":1206,"mtime":1664465247861,"results":"251","hashOfConfig":"239"},{"size":2759,"mtime":1664465247902,"results":"252","hashOfConfig":"239"},{"size":3653,"mtime":1664465247781,"results":"253","hashOfConfig":"239"},{"size":1746,"mtime":1664465248721,"results":"254","hashOfConfig":"239"},{"size":3355,"mtime":1664465248757,"results":"255","hashOfConfig":"239"},{"size":1151,"mtime":1664465248687,"results":"256","hashOfConfig":"239"},{"size":2597,"mtime":1664465248647,"results":"257","hashOfConfig":"239"},{"size":2021,"mtime":1664465248794,"results":"258","hashOfConfig":"239"},{"size":2588,"mtime":1664465247826,"results":"259","hashOfConfig":"239"},{"size":935,"mtime":1665123133297,"results":"260","hashOfConfig":"239"},{"size":352,"mtime":1667539144668,"results":"261","hashOfConfig":"239"},{"size":1513,"mtime":1665123516858,"results":"262","hashOfConfig":"239"},{"size":6074,"mtime":1669805643507,"results":"263","hashOfConfig":"239"},{"size":1418,"mtime":1665121322768,"results":"264","hashOfConfig":"239"},{"size":821,"mtime":1664465249262,"results":"265","hashOfConfig":"239"},{"size":982,"mtime":1664465248219,"results":"266","hashOfConfig":"239"},{"size":987,"mtime":1664465248256,"results":"267","hashOfConfig":"239"},{"size":1700,"mtime":1664465247989,"results":"268","hashOfConfig":"239"},{"size":4463,"mtime":1669877260785,"results":"269","hashOfConfig":"239"},{"size":854,"mtime":1664465249876,"results":"270","hashOfConfig":"239"},{"size":2593,"mtime":1664465248174,"results":"271","hashOfConfig":"239"},{"size":4632,"mtime":1664465248040,"results":"272","hashOfConfig":"239"},{"size":3237,"mtime":1664465248133,"results":"273","hashOfConfig":"239"},{"size":3037,"mtime":1664465248088,"results":"274","hashOfConfig":"239"},{"size":1286,"mtime":1664465248471,"results":"275","hashOfConfig":"239"},{"size":854,"mtime":1664465248435,"results":"276","hashOfConfig":"239"},{"size":1791,"mtime":1664465248304,"results":"277","hashOfConfig":"239"},{"size":5220,"mtime":1664465248390,"results":"278","hashOfConfig":"239"},{"size":2654,"mtime":1664465248341,"results":"279","hashOfConfig":"239"},{"size":2441,"mtime":1667625340606,"results":"280","hashOfConfig":"239"},{"size":1344,"mtime":1668422935511,"results":"281","hashOfConfig":"239"},{"size":7925,"mtime":1664465248998,"results":"282","hashOfConfig":"239"},{"size":752,"mtime":1664465249719,"results":"283","hashOfConfig":"239"},{"size":2763,"mtime":1669093367840,"results":"284","hashOfConfig":"239"},{"size":747,"mtime":1664465249565,"results":"285","hashOfConfig":"239"},{"size":3335,"mtime":1667986550406,"results":"286","hashOfConfig":"239"},{"size":3942,"mtime":1669030104522,"results":"287","hashOfConfig":"239"},{"size":4028,"mtime":1667975898729,"results":"288","hashOfConfig":"239"},{"size":9862,"mtime":1664465255812,"results":"289","hashOfConfig":"239"},{"size":7009,"mtime":1664465255771,"results":"290","hashOfConfig":"239"},{"size":7019,"mtime":1664465255727,"results":"291","hashOfConfig":"239"},{"size":4098,"mtime":1664465250835,"results":"292","hashOfConfig":"239"},{"size":11975,"mtime":1664465254390,"results":"293","hashOfConfig":"239"},{"size":8206,"mtime":1669024172465,"results":"294","hashOfConfig":"239"},{"size":4828,"mtime":1664465251386,"results":"295","hashOfConfig":"239"},{"size":1536,"mtime":1664465251138,"results":"296","hashOfConfig":"239"},{"size":1946,"mtime":1664465251000,"results":"297","hashOfConfig":"239"},{"size":1348,"mtime":1664465251236,"results":"298","hashOfConfig":"239"},{"size":340,"mtime":1668422816368,"results":"299","hashOfConfig":"239"},{"size":1302,"mtime":1664465250669,"results":"300","hashOfConfig":"239"},{"size":1380,"mtime":1667992264500,"results":"301","hashOfConfig":"239"},{"size":1937,"mtime":1667813691390,"results":"302","hashOfConfig":"239"},{"size":1602,"mtime":1667819192465,"results":"303","hashOfConfig":"239"},{"size":3389,"mtime":1664465248879,"results":"304","hashOfConfig":"239"},{"size":1263,"mtime":1664465255644,"results":"305","hashOfConfig":"239"},{"size":1510,"mtime":1664465255132,"results":"306","hashOfConfig":"239"},{"size":1276,"mtime":1664465254523,"results":"307","hashOfConfig":"239"},{"size":1562,"mtime":1664465254735,"results":"308","hashOfConfig":"239"},{"size":2869,"mtime":1669015899837,"results":"309","hashOfConfig":"239"},{"size":601,"mtime":1666166562902,"results":"310","hashOfConfig":"239"},{"size":288,"mtime":1664465249473,"results":"311","hashOfConfig":"239"},{"size":13199,"mtime":1664465251192,"results":"312","hashOfConfig":"239"},{"size":10169,"mtime":1664465251285,"results":"313","hashOfConfig":"239"},{"size":6339,"mtime":1664465251044,"results":"314","hashOfConfig":"239"},{"size":10241,"mtime":1664465250967,"results":"315","hashOfConfig":"239"},{"size":6572,"mtime":1664465251099,"results":"316","hashOfConfig":"239"},{"size":15071,"mtime":1669016845240,"results":"317","hashOfConfig":"239"},{"size":4652,"mtime":1664465254608,"results":"318","hashOfConfig":"239"},{"size":18995,"mtime":1664465254484,"results":"319","hashOfConfig":"239"},{"size":5658,"mtime":1664465254699,"results":"320","hashOfConfig":"239"},{"size":19350,"mtime":1664465254657,"results":"321","hashOfConfig":"239"},{"size":6557,"mtime":1664465255090,"results":"322","hashOfConfig":"239"},{"size":18464,"mtime":1664465255181,"results":"323","hashOfConfig":"239"},{"size":4529,"mtime":1664465255602,"results":"324","hashOfConfig":"239"},{"size":12382,"mtime":1666079914071,"results":"325","hashOfConfig":"239"},{"size":10586,"mtime":1665129638317,"results":"326","hashOfConfig":"239"},{"size":19602,"mtime":1665059518731,"results":"327","hashOfConfig":"239"},{"size":7219,"mtime":1664465254437,"results":"328","hashOfConfig":"239"},{"size":10195,"mtime":1664465254568,"results":"329","hashOfConfig":"239"},{"size":3230,"mtime":1666157690356,"results":"330","hashOfConfig":"239"},{"size":3659,"mtime":1664465250912,"results":"331","hashOfConfig":"239"},{"size":6210,"mtime":1664465250876,"results":"332","hashOfConfig":"239"},{"size":197,"mtime":1664465249948,"results":"333","hashOfConfig":"239"},{"size":2049,"mtime":1667989138352,"results":"334","hashOfConfig":"239"},{"size":1545,"mtime":1664465251430,"results":"335","hashOfConfig":"239"},{"size":4749,"mtime":1669802233272,"results":"336","hashOfConfig":"239"},{"size":1669,"mtime":1664465255510,"results":"337","hashOfConfig":"239"},{"size":1562,"mtime":1664465255324,"results":"338","hashOfConfig":"239"},{"size":1309,"mtime":1664465250579,"results":"339","hashOfConfig":"239"},{"size":14778,"mtime":1668003875136,"results":"340","hashOfConfig":"239"},{"size":5867,"mtime":1664465254979,"results":"341","hashOfConfig":"239"},{"size":3855,"mtime":1664465251345,"results":"342","hashOfConfig":"239"},{"size":5913,"mtime":1664465255468,"results":"343","hashOfConfig":"239"},{"size":5798,"mtime":1664465255424,"results":"344","hashOfConfig":"239"},{"size":9794,"mtime":1669018167625,"results":"345","hashOfConfig":"239"},{"size":4849,"mtime":1664465255280,"results":"346","hashOfConfig":"239"},{"size":8824,"mtime":1664465255235,"results":"347","hashOfConfig":"239"},{"size":11479,"mtime":1664465254859,"results":"348","hashOfConfig":"239"},{"size":11962,"mtime":1664465254942,"results":"349","hashOfConfig":"239"},{"size":5089,"mtime":1664465255023,"results":"350","hashOfConfig":"239"},{"size":1661,"mtime":1664465251530,"results":"351","hashOfConfig":"239"},{"size":1820,"mtime":1664465253800,"results":"352","hashOfConfig":"239"},{"size":2081,"mtime":1669792193406,"results":"353","hashOfConfig":"239"},{"size":11543,"mtime":1664465255554,"results":"354","hashOfConfig":"239"},{"size":2589,"mtime":1669888042885,"results":"355","hashOfConfig":"239"},{"size":3705,"mtime":1664465255376,"results":"356","hashOfConfig":"239"},{"size":1590,"mtime":1664465251748,"results":"357","hashOfConfig":"239"},{"size":1600,"mtime":1664465251874,"results":"358","hashOfConfig":"239"},{"size":1633,"mtime":1664465251619,"results":"359","hashOfConfig":"239"},{"size":1570,"mtime":1664465254012,"results":"360","hashOfConfig":"239"},{"size":1610,"mtime":1664465252196,"results":"361","hashOfConfig":"239"},{"size":1620,"mtime":1664465254289,"results":"362","hashOfConfig":"239"},{"size":1610,"mtime":1664465254152,"results":"363","hashOfConfig":"239"},{"size":1617,"mtime":1664465253880,"results":"364","hashOfConfig":"239"},{"size":1570,"mtime":1664465252599,"results":"365","hashOfConfig":"239"},{"size":1580,"mtime":1664465252469,"results":"366","hashOfConfig":"239"},{"size":1570,"mtime":1664465252057,"results":"367","hashOfConfig":"239"},{"size":1550,"mtime":1664465252332,"results":"368","hashOfConfig":"239"},{"size":1365,"mtime":1669973033377,"results":"369","hashOfConfig":"239"},{"size":1744,"mtime":1669969051734,"results":"370","hashOfConfig":"239"},{"size":1590,"mtime":1664465252896,"results":"371","hashOfConfig":"239"},{"size":1602,"mtime":1664465253715,"results":"372","hashOfConfig":"239"},{"size":1640,"mtime":1664465253450,"results":"373","hashOfConfig":"239"},{"size":1600,"mtime":1664465253306,"results":"374","hashOfConfig":"239"},{"size":1630,"mtime":1664465253595,"results":"375","hashOfConfig":"239"},{"size":1631,"mtime":1664465253021,"results":"376","hashOfConfig":"239"},{"size":4437,"mtime":1664465251784,"results":"377","hashOfConfig":"239"},{"size":5238,"mtime":1664465251708,"results":"378","hashOfConfig":"239"},{"size":4478,"mtime":1664465251663,"results":"379","hashOfConfig":"239"},{"size":5263,"mtime":1664465251583,"results":"380","hashOfConfig":"239"},{"size":5253,"mtime":1664465251832,"results":"381","hashOfConfig":"239"},{"size":4456,"mtime":1664465251911,"results":"382","hashOfConfig":"239"},{"size":4415,"mtime":1664465254054,"results":"383","hashOfConfig":"239"},{"size":5221,"mtime":1664465253968,"results":"384","hashOfConfig":"239"},{"size":5218,"mtime":1664465252982,"results":"385","hashOfConfig":"239"},{"size":4409,"mtime":1664465253069,"results":"386","hashOfConfig":"239"},{"size":4499,"mtime":1664465253632,"results":"387","hashOfConfig":"239"},{"size":5316,"mtime":1664465253549,"results":"388","hashOfConfig":"239"},{"size":5210,"mtime":1664465253261,"results":"389","hashOfConfig":"239"},{"size":4485,"mtime":1664465253350,"results":"390","hashOfConfig":"239"},{"size":4514,"mtime":1664465253492,"results":"391","hashOfConfig":"239"},{"size":4423,"mtime":1664465253755,"results":"392","hashOfConfig":"239"},{"size":5331,"mtime":1664465253405,"results":"393","hashOfConfig":"239"},{"size":4423,"mtime":1664465252933,"results":"394","hashOfConfig":"239"},{"size":5268,"mtime":1664465253680,"results":"395","hashOfConfig":"239"},{"size":3226,"mtime":1669967847478,"results":"396","hashOfConfig":"239"},{"size":5256,"mtime":1664465252858,"results":"397","hashOfConfig":"239"},{"size":5753,"mtime":1669981278934,"results":"398","hashOfConfig":"239"},{"size":4634,"mtime":1669981665502,"results":"399","hashOfConfig":"239"},{"size":5194,"mtime":1664465252374,"results":"400","hashOfConfig":"239"},{"size":5932,"mtime":1669981568477,"results":"401","hashOfConfig":"239"},{"size":5310,"mtime":1664465252290,"results":"402","hashOfConfig":"239"},{"size":4290,"mtime":1664465252100,"results":"403","hashOfConfig":"239"},{"size":5199,"mtime":1664465252010,"results":"404","hashOfConfig":"239"},{"size":4440,"mtime":1664465252511,"results":"405","hashOfConfig":"239"},{"size":5225,"mtime":1664465252426,"results":"406","hashOfConfig":"239"},{"size":4399,"mtime":1664465252636,"results":"407","hashOfConfig":"239"},{"size":4451,"mtime":1664465253919,"results":"408","hashOfConfig":"239"},{"size":5208,"mtime":1664465252560,"results":"409","hashOfConfig":"239"},{"size":5264,"mtime":1664465253846,"results":"410","hashOfConfig":"239"},{"size":4491,"mtime":1664465254196,"results":"411","hashOfConfig":"239"},{"size":5295,"mtime":1664465254108,"results":"412","hashOfConfig":"239"},{"size":4432,"mtime":1664465254334,"results":"413","hashOfConfig":"239"},{"size":5252,"mtime":1664465254250,"results":"414","hashOfConfig":"239"},{"size":5291,"mtime":1664465252151,"results":"415","hashOfConfig":"239"},{"size":4529,"mtime":1664465252234,"results":"416","hashOfConfig":"239"},{"size":1421,"mtime":1666841696417,"results":"417","hashOfConfig":"239"},{"size":7288,"mtime":1668422935518,"results":"418","hashOfConfig":"239"},{"size":16085,"mtime":1666168548907,"results":"419","hashOfConfig":"239"},{"size":1238,"mtime":1669025817453,"results":"420","hashOfConfig":"239"},{"size":1726,"mtime":1667547182252,"results":"421","hashOfConfig":"239"},{"size":22329,"mtime":1666863148276,"results":"422","hashOfConfig":"239"},{"size":7323,"mtime":1669097436843,"results":"423","hashOfConfig":"239"},{"size":2294,"mtime":1669030731263,"results":"424","hashOfConfig":"239"},{"size":22310,"mtime":1667308011121,"results":"425","hashOfConfig":"239"},{"size":6240,"mtime":1669098769887,"results":"426","hashOfConfig":"239"},{"size":1786,"mtime":1667547440810,"results":"427","hashOfConfig":"239"},{"size":0,"mtime":1667547544048,"results":"428","hashOfConfig":"239"},{"size":22318,"mtime":1667450307833,"results":"429","hashOfConfig":"239"},{"size":7389,"mtime":1669099708591,"results":"430","hashOfConfig":"239"},{"size":1767,"mtime":1667545984025,"results":"431","hashOfConfig":"239"},{"size":1737,"mtime":1669107803333,"results":"432","hashOfConfig":"239"},{"size":0,"mtime":1667546008926,"results":"433","hashOfConfig":"239"},{"size":0,"mtime":1667546147352,"results":"434","hashOfConfig":"239"},{"size":22318,"mtime":1667453035832,"results":"435","hashOfConfig":"239"},{"size":6788,"mtime":1669101063275,"results":"436","hashOfConfig":"239"},{"size":22310,"mtime":1667309910121,"results":"437","hashOfConfig":"239"},{"size":6792,"mtime":1669100284688,"results":"438","hashOfConfig":"239"},{"size":1845,"mtime":1667451015930,"results":"439","hashOfConfig":"239"},{"size":22325,"mtime":1667451297886,"results":"440","hashOfConfig":"239"},{"size":7138,"mtime":1669100457690,"results":"441","hashOfConfig":"239"},{"size":1738,"mtime":1667453118288,"results":"442","hashOfConfig":"239"},{"size":1753,"mtime":1667453402663,"results":"443","hashOfConfig":"239"},{"size":6834,"mtime":1669103531690,"results":"444","hashOfConfig":"239"},{"size":22333,"mtime":1667453140755,"results":"445","hashOfConfig":"239"},{"size":22341,"mtime":1667452462569,"results":"446","hashOfConfig":"239"},{"size":6469,"mtime":1669031746012,"results":"447","hashOfConfig":"239"},{"size":1734,"mtime":1667453499743,"results":"448","hashOfConfig":"239"},{"size":22333,"mtime":1667453611629,"results":"449","hashOfConfig":"239"},{"size":7021,"mtime":1669099658663,"results":"450","hashOfConfig":"239"},{"size":1714,"mtime":1667454019466,"results":"451","hashOfConfig":"239"},{"size":22338,"mtime":1667454658415,"results":"452","hashOfConfig":"239"},{"size":6798,"mtime":1669097426929,"results":"453","hashOfConfig":"239"},{"size":1353,"mtime":1667454814781,"results":"454","hashOfConfig":"239"},{"size":22321,"mtime":1667454865819,"results":"455","hashOfConfig":"239"},{"size":6586,"mtime":1669099030035,"results":"456","hashOfConfig":"239"},{"size":7245,"mtime":1669098183832,"results":"457","hashOfConfig":"239"},{"size":22323,"mtime":1667455442730,"results":"458","hashOfConfig":"239"},{"size":2457,"mtime":1669722661267,"results":"459","hashOfConfig":"239"},{"size":1321,"mtime":1668950542070,"results":"460","hashOfConfig":"239"},{"size":1305,"mtime":1668950598983,"results":"461","hashOfConfig":"239"},{"size":15689,"mtime":1668750883399,"results":"462","hashOfConfig":"239"},{"size":15681,"mtime":1668751099955,"results":"463","hashOfConfig":"239"},{"size":1326,"mtime":1668950637114,"results":"464","hashOfConfig":"239"},{"size":15689,"mtime":1668750785902,"results":"465","hashOfConfig":"239"},{"size":1312,"mtime":1668950707997,"results":"466","hashOfConfig":"239"},{"size":15681,"mtime":1668750646267,"results":"467","hashOfConfig":"239"},{"size":1285,"mtime":1669093760575,"results":"468","hashOfConfig":"239"},{"size":15698,"mtime":1669033403415,"results":"469","hashOfConfig":"239"},{"size":1397,"mtime":1669093938615,"results":"470","hashOfConfig":"239"},{"size":1339,"mtime":1669093912796,"results":"471","hashOfConfig":"239"},{"size":1352,"mtime":1669093884619,"results":"472","hashOfConfig":"239"},{"size":15700,"mtime":1669092712976,"results":"473","hashOfConfig":"239"},{"size":15710,"mtime":1669092741763,"results":"474","hashOfConfig":"239"},{"size":15724,"mtime":1669033910888,"results":"475","hashOfConfig":"239"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},"1sohe9q",{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"478"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"478"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"478"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"478"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511","usedDeprecatedRules":"478"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"478"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"478"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"478"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"478"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"478"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"478"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"478"},{"filePath":"585","messages":"586","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587","usedDeprecatedRules":"478"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"478"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"478"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"478"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"478"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"478"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"478"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"478"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"478"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616","usedDeprecatedRules":"478"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"478"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"478"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"478"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"478"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"478"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"478"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"478"},{"filePath":"644","messages":"645","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"478"},{"filePath":"647","messages":"648","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"478"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"652","messages":"653","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654","usedDeprecatedRules":"478"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"478"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660","usedDeprecatedRules":"478"},{"filePath":"661","messages":"662","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663","usedDeprecatedRules":"478"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"478"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"478"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672","usedDeprecatedRules":"478"},{"filePath":"673","messages":"674","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675","usedDeprecatedRules":"478"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"478"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"478"},{"filePath":"682","messages":"683","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"478"},{"filePath":"685","messages":"686","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"478"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"478"},{"filePath":"691","messages":"692","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"693","usedDeprecatedRules":"478"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696","usedDeprecatedRules":"478"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"478"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"478"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"478"},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"478"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"478"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720","usedDeprecatedRules":"478"},{"filePath":"721","messages":"722","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"478"},{"filePath":"724","messages":"725","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"726","usedDeprecatedRules":"478"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729","usedDeprecatedRules":"478"},{"filePath":"730","messages":"731","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"732","usedDeprecatedRules":"478"},{"filePath":"733","messages":"734","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"478"},{"filePath":"736","messages":"737","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"738","usedDeprecatedRules":"478"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"478"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744","usedDeprecatedRules":"478"},{"filePath":"745","messages":"746","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"747","usedDeprecatedRules":"478"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"750","usedDeprecatedRules":"478"},{"filePath":"751","messages":"752","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753","usedDeprecatedRules":"478"},{"filePath":"754","messages":"755","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"756","usedDeprecatedRules":"478"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"478"},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"478"},{"filePath":"762","messages":"763","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764","usedDeprecatedRules":"478"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767","usedDeprecatedRules":"478"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"478"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773","usedDeprecatedRules":"478"},{"filePath":"774","messages":"775","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"776","usedDeprecatedRules":"478"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779","usedDeprecatedRules":"478"},{"filePath":"780","messages":"781","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"782","usedDeprecatedRules":"478"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"478"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"478"},{"filePath":"789","messages":"790","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"791","usedDeprecatedRules":"478"},{"filePath":"792","messages":"793","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794","usedDeprecatedRules":"478"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"478"},{"filePath":"798","messages":"799","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"478"},{"filePath":"801","messages":"802","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"478"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"478"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"478"},{"filePath":"810","messages":"811","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"478"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"478"},{"filePath":"816","messages":"817","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"478"},{"filePath":"819","messages":"820","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821","usedDeprecatedRules":"478"},{"filePath":"822","messages":"823","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"824","messages":"825","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"826","messages":"827","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"828","usedDeprecatedRules":"478"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"831","usedDeprecatedRules":"478"},{"filePath":"832","messages":"833","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"834","usedDeprecatedRules":"478"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"478"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840","usedDeprecatedRules":"478"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"843","usedDeprecatedRules":"478"},{"filePath":"844","messages":"845","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"846","usedDeprecatedRules":"478"},{"filePath":"847","messages":"848","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"849","usedDeprecatedRules":"478"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852","usedDeprecatedRules":"478"},{"filePath":"853","messages":"854","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"478"},{"filePath":"856","messages":"857","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"858","usedDeprecatedRules":"478"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"861","usedDeprecatedRules":"478"},{"filePath":"862","messages":"863","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864","usedDeprecatedRules":"478"},{"filePath":"865","messages":"866","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"867","usedDeprecatedRules":"478"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"870","usedDeprecatedRules":"478"},{"filePath":"871","messages":"872","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873","usedDeprecatedRules":"478"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"876","usedDeprecatedRules":"478"},{"filePath":"877","messages":"878","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"879","usedDeprecatedRules":"478"},{"filePath":"880","messages":"881","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882","usedDeprecatedRules":"478"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"885","usedDeprecatedRules":"478"},{"filePath":"886","messages":"887","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"888","usedDeprecatedRules":"478"},{"filePath":"889","messages":"890","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"891","usedDeprecatedRules":"478"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"894","usedDeprecatedRules":"478"},{"filePath":"895","messages":"896","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"897","usedDeprecatedRules":"478"},{"filePath":"898","messages":"899","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"900","usedDeprecatedRules":"478"},{"filePath":"901","messages":"902","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"903","messages":"904","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905","usedDeprecatedRules":"478"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"908","messages":"909","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"910","messages":"911","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"912","usedDeprecatedRules":"478"},{"filePath":"913","messages":"914","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"915","messages":"916","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"917","usedDeprecatedRules":"478"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"920","usedDeprecatedRules":"478"},{"filePath":"921","messages":"922","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"923","usedDeprecatedRules":"478"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"926","usedDeprecatedRules":"478"},{"filePath":"927","messages":"928","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929","usedDeprecatedRules":"478"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"932","usedDeprecatedRules":"478"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"935","usedDeprecatedRules":"478"},{"filePath":"936","messages":"937","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"938","usedDeprecatedRules":"478"},{"filePath":"939","messages":"940","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"941","usedDeprecatedRules":"478"},{"filePath":"942","messages":"943","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"944","usedDeprecatedRules":"478"},{"filePath":"945","messages":"946","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"947","usedDeprecatedRules":"478"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"950","usedDeprecatedRules":"478"},{"filePath":"951","messages":"952","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"953","usedDeprecatedRules":"478"},{"filePath":"954","messages":"955","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"956","usedDeprecatedRules":"478"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"959","usedDeprecatedRules":"478"},{"filePath":"960","messages":"961","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"962","usedDeprecatedRules":"478"},{"filePath":"963","messages":"964","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"965","usedDeprecatedRules":"478"},{"filePath":"966","messages":"967","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968","usedDeprecatedRules":"478"},{"filePath":"969","messages":"970","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971","usedDeprecatedRules":"478"},{"filePath":"972","messages":"973","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"974","usedDeprecatedRules":"478"},{"filePath":"975","messages":"976","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"977","usedDeprecatedRules":"478"},{"filePath":"978","messages":"979","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"980","usedDeprecatedRules":"478"},{"filePath":"981","messages":"982","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"983","usedDeprecatedRules":"478"},{"filePath":"984","messages":"985","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"986","messages":"987","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"988","usedDeprecatedRules":"478"},{"filePath":"989","messages":"990","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"991","usedDeprecatedRules":"478"},{"filePath":"992","messages":"993","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"994","usedDeprecatedRules":"995"},{"filePath":"996","messages":"997","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"998","usedDeprecatedRules":"478"},{"filePath":"999","messages":"1000","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001","usedDeprecatedRules":"478"},{"filePath":"1002","messages":"1003","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004","usedDeprecatedRules":"478"},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1007","usedDeprecatedRules":"478"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010","usedDeprecatedRules":"995"},{"filePath":"1011","messages":"1012","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1015","usedDeprecatedRules":"478"},{"filePath":"1016","messages":"1017","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1018","usedDeprecatedRules":"478"},{"filePath":"1019","messages":"1020","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1021","usedDeprecatedRules":"478"},{"filePath":"1022","messages":"1023","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1024","usedDeprecatedRules":"478"},{"filePath":"1025","messages":"1026","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1027","usedDeprecatedRules":"478"},{"filePath":"1028","messages":"1029","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030","usedDeprecatedRules":"478"},{"filePath":"1031","messages":"1032","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1033","usedDeprecatedRules":"478"},{"filePath":"1034","messages":"1035","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1036","usedDeprecatedRules":"478"},{"filePath":"1037","messages":"1038","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1039","usedDeprecatedRules":"478"},{"filePath":"1040","messages":"1041","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1042","usedDeprecatedRules":"478"},{"filePath":"1043","messages":"1044","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1045","usedDeprecatedRules":"478"},{"filePath":"1046","messages":"1047","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1048","usedDeprecatedRules":"478"},{"filePath":"1049","messages":"1050","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1051","usedDeprecatedRules":"478"},{"filePath":"1052","messages":"1053","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1054","usedDeprecatedRules":"478"},{"filePath":"1055","messages":"1056","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1057","usedDeprecatedRules":"478"},{"filePath":"1058","messages":"1059","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1060","usedDeprecatedRules":"478"},{"filePath":"1061","messages":"1062","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1063","usedDeprecatedRules":"478"},{"filePath":"1064","messages":"1065","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1066","usedDeprecatedRules":"478"},{"filePath":"1067","messages":"1068","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1069","usedDeprecatedRules":"478"},{"filePath":"1070","messages":"1071","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1072","usedDeprecatedRules":"478"},{"filePath":"1073","messages":"1074","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1075","usedDeprecatedRules":"478"},{"filePath":"1076","messages":"1077","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1078","usedDeprecatedRules":"478"},{"filePath":"1079","messages":"1080","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1081","usedDeprecatedRules":"478"},{"filePath":"1082","messages":"1083","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1084","usedDeprecatedRules":"478"},{"filePath":"1085","messages":"1086","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1087","usedDeprecatedRules":"478"},{"filePath":"1088","messages":"1089","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1090","usedDeprecatedRules":"478"},{"filePath":"1091","messages":"1092","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1093","usedDeprecatedRules":"478"},{"filePath":"1094","messages":"1095","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1096","usedDeprecatedRules":"478"},{"filePath":"1097","messages":"1098","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1099","usedDeprecatedRules":"478"},{"filePath":"1100","messages":"1101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1102","usedDeprecatedRules":"478"},{"filePath":"1103","messages":"1104","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1105","usedDeprecatedRules":"478"},{"filePath":"1106","messages":"1107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1108","usedDeprecatedRules":"478"},{"filePath":"1109","messages":"1110","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1111","usedDeprecatedRules":"478"},{"filePath":"1112","messages":"1113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1114","usedDeprecatedRules":"478"},{"filePath":"1115","messages":"1116","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1117","usedDeprecatedRules":"478"},{"filePath":"1118","messages":"1119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1120","usedDeprecatedRules":"478"},{"filePath":"1121","messages":"1122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123","usedDeprecatedRules":"478"},{"filePath":"1124","messages":"1125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1126","usedDeprecatedRules":"478"},{"filePath":"1127","messages":"1128","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1129","usedDeprecatedRules":"478"},{"filePath":"1130","messages":"1131","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1132","usedDeprecatedRules":"478"},{"filePath":"1133","messages":"1134","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1135","usedDeprecatedRules":"478"},"F:\\React code\\diagnostic\\src\\index.js",[],["1136","1137"],"F:\\React code\\diagnostic\\src\\App.js",[],"F:\\React code\\diagnostic\\src\\reportWebVitals.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\index.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\index.js",[],"F:\\React code\\diagnostic\\src\\layouts\\layout.js",["1138","1139","1140","1141","1142","1143","1144","1145","1146","1147"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, Switch } from \"react-router-dom\";\r\nimport CustomBreadcrumb from \"../components/breadcrumbs\";\r\nimport Header from \"../components/header\";\r\nimport RouteWithSubRoutes from \"../components/RouteWithSubRoutes\";\r\nimport Sidebar from \"../components/sidebar\";\r\nimport routes from \"../routes\";\r\nimport {\r\n  getUserFilterList,\r\n  getUserRightList,\r\n} from \"../_redux/actions/common.action\";\r\n\r\nconst MainLayout = () => {\r\n  const dispatch = useDispatch();\r\n  const [showSideBar, setShowSidebar] = useState(false);\r\n  const [pinSidebar, setPinSidebar] = useState(false);\r\n\r\n  const [userRightListArr, setUserRightList] = useState([]);\r\n  const getuserRightListResponse = useSelector(\r\n    (state) => state.common.userRightList\r\n  );\r\n\r\n  const [subMenuList, setSubMenuList] = useState([]);\r\n  const [selectedItems, setSelectedItems] = useState({\r\n    main: null,\r\n    subMenu: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserRightList());\r\n    // dispatch(getUserFilterList());\r\n  }, []);\r\n\r\n  const groupBy = (array, key) => {\r\n    // Return the end result\r\n    return array.reduce((result, currentValue) => {\r\n      // If an array already present for key, push it to the array. Else create an array and push the object\r\n      (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n        currentValue\r\n      );\r\n      // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\r\n      return result;\r\n    }, {}); // empty object is the initial value for result object\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (getuserRightListResponse?.length > 0) {\r\n      const groupedMenu = groupBy(getuserRightListResponse, \"group_name\");\r\n\r\n      setUserRightList(getuserRightListResponse);\r\n    }\r\n  }, [getuserRightListResponse]);\r\n\r\n  const handleMenuChange = (id) => {\r\n    var tempMenuIndex = userRightListArr.findIndex((x) => x.menu_id === id);\r\n    if (tempMenuIndex > -1) {\r\n      setSubMenuList(userRightListArr[tempMenuIndex].transaction_lst);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-frame\">\r\n      <Header onHeaderClick={() => setShowSidebar(!showSideBar)} />\r\n      <div className=\"mt-5\">\r\n        <CustomBreadcrumb />\r\n        <Switch>\r\n          {routes.map((route, i) => (\r\n            <RouteWithSubRoutes key={i} {...route} />\r\n          ))}\r\n          <Redirect from=\"/\" to=\"/dashboard\" />\r\n        </Switch>\r\n      </div>\r\n\r\n      {/* <div className=\"container-fluid p-0\">\r\n        <div className=\"row\">\r\n          <div className={pinSidebar ? \"col-md-2\" : \"sidebar-fixed\"}>\r\n            <Sidebar menuList={userRightListArr} show={showSideBar} />\r\n          </div>\r\n\r\n          <div className={pinSidebar ? \"col-md-10\" : \"col-md-12\"}>\r\n            <Header onHeaderClick={() => setShowSidebar(!showSideBar)} />\r\n            <CustomBreadcrumb />\r\n            <Switch>\r\n              {routes.map((route, i) => (\r\n                <RouteWithSubRoutes key={i} {...route} />\r\n              ))}\r\n              <Redirect from=\"/\" to=\"/dashboard\" />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","F:\\React code\\diagnostic\\src\\pages\\Auth\\Login.js",["1148","1149","1150","1151","1152","1153"],"import React, { useEffect, useState } from 'react';\r\nimport bg from '../../assets/image/bg-5.jpg';\r\nimport SimpleReactValidator from 'simple-react-validator';\r\nimport useForceUpdate from 'use-force-update';\r\nimport { FormHelperText } from '@material-ui/core';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { checkAuthCred, checkAuthOTP } from '../../_redux/actions/auth.action';\r\nimport GlobalAlert from '../../components/GlobalAlert';\r\n\r\nconst Login = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst forceUpdate = useForceUpdate();\r\n\tconst [validator , setValidator] = useState(new SimpleReactValidator())\r\n\tconst [userDetails , setUserDetails] = useState({\r\n\t\tuser_name:'',\r\n\t\tpassword:''\r\n\t});\r\n\r\n\tconst [messageAlert , setMessageAlert] = useState({\r\n\t\tshow:false,\r\n\t\tmessage:\"\",\r\n\t\ttype:\"\"\r\n\t});\r\n\r\n\tconst [isLoading , setIsLoading] = useState(false);\r\n\r\n\tconst checkAuthCredResponse = useSelector((state) => state.auth);\r\n\tconst checkAuthOtpResponse = useSelector((state) => state.auth.getOtpResponse);\r\n\r\n\tconst [otp , setOtp] = useState('');\r\n\r\n\tconst handleOtp = (event) => {\t\r\n\t\tsetOtp(event.target.value);\r\n\t}\r\n\r\n\tconst [showOtp , setShowOtp] = useState(false);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetUserDetails({...userDetails, \r\n\t\t\t[event.target.name]:event.target.value\r\n\t\t});\r\n\t}\r\n\r\n\tconst checkLogin = () => {\r\n\t\tif(validator.fieldValid('Username') && validator.fieldValid('Password')){\r\n\t\t\tdispatch(checkAuthCred(userDetails))\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvalidator.showMessages();\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tconst checkOTP = () => {\r\n\t\tif(validator.fieldValid('OTP')){\r\n\t\t\tvar login = `grant_type=password&username=${userDetails.user_name}&password=${otp}`;\r\n\t\t\tdispatch(checkAuthOTP(login));\r\n\t\t\tsetIsLoading(true);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvalidator.showMessages();\r\n\t\t\tforceUpdate();\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tif(checkAuthCredResponse){\r\n\t\t\tsetIsLoading(checkAuthCredResponse.loadingStatus);\r\n\t\t\tsetMessageAlert({...messageAlert,\r\n\t\t\t\tshow:checkAuthCredResponse.responseMessage !== \"\",\r\n\t\t    \tmessage:checkAuthCredResponse.responseMessage,\r\n\t\t\t\ttype:checkAuthCredResponse.isValidCred ? \"success\" : \"danger\"\r\n\t\t\t});\r\n\t\t\tsetShowOtp(checkAuthCredResponse.isValidCred);\r\n\t\t}\r\n\t},[checkAuthCredResponse]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif(!(Object.keys(checkAuthOtpResponse).length === 0 && checkAuthOtpResponse.constructor === Object)){\r\n\t\t\tif(checkAuthOtpResponse.valid){\r\n\t\t\t\tlocalStorage.setItem(\"token\",checkAuthOtpResponse.access_token);\r\n\t\t\t\tlocalStorage.setItem(\"login\",checkAuthOtpResponse.valid);\r\n\t\t\t\tlocalStorage.setItem(\"userName\",checkAuthOtpResponse.userName);\r\n\t\t\t\tlocalStorage.setItem(\"userId\",checkAuthOtpResponse.userId);\r\n\t\t\t\tlocalStorage.setItem(\"code\",checkAuthOtpResponse.code);\r\n\t\t\t\tlocalStorage.setItem(\"encrypt_userId\",checkAuthOtpResponse.encrypt_userId);\r\n\t\t\t\twindow.location.reload();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tsetMessageAlert({...messageAlert,\r\n\t\t\t\t\tshow:!checkAuthOtpResponse.valid,\r\n\t\t\t\t\tmessage:checkAuthOtpResponse.message,\r\n\t\t\t\t\ttype:checkAuthOtpResponse.valid ? \"success\" : \"danger\"\r\n\t\t\t\t});\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t}\r\n\t\t}\r\n\t},[checkAuthOtpResponse])\r\n\r\n    return(\r\n        <div className=\"d-flex flex-column flex-root h-100\">\r\n\t\t \r\n\t\t\t<div className=\"login login-2 login-signin-on d-flex flex-column flex-lg-row flex-column-fluid bg-white\" id=\"kt_login\">\r\n\t\t\t\t \r\n\t\t\t\t<div className=\"login-aside order-2 order-lg-1 d-flex flex-column-fluid flex-lg-row-auto bgi-size-cover bgi-no-repeat p-7 p-lg-10\">\r\n\t\t\t\t\t \r\n\t\t\t\t\t<div className=\"d-flex flex-row-fluid flex-column justify-content-between\">\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t<div className=\"d-flex flex-column-fluid flex-column flex-center mt-5 mt-lg-0\">\r\n\t\t\t\t\t\t\t<a href=\"#\" className=\"mb-15 text-center\">\r\n\t\t\t\t\t\t\t\t<img src=\"assets/media/logos/logo-letter-1.png\" className=\"max-h-75px\" alt=\"\" />\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t<div className=\"login-form login-signin\">\r\n\t\t\t\t\t\t\t\t<div className=\"text-center mb-10 mb-lg-20\">\r\n\t\t\t\t\t\t\t\t\t<h2 className=\"font-weight-bold\">Sign In</h2>\r\n\t\t\t\t\t\t\t\t\t<p className=\"text-muted font-weight-bold\">{showOtp ? \"OTP sent on email and whatsapp\" : \"Enter your username and password\"}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t \t<GlobalAlert show={messageAlert.show} type={messageAlert.type} message={messageAlert.message} />\r\n\t\t\t\t\t\t\t\t<form className=\"form\" noValidate=\"novalidate\" onSubmit={(e) => {\r\n\t\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t\tif(showOtp){\r\n\t\t\t\t\t\t\t\t\t\tcheckOTP();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\t\t\tcheckLogin();\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}}>\r\n\t\t\t\t\t\t\t\t\t{!showOtp ? <React.Fragment> <div className=\"form-group py-3 m-0\">\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"form-control h-auto border-0 px-0 placeholder-dark-75\" type=\"Email\" placeholder=\"Username\" name=\"user_name\" onChange={handleChange} autoComplete=\"off\" />\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText className=\"text-danger\">{validator.message('Username', userDetails.user_name , 'required')}</FormHelperText>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"form-group py-3 border-top m-0\">\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"form-control h-auto border-0 px-0 placeholder-dark-75\" type=\"Password\" onChange={handleChange} placeholder=\"Password\" name=\"password\" />\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText className=\"text-danger\">{validator.message('Password', userDetails.password , 'required')}</FormHelperText>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"form-group d-flex flex-wrap justify-content-between align-items-center mt-3\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"checkbox-inline\">\r\n\t\t\t\t\t\t\t\t\t\t\t<label className=\"checkbox checkbox-outline m-0 text-muted\">\r\n\t\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"remember\" />\r\n\t\t\t\t\t\t\t\t\t\t\t<span></span>Remember me</label>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t<a href=\"#\" id=\"kt_login_forgot\" className=\"text-muted text-hover-primary\">Forgot Password ?</a>\r\n\t\t\t\t\t\t\t\t\t</div> </React.Fragment> : <div className=\"form-group py-3 border-top m-0\">\r\n\t\t\t\t\t\t\t\t\t\t<input className=\"form-control h-auto border-0 px-0 placeholder-dark-75\" type=\"Password\" onChange={handleOtp} placeholder=\"OTP\"  name=\"otp\" />\r\n\t\t\t\t\t\t\t\t\t\t<FormHelperText className=\"text-danger\">{validator.message('OTP', otp , 'required|min:4|max:4')}</FormHelperText>\r\n\r\n\t\t\t\t\t\t\t\t\t</div>}\r\n\t\t\t\t\t\t\t\t\t<div className=\"form-group d-flex flex-wrap justify-content-between align-items-center mt-2\">\r\n\t\t\t\t\t\t\t\t\t\t<button id=\"kt_login_signin_submit\" className=\"btn btn-primary font-weight-bold w-100 px-9 py-4 my-3\" disabled={isLoading}>{isLoading ? <i class=\"fas fa-spinner fa-spin\"></i> : showOtp ? \"Submit\" : \"Sign In\"}</button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t\t<div className=\"d-flex flex-column-auto justify-content-between mt-15\">\r\n\t\t\t\t\t\t\t<div className=\"text-dark-50 font-weight-bold order-2 order-sm-1 my-2\">Developed and maintained by Rohin Infotech</div>\r\n\t\t\t\t\t\t\t \r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t\t \r\n\t\t\t\t<div className=\"order-1 order-lg-2 flex-column-auto flex-lg-row-fluid d-flex flex-column p-7\" style={{backgroundImage:`url(${bg})`}}>\r\n\t\t\t\t\t \r\n\t\t\t\t\t<div className=\"d-flex flex-column-fluid flex-lg-center\">\r\n\t\t\t\t\t\t<div className=\"d-flex flex-column justify-content-center\">\r\n\t\t\t\t\t\t\t<h1 className=\"display-2 font-weight-bold my-7 text-white\">ΔIAΓNO∑TIX</h1>\r\n\t\t\t\t\t\t\t{/* <p className=\"font-weight-bold font-size-lg text-white opacity-80\">The ultimate Bootstrap, Angular 8, React &amp; VueJS admin theme\r\n\t\t\t\t\t\t\t<br />framework for next generation web apps.</p> */}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t \r\n\t\t\t\t</div>\r\n\t\t\t\t \r\n\t\t\t</div>\r\n\t\t\t \r\n\t\t</div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport  default Login;","F:\\React code\\diagnostic\\src\\pages\\index.js",["1154","1155","1156"],"import React, { useEffect } from 'react';\r\nimport MainLayout from '../layouts/layout';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { checkAuthOTP, getDecryptUserId } from '../_redux/actions/auth.action';\r\n\r\n\r\n\r\n\r\nconst SwitchApp = (props) => {\r\nconst isAuthorisedByUrl = new URLSearchParams(props.location.search).get(\"token\");\r\nconst dispatch = useDispatch();\r\nconst getDecryptUserDetailsResponse = useSelector((state) => state.auth.decryptUserDetails);\r\nconst checkAuthOtpResponse = useSelector((state) => state.auth.getOtpResponse);\r\n\r\nuseEffect(() => {\r\n    if(isAuthorisedByUrl){\r\n        const param = {\r\n            encrypt_user_id:isAuthorisedByUrl\r\n        }\r\n        dispatch(getDecryptUserId(param));\r\n    }\r\n    else{\r\n        window.location = \"/\";\r\n    }\r\n},[isAuthorisedByUrl]);\r\n\r\n\r\nuseEffect(() => {\r\n    if(getDecryptUserDetailsResponse){\r\n        console.log(getDecryptUserDetailsResponse);\r\n        var login = `grant_type=password&username=${getDecryptUserDetailsResponse.user_name}&password=${getDecryptUserDetailsResponse.password}`;\r\n        dispatch(checkAuthOTP(login));\r\n    }\r\n},[getDecryptUserDetailsResponse]);\r\n\r\nuseEffect(() => {\r\n    if(!(Object.keys(checkAuthOtpResponse).length === 0 && checkAuthOtpResponse.constructor === Object)){\r\n        if(checkAuthOtpResponse.valid){\r\n            localStorage.setItem(\"token\",checkAuthOtpResponse.access_token);\r\n            localStorage.setItem(\"login\",checkAuthOtpResponse.valid);\r\n            localStorage.setItem(\"userName\",checkAuthOtpResponse.userName);\r\n            localStorage.setItem(\"userId\",checkAuthOtpResponse.userId);\r\n            localStorage.setItem(\"code\",checkAuthOtpResponse.code);\r\n            localStorage.setItem(\"encrypt_userId\",checkAuthOtpResponse.encrypt_userId);\r\n            window.location = \"/\";\r\n        }\r\n    }\r\n},[checkAuthOtpResponse])\r\n\r\n\r\n    return  <div className=\"switch_loader\">\r\n            <div>\r\n                <CircularProgress />\r\n                <h4>Please wait....</h4>\r\n            </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default SwitchApp;","F:\\React code\\diagnostic\\src\\_redux\\middleware\\auth.saga.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\common.saga.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\auth.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\common.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\materialcode.saga.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\configuration.saga.js",["1157","1158"],"import { put, takeLatest } from \"redux-saga/effects\";\r\nimport {  deleteSelectedPincode, deleteSelectedPincodeSuccess, getAccountGroupBrowse, getAccountGroupBrowseSuccess, getCategoryList, getCategoryListSuccess, getPincodeBrowseList, getPincodeBrowseListSuccess, updateAccountGroupInfo, updateAccountGroupInfoSuccess, updatePincodeInfo } from \"../../actions/masters/configuration.action\";\r\n\r\nimport { ConfigurationMasterController } from \"../../controller/Masters/configuration.controller\";\r\n\r\nfunction* getAccountGroupBrowseSaga (action) {\r\n    try {   \r\n        const accountGroupList = yield ConfigurationMasterController.searchAccountGroupBrowse(action.payload.params);\r\n        yield put(getAccountGroupBrowseSuccess(accountGroupList));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getAccountGroupBrowseSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateAccountGroupInfoSaga (action) {\r\n    try {   \r\n        const updateAccountInfo = yield ConfigurationMasterController.updateAccountGroupInfo(action.payload.params);\r\n        yield put(updateAccountGroupInfoSuccess(updateAccountInfo));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(updateAccountGroupInfoSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getPincodeBrowseSaga (action) {\r\n    try {   \r\n        const pincodeList = yield ConfigurationMasterController.searchPincodeBrowse(action.payload.params);\r\n        yield put(getPincodeBrowseListSuccess(pincodeList));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getPincodeBrowseListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updatePincodeInfoSaga (action) {\r\n    try {   \r\n        const updateAccountInfo = yield ConfigurationMasterController.updatePincodeInfo(action.payload.params);\r\n        yield put(updateAccountGroupInfoSuccess(updateAccountInfo));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(updateAccountGroupInfoSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* deletePincodeInfoSaga (action) {\r\n    try {   \r\n        const response = yield ConfigurationMasterController.deleteSelectedPincode(action.payload.params);\r\n        yield put(deleteSelectedPincodeSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(deleteSelectedPincodeSuccess(error));\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function* ConfigurationMasterSaga () {\r\n    try {\r\n        yield takeLatest(getAccountGroupBrowse, getAccountGroupBrowseSaga);\r\n        yield takeLatest(updateAccountGroupInfo, updateAccountGroupInfoSaga);   \r\n        yield takeLatest(getPincodeBrowseList, getPincodeBrowseSaga);   \r\n        yield takeLatest(updatePincodeInfo, updatePincodeInfoSaga);   \r\n        yield takeLatest(deleteSelectedPincode, deletePincodeInfoSaga);   \r\n\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}","F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\product.saga.js",["1159","1160","1161","1162"],"import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getCategoryList, getCategoryListSuccess, getGGNameList, getGGNameListSuccess, getLPRefList, getLPRefListSuccess, getProductListBrowse, getProductListBrowseSuccess, updateProductListPrice, updateProductListPriceSuccess, updateProductLPRef, updateProductMovingNonMoving, updateProductVerifiedStatus } from \"../../actions/masters/product.action\";\r\nimport { ProductMasterController } from \"../../controller/Masters/product.controller\";\r\n\r\nfunction* getProductBrowseSaga (action) {\r\n    try {   \r\n        const listValue = yield ProductMasterController.getProductBrowse(action.payload.params, action.payload.filters);\r\n        yield put(getProductListBrowseSuccess(listValue));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getProductListBrowseSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getCategoryListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getCategoryList();\r\n        yield put(getCategoryListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getCategoryListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getLPRefListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getLPRefList();\r\n        yield put(getLPRefListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getLPRefListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getGGNameListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getGGNameList();\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductVerifiedStatusSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductVerifyStatus(action.payload.param);\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductListPriceSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductListPrice(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* updateProductLPRefSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductLpRef(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductMovingSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductMovingNonMoving(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nexport default function* ProductMasterSaga () {\r\n    try {\r\n        yield takeLatest(getProductListBrowse, getProductBrowseSaga);\r\n        yield takeLatest(getCategoryList, getCategoryListSaga);   \r\n        yield takeLatest(getLPRefList, getLPRefListSaga);   \r\n        yield takeLatest(getGGNameList, getGGNameListSaga);   \r\n        yield takeLatest(updateProductVerifiedStatus, updateProductVerifiedStatusSaga);   \r\n        yield takeLatest(updateProductListPrice, updateProductListPriceSaga);   \r\n        yield takeLatest(updateProductLPRef, updateProductLPRefSaga);   \r\n        yield takeLatest(updateProductMovingNonMoving, updateProductMovingSaga);   \r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}","F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\account.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\configuration.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\materialcode.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\product.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\reducers\\Masters\\all.reducer.js",[],"F:\\React code\\diagnostic\\src\\_redux\\middleware\\Masters\\account.saga.js",["1163"],"import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { AccountMasterController } from \"../../controller/Masters/account.controller\";\r\nimport { getAccountMasterFiltersList, getAccountMasterFiltersListSuccess, previewSelectedAccount, previewSelectedAccountSuccess, searchAccountMasterData, searchAccountMasterDataSuccess, setAccountHide, setAccountVerified } from '../../actions/masters/account.action';\r\n \r\n\r\nfunction* searchAccountMasterSaga (action) {\r\n    try {   \r\n        const browseAccountMaster = yield AccountMasterController.browseAccountData(action.payload.filters, action.payload.params);\r\n        yield put(searchAccountMasterDataSuccess(browseAccountMaster));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(searchAccountMasterDataSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* getAccountFilterSaga (action) {\r\n    try {   \r\n        const filterList = yield AccountMasterController.getAccountMasterFilters();\r\n        yield put(getAccountMasterFiltersListSuccess(filterList));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getAccountMasterFiltersListSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* previewSelectedAccountSaga (action) {\r\n    try {   \r\n        const accountDetails = yield AccountMasterController.getSelectedAccountDetails(action.payload);\r\n        yield put(previewSelectedAccountSuccess(accountDetails));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* setAccountHideSaga (action) {\r\n    try {   \r\n        const accountEdit = yield AccountMasterController.accountHideUpdate(action.payload);\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* setAccountVerifiedSaga (action) {\r\n    try {   \r\n        const accountEdit = yield AccountMasterController.updateAccountVerified(action.payload);\r\n        if(!accountEdit.valid){\r\n            alert(\"something went wrong\");\r\n        }\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\n\r\n \r\n\r\n\r\nexport default function* AccountMasterSaga () {\r\n    try {\r\n        yield takeLatest(searchAccountMasterData, searchAccountMasterSaga);\r\n        yield takeLatest(getAccountMasterFiltersList, getAccountFilterSaga);\r\n        yield takeLatest(previewSelectedAccount, previewSelectedAccountSaga);\r\n        yield takeLatest(setAccountHide, setAccountHideSaga);\r\n        yield takeLatest(setAccountVerified, setAccountVerifiedSaga);\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}","F:\\React code\\diagnostic\\src\\routes.js",[],"F:\\React code\\diagnostic\\src\\components\\RouteWithSubRoutes.js",[],"F:\\React code\\diagnostic\\src\\components\\breadcrumbs.js",[],"F:\\React code\\diagnostic\\src\\components\\header.js",["1164","1165","1166","1167","1168","1169"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport {\r\n  getUserFilterList,\r\n  getUserRightList,\r\n  setSelectedMenu,\r\n} from \"../_redux/actions/common.action\";\r\nimport { CommonController } from \"../_redux/controller/common.controller\";\r\nimport MainBar from \"./appbar\";\r\nimport MainMenu from \"./main_menu\";\r\nimport Submenu from \"./sub_menu\";\r\nimport ThirdMenu from \"./third_menu\";\r\nconst Header = ({ onHeaderClick }) => {\r\n  const dispatch = useDispatch();\r\n  const [userRightListArr, setUserRightList] = useState([]);\r\n  const getuserRightListResponse = useSelector(\r\n    (state) => state.common.userRightList\r\n  );\r\n\r\n  const [subMenuList, setSubMenuList] = useState([]);\r\n  const [thirdMenuList, setThirdMenuList] = useState([])\r\n  const [selectedItems, setSelectedItems] = useState({\r\n    main: null,\r\n    subMenu: null,\r\n  });\r\n\r\n  const profileTransaction = [\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"Profile\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"Change Password\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"Attendance\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"Leaves\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"Claims\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"Ledger\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"Cash Entry\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n    {\r\n      transaction_id: \"\",\r\n      transaction_name: \"DPR\",\r\n      edit_button: \"True\",\r\n      view_right: \"True\",\r\n      insert_right: \"True\",\r\n      update_right: \"True\",\r\n      delete_right: \"True\",\r\n      print_right: \"True\",\r\n    },\r\n  ];\r\n  const getThirdMenu = async (menu_id) => {\r\n    try {\r\n      let user_id = { user_id: localStorage.getItem(\"userId\") };\r\n      await CommonController.commonApiCallFilter(\r\n        \"menu/menu_list_level3?menu_id=\" + menu_id,\r\n        user_id,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n      \r\n        if (data.status === 200) {\r\n          setThirdMenuList(data.data)\r\n        }\r\n      }).catch(err => {\r\n        // showErrorToast(err.message)\r\n\r\n      })\r\n    } catch (err) {\r\n      // showErrorToast(err);\r\n    }\r\n  };\r\n\r\n  const getSubMenu = async (menu_id) => {\r\n    try {\r\n      let user_id = { user_id: localStorage.getItem(\"userId\") };\r\n      await CommonController.commonApiCallFilter(\r\n        \"menu/menu_list_level2?menu_id=\" + menu_id,\r\n        user_id,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n       \r\n        if (data.status === 200) {\r\n          setSubMenuList(data.data)\r\n        }\r\n      }).catch(err => {\r\n        // showErrorToast(err.message)\r\n\r\n      })\r\n    } catch (err) {\r\n      // showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(()=>{\r\n    if(subMenuList.length>0){\r\n      const id=subMenuList[0]?.transaction_id\r\n      getThirdMenu(id)\r\n    }\r\n  },[subMenuList])\r\n \r\n  useEffect(() => {\r\n    dispatch(getUserRightList());\r\n    // dispatch(getUserFilterList());\r\n  }, []);\r\n\r\n  const groupBy = (array, key) => {\r\n    // Return the end result\r\n    return array.reduce((result, currentValue) => {\r\n      // If an array already present for key, push it to the array. Else create an array and push the object\r\n      (result[currentValue[key]] = result[currentValue[key]] || []).push(\r\n        currentValue\r\n      );\r\n      // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\r\n      return result;\r\n    }, {}); // empty object is the initial value for result object\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (getuserRightListResponse?.data?.length > 0) {\r\n      // const groupedMenu = groupBy(getuserRightListResponse, \"group_name\");\r\n\r\n      setUserRightList(getuserRightListResponse.data);\r\n    }\r\n  }, [getuserRightListResponse]);\r\n\r\n  const handleMenuChange =(id) => {\r\n    var tempMenuIndex = userRightListArr.findIndex((x) => x.transaction_id === id);\r\n    if (userRightListArr[tempMenuIndex].display_name !== \"Profile\") {\r\n     getSubMenu(id)\r\n      // setSubMenuList(userRightListArr[tempMenuIndex].transaction_lst);\r\n    } else {\r\n      setSubMenuList(profileTransaction);\r\n      // getSubMenu()\r\n    }\r\n  };\r\n  const handleSubMenu = (id) => {\r\n    console.log(id)\r\n    if(subMenuList.length>0){\r\n    id===12?getThirdMenu(1):getThirdMenu(id)\r\n      \r\n    }\r\n\r\n  }\r\n \r\n  return (\r\n    <React.Fragment>\r\n      <MainBar onMenuClick={() => onHeaderClick()} />\r\n      <MainMenu list={userRightListArr} onMenuChange={handleMenuChange} />\r\n      {subMenuList.length > 0 ? <Submenu list={subMenuList} onSubMenuChange={handleSubMenu} /> : null}\r\n      {(thirdMenuList.length > 0)&&(subMenuList.length>0) ? <ThirdMenu list={thirdMenuList} list2={subMenuList} /> : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","F:\\React code\\diagnostic\\src\\components\\sidebar.js",["1170","1171"],"import React from \"react\";\n\nconst Sidebar = ({ onToggle, show, menuList }) => {\n  return (\n    <div className={`main-sidebar ${show ? \"sidebar--show\" : \"\"}`}>\n      <div className=\"top-main  d-flex align-items-center\">\n        <div className=\"logo-header mr-5\">\n          {/* <img src={logo} className=\"img-fluid\" /> */}\n          <h4 className=\"mb-0 text-white\" style={{ fontSize: 24 }}>\n            DIAGNOSTIC\n          </h4>\n          <p className=\"logo-text mb-0 text-white\">\n            <small>Diagnostic Automation</small>\n            <span className=\"ml-2\">13.5</span>\n          </p>\n        </div>\n        <img\n          src={\"/asset/icons/chevrons-left.svg\"}\n          onClick={() => onToggle()}\n          className=\"svg-menu mr-3\"\n        />\n        <img\n          src={\"/asset/icons/pin.svg\"}\n          className=\"svg-menu\"\n          onClick={() => onToggle()}\n        />\n      </div>\n      <div className=\"sidebar-menulist mt-10\">\n        {console.log(menuList)}\n        <ul className=\"list-unstyled\">\n          {menuList &&\n            menuList.map((menu, index) => {\n              return (\n                <li key={index}>\n                  {\" \"}\n                  {menu.menu_name}{\" \"}\n                  <i className=\"fas fa-chevron-right float-right\"></i>\n                </li>\n              );\n            })}\n          <li></li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","F:\\React code\\diagnostic\\src\\components\\GlobalAlert.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\common.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\auth.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\auth.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\common.controller.js",[],"F:\\React code\\diagnostic\\src\\layouts\\Support.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\materialcode.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\product.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\configuration.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\controller\\Masters\\account.controller.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\account.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\materialcode.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\product.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\all.action.js",[],"F:\\React code\\diagnostic\\src\\_redux\\actions\\masters\\configuration.action.js",[],"F:\\React code\\diagnostic\\src\\components\\sub_menu.js",["1172"],"import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Submenu = (props) => {\r\n  const { list, onSubMenuChange } = props;\r\n  const selectedMenu = window.location.pathname.split(\"/\")[1];\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[2];\r\n  // console.log(selectedSubMenu);\r\n  // console.log(selectedMenu);\r\n  return (\r\n    <div className=\"header-bottom submenu\">\r\n      <div className=\"px-3\">\r\n        <div className=\"header-navs header-navs-left\">\r\n          <ul className=\"menu-nav mb-0 list-unstyled d-flex flex-wrap\">\r\n            {list.length > 0\r\n              ? list.map((item, index) => {\r\n                  if (item.level ===2) {\r\n                    // console.log(\r\n                    //   item.transaction_name\r\n                    //     .replace(/[^a-zA-Z ]/g, \"\")\r\n                    //     .replace(/\\s+/g, \"-\")\r\n                    //     .toLowerCase()\r\n                    // ); \r\n                    return (\r\n                      <li className=\"menu-item\" key={\"sublist\" + index}>\r\n                        <Link\r\n                          onClick={()=>onSubMenuChange(item.transaction_id)}\r\n                          className={\r\n                            \"menu-link py-2 px-4 rounded mr-2 d-inline-block \" +\r\n                            (selectedSubMenu ===\r\n                            item.transaction_name\r\n                              .replace(/[^a-zA-Z ]/g, \"\")\r\n                              .replace(/\\s+/g, \"-\")\r\n                              .toLowerCase()\r\n                              ? \"active\"\r\n                              : \"\")\r\n                          }\r\n                          to={`/${selectedMenu.toLowerCase()}/${item.transaction_name\r\n                            .replace(/[^a-zA-Z ]/g, \"\")\r\n                            .replace(/\\s+/g, \"-\")\r\n                            .toLowerCase()}`}\r\n                        >\r\n                          {\" \"}\r\n                          <span className=\"menu-text\">\r\n                            {item.transaction_name}\r\n                          </span>\r\n                        </Link>\r\n                      </li>\r\n                    );\r\n                  }\r\n                })\r\n              : null}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Submenu;\r\n\r\n// + (selectedSubMenu === (item.transaction_name.replace(/\\s+/g, '-').toLowerCase()) ? \"active\" : \"\")\r\n","F:\\React code\\diagnostic\\src\\components\\main_menu.js",[],"F:\\React code\\diagnostic\\src\\components\\appbar.js",["1173","1174","1175"],"import {\r\n  AppBar,\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport logo from \"../assets/image/logo.png\";\r\n\r\nimport user from \"../assets/image/user.jpg\";\r\nimport moment from \"moment\";\r\nimport AirplayIcon from \"@material-ui/icons/Airplay\";\r\n\r\nconst auth = localStorage.getItem(\"login\");\r\nconst userName = localStorage.getItem(\"userName\");\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n  return (\r\n    <Box position=\"relative\" display=\"inline-flex\">\r\n      <CircularProgress\r\n        disableShrink\r\n        size={35}\r\n        variant=\"determinate\"\r\n        {...props}\r\n      />\r\n      <Box\r\n        top={0}\r\n        left={0}\r\n        bottom={0}\r\n        right={0}\r\n        position=\"absolute\"\r\n        display=\"flex\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        <Typography\r\n          variant=\"h6\"\r\n          component=\"div\"\r\n          color=\"textSecondary\"\r\n        >{`${Math.round(props.time)}`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst MainBar = ({ onMenuClick }) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const [time, setTime] = useState({\r\n    hrs: moment().format(\"h\"),\r\n    minutes: moment().format(\"mm\"),\r\n    seconds: moment().format(\"ss\"),\r\n    hrsValue: Math.ceil((parseInt(moment().format(\"h\")) * 8 + 1) / 10) * 10,\r\n    minValue: Math.ceil((parseInt(moment().format(\"mm\")) * 2 + 1) / 10) * 10,\r\n    secValue: Math.ceil((parseInt(moment().format(\"ss\")) * 1.6 + 1) / 10) * 10,\r\n  });\r\n\r\n  useEffect(() => {\r\n    calculateTime();\r\n  }, []);\r\n\r\n  const handleMenu = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const calculateTime = () => {\r\n    setInterval(() => {\r\n      setTime({\r\n        ...time,\r\n        hrsValue: Math.ceil((parseInt(moment().format(\"h\")) * 8 + 1) / 10) * 10,\r\n        hrs: moment().format(\"h\"),\r\n        secValue:\r\n          Math.ceil((parseInt(moment().format(\"ss\")) * 1.6 + 1) / 10) * 10,\r\n        seconds: moment().format(\"ss\"),\r\n        minValue:\r\n          Math.ceil((parseInt(moment().format(\"mm\")) * 2 + 1) / 10) * 10,\r\n        minutes: moment().format(\"mm\"),\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  const handleLogOut = () => {\r\n    localStorage.clear();\r\n    window.location = \"/login\";\r\n  };\r\n\r\n  const handleSwitch = () => {\r\n    window.location = `http://erp.diag.in/SwitchLogin.aspx?${localStorage.getItem(\r\n      \"encrypt_userId\"\r\n    )}`;\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\" className=\"theme_bg\" elevation={0}>\r\n      <Toolbar variant=\"dense\" disableGutters>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-2 d-flex align-items-center\">\r\n              <div className=\"logo-header\">\r\n                {/* <img src={logo} className=\"img-fluid\" /> */}\r\n                <h4 className=\"mb-0\">DIAGNOSTIC</h4>\r\n                <p className=\"logo-text mb-0\">\r\n                  <small>Diagnostic Automation</small>\r\n                  <span className=\"ml-2\">13.5</span>\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col-md-10 text-right\">\r\n              <div className=\"row justify-content-end\">\r\n                <div className=\"col-md-1 text-center py-1 pr-0\">\r\n                  <div className=\"clock_container\">\r\n                    <p className=\"mb-0\">Week </p>\r\n                    <h2 className=\"mb-0 mt-2 mx-auto\">{moment().isoWeek()}</h2>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-2 py-1\">\r\n                  <div className=\"clock_container\">\r\n                    <p className=\"mb-2 text-center\">\r\n                      {moment().format(\"dddd DD MMM YYYY\")}\r\n                    </p>\r\n                    <div className=\"clock_circle d-flex justify-content-around\">\r\n                      <div className=\"circle_box\">\r\n                        <CircularProgressWithLabel\r\n                          className=\"hrs\"\r\n                          value={time.hrsValue}\r\n                          time={time.hrs}\r\n                        />\r\n                      </div>\r\n                      <div className=\"circle_box\">\r\n                        <CircularProgressWithLabel\r\n                          color=\"secondary\"\r\n                          value={time.minValue}\r\n                          time={time.minutes}\r\n                        />\r\n                      </div>\r\n                      <div className=\"circle_box\">\r\n                        <CircularProgressWithLabel\r\n                          className=\"seconds\"\r\n                          value={time.secValue}\r\n                          time={time.seconds}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-2 text-right d-flex align-items-center py-1\">\r\n                  <div className=\"clock_container ml-auto\">\r\n                    <p className=\"mb-0\">Switch</p>\r\n                    <Button\r\n                      variant=\"default\"\r\n                      className=\"bg-white switch_btn mx-3 mt-2\"\r\n                      variant=\"contained\"\r\n                      onClick={handleSwitch}\r\n                      disableElevation\r\n                    >\r\n                      <AirplayIcon />\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* <IconButton\r\n                                        aria-label=\"account of current user\"\r\n                                        aria-controls=\"menu-appbar\"\r\n                                        aria-haspopup=\"true\"\r\n                                        onClick={handleSwitch}\r\n                                        color=\"inherit\" variant=\"contained\">\r\n                                         \r\n                                    </IconButton> */}\r\n                  {auth && (\r\n                    <div className=\"clock_container ml-3\">\r\n                      <p className=\"mb-0\">{userName}</p>\r\n                      <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n                        className=\"pt-2 pb-0\"\r\n                        onClick={handleMenu}\r\n                        color=\"inherit\"\r\n                      >\r\n                        <div className=\"user_header d-flex align-items-center\">\r\n                          <Avatar alt=\"Remy Sharp\" src={user} />\r\n                          {/* <span className=\"ml-3\">{userName}</span> */}\r\n                        </div>\r\n                      </IconButton>\r\n                      <Menu\r\n                        id=\"menu-appbar\"\r\n                        anchorEl={anchorEl}\r\n                        getContentAnchorEl={null}\r\n                        anchorOrigin={{\r\n                          vertical: \"bottom\",\r\n                          horizontal: \"center\",\r\n                        }}\r\n                        keepMounted\r\n                        transformOrigin={{\r\n                          vertical: \"top\",\r\n                          horizontal: \"center\",\r\n                        }}\r\n                        open={open}\r\n                        onClose={handleClose}\r\n                      >\r\n                        <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                        <MenuItem onClick={handleLogOut}>Logout</MenuItem>\r\n                      </Menu>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default MainBar;\r\n","F:\\React code\\diagnostic\\src\\layouts\\Stock.js",[],"F:\\React code\\diagnostic\\src\\layouts\\Sales.js",["1176"],"import React from \"react\";\r\nimport { BrowserRouter, Redirect, Switch, Route } from \"react-router-dom\";\r\nimport SalesIssueIndex from \"../pages/Sales/issues\";\r\nimport SalesMarketingIndex from \"../pages/Sales/marketingVisit\";\r\nimport SalesQuotationIndex from \"../pages/Sales/quotation\";\r\nimport SalesCostingIndex from \"../pages/Sales/Sales Costing\";\r\nimport SalesIndex from \"../pages/Sales/Sales Enquiry\";\r\nimport SalesSiDiIndex from \"../pages/Sales/salesOrder/slDI\";\r\nimport SalesSlSoPosIndex from \"../pages/Sales/salesOrder/slSoPos\";\r\nimport SalesSlSoPosSummariseIndex from \"../pages/Sales/salesOrder/slSoPosSummarise\";\r\nimport SoDetail from \"../pages/Sales/salesOrder/soDetail\";\r\nimport SalesSoAmdIndex from \"../pages/Sales/soAmedment\";\r\n\r\nconst Sales = () => {\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[2];\r\n  const menuLength=window.location.pathname.split('/').length;\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Switch>\r\n        <Route exact path=\"/sales/enquiry\" component={SalesIndex} />\r\n        <Route exact path=\"/sales/costing\" component={SalesCostingIndex} />\r\n        <Route exact path=\"/sales/quotation\" component={SalesQuotationIndex} />\r\n        <Route exact path=\"/sales/sales-order-amendment\" component={SalesSoAmdIndex} />\r\n        <Route exact path=\"/sales/marketing-visit\" component={SalesMarketingIndex} />\r\n        <Route exact path=\"/sales/issues\" component={SalesIssueIndex} />\r\n        <Route exact path=\"/sales/sales-order/so-details\" component={SoDetail} />\r\n        <Route exact path=\"/sales/sales-order/sl-so-pos\" component={SalesSlSoPosIndex} />\r\n        <Route exact path=\"/sales/sales-order/non-sl-so-pos\" component={SalesSlSoPosIndex} />\r\n        <Route exact path=\"/sales/sales-order/so-pos-summarize\" component={SalesSlSoPosSummariseIndex} />\r\n        <Route exact path=\"/sales/sales-order/sl-di\" component={SalesSiDiIndex} />\r\n        <Route exact path=\"/sales/sales-order/non-sl-di\" component={SalesSiDiIndex} />\r\n       \r\n       {(menuLength<=2||selectedSubMenu===\"enquiry\")&& <Redirect from=\"/sales\" to=\"/sales/enquiry\" />}\r\n       {(selectedSubMenu===\"costing\")&& <Redirect from=\"/sales\" to=\"/sales/costing\" />}\r\n       {(selectedSubMenu===\"quotation\")&& <Redirect from=\"/sales\" to=\"/sales/quotation\" />}\r\n       {(selectedSubMenu===\"sales-order-amendment\")&& <Redirect from=\"/sales\" to=\"/sales/sales-order-amendment\" />}\r\n       {(selectedSubMenu===\"marketing-visit\")&& <Redirect from=\"/sales\" to=\"/sales/marketing-visit\" />}\r\n       {(selectedSubMenu===\"issues\")&& <Redirect from=\"/sales\" to=\"/sales/issues\" />}\r\n       {(selectedSubMenu===\"sales-order\")&& <Redirect from=\"/sales\" to=\"/sales/sales-order/so-details\" />}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sales;\r\n","F:\\React code\\diagnostic\\src\\layouts\\Profile.js",[],"F:\\React code\\diagnostic\\src\\layouts\\Masters.js",["1177"],"import React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport AccountsMaster from \"../pages/Master/Accounts_Master/index\";\r\nimport ComboMLFBIndex from \"../pages/Master/combomlfb\";\r\nimport ConfigurationMaster from \"../pages/Master/Configuration\";\r\nimport EmployeeIndex from \"../pages/Master/employee\";\r\nimport GodownIndex from \"../pages/Master/godown\";\r\nimport GodownBrowse from \"../pages/Master/godown/browse\";\r\nimport ItemGroupIndex from \"../pages/Master/item Group\";\r\nimport MaterialCodeIndex from \"../pages/Master/Material Code\";\r\nimport ProductMasterIndex from \"../pages/Master/Product\";\r\nimport UserRightList from \"../pages/Master/user rights/browse\";\r\n\r\nconst Masters = () => {\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[2];\r\n  const menuLength=window.location.pathname.split('/').length;\r\n  // console.log(window.location.pathname.split('/').length)\r\n  \r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Switch>\r\n        <Route\r\n          path=\"/masters/account-master/customer\"\r\n          exact><AccountsMaster accountType=\"Customer\"/></Route>\r\n         <Route\r\n          path=\"/masters/account-master/supplier\"\r\n          exact\r\n       \r\n        > <AccountsMaster accountType=\"Supplier\"/></Route>\r\n        <Route\r\n          path=\"/masters/configuration-master\"\r\n          exact\r\n          component={ConfigurationMaster}\r\n        />\r\n        <Route\r\n          path=\"/masters/product-master/sl\"\r\n          exact\r\n          component={ProductMasterIndex}\r\n        />\r\n         <Route\r\n          path=\"/masters/product-master/non-sl\"\r\n          exact\r\n          component={ProductMasterIndex}\r\n        />\r\n        <Route\r\n          path=\"/masters/material-code/customer\"\r\n          exact\r\n          component={MaterialCodeIndex}\r\n        />\r\n          <Route\r\n          path=\"/masters/material-code/supplier\"\r\n          exact\r\n          component={MaterialCodeIndex}\r\n        />\r\n        <Route\r\n          path=\"/masters/item-group-master\"\r\n          exact\r\n          component={ItemGroupIndex}\r\n        />\r\n        <Route path=\"/masters/combined-mlfb\" exact component={ComboMLFBIndex} />\r\n        <Route path=\"/masters/godown-master\" exact component={GodownIndex} />\r\n        <Route path=\"/masters/user-right\" exact component={UserRightList} />\r\n        <Route\r\n          path=\"/masters/employee-master/employee\"\r\n          exact\r\n          component={EmployeeIndex}\r\n        />\r\n         <Route\r\n          path=\"/masters/employee-master/user-rights\"\r\n          exact\r\n          component={EmployeeIndex}\r\n        />\r\n       {(menuLength<=2||selectedSubMenu===\"account-master\")&&<Redirect to=\"/masters/account-master/customer\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"product-master\"&&<Redirect to=\"/masters/product-master/sl\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"employee-master\"&&<Redirect to=\"/masters/employee-master/employee\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"configuration-master\"&&<Redirect to=\"/masters/configuration-master\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"material-code\"&&<Redirect to=\"/masters/material-code/customer\" from=\"/masters\" />} \r\n       {selectedSubMenu===\"user-right\"&&<Redirect to=\"/masters/user-right\" from=\"/masters\" />} \r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Masters;\r\n","F:\\React code\\diagnostic\\src\\layouts\\Logistics.js",["1178","1179"],"import React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport DCIndex from \"../pages/DC\";\r\nimport CcrInIndex from \"../pages/logistics/ccr\";\r\nimport CcrIndex from \"../pages/logistics/ccr\";\r\nimport CcrOutIndex from \"../pages/logistics/ccr/ccrOut\";\r\nimport CourierInIndex from \"../pages/logistics/courier\";\r\nimport CourierIndex from \"../pages/logistics/courier\";\r\nimport CourierOutIndex from \"../pages/logistics/courier/courierOut\";\r\nimport CourierInvoiceIndex from \"../pages/logistics/courier/invoice\";\r\n// import DeliveryChallanIndex from \"../pages/logistics/delivery-challan\";\r\n\r\n// import DeliveryChallanBrowse from \"../pages/logistics/delivery-challan/browse\";\r\nimport ChallanIndexMdc from \"../pages/logistics/delivery-challan/mdc\";\r\nimport SlWipIndex from \"../pages/logistics/delivery-challan/slwip/index\";\r\nimport ChallanIndex from \"../pages/logistics/delivery-challan/index\";\r\nimport JobWorkIndex from \"../pages/logistics/job-work\";\r\nimport JobWorkOutIndex from \"../pages/logistics/job-work/jobWorkOut\";\r\nimport MrnDcIndex from \"../pages/logistics/material-receipt-note\";\r\nimport MrnPoIndex from \"../pages/logistics/material-receipt-note/mrn-po\";\r\nimport ReturnableIndex from \"../pages/logistics/returnable-gate-pass\";\r\nimport RrgpIndex from \"../pages/logistics/returnable-gate-pass/rrgp\";\r\n\r\nconst Logistics = () => {\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[2];\r\n  const menuLength=window.location.pathname.split('/').length;\r\n  // console.log(window.location.pathname.split('/').length)\r\n  // console.log(window.location.pathname.split('/'))\r\n  \r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <Switch>\r\n        <Route path=\"/logistics/out/sl-dc\" exact ><ChallanIndex slType={\"SL\"}/></Route>\r\n        <Route path=\"/logistics/out/non-sl-dc\" exact><ChallanIndex slType={\"Non SL\"}/></Route>\r\n        <Route path=\"/logistics/out/mdc\" exact component={ChallanIndexMdc} />\r\n        <Route path=\"/logistics/out/sl-wip\"exact><SlWipIndex slType={\"SL\"}/></Route>\r\n        <Route path=\"/logistics/out/non-sl-wip\" exact><SlWipIndex slType={\"Non SL\"}/></Route>\r\n        <Route path=\"/logistics/out/dc-packaging\" exact component={DCIndex} />\r\n        <Route path=\"/logistics/in/mrn-dc\" exact component={MrnDcIndex} />\r\n        <Route path=\"/logistics/in/mrn-po\" exact component={MrnPoIndex} />\r\n        <Route path=\"/logistics/in/mrn-wip\" exact component={MrnDcIndex} />\r\n        <Route path=\"/logistics/rgp/rgp\" exact component={ReturnableIndex} />\r\n        <Route path=\"/logistics/rgp/rrgp\" exact component={RrgpIndex} />\r\n        <Route path=\"/logistics/jw/jwin\" exact component={JobWorkIndex} />\r\n        <Route path=\"/logistics/jw/jwo\" exact component={JobWorkOutIndex} />\r\n        <Route path=\"/logistics/ccr/ccr-in\" exact component={CcrInIndex} />\r\n        <Route path=\"/logistics/ccr/ccr-out\" exact component={CcrOutIndex} />\r\n        <Route path=\"/logistics/courier/in\" exact component={CourierInIndex} />\r\n        <Route path=\"/logistics/courier/out\" exact component={CourierOutIndex} />\r\n        <Route path=\"/logistics/courier/invoice\" exact component={CourierInvoiceIndex} />\r\n        {/* <Route\r\n          path=\"/logistics/delivery-challan\"\r\n          exact\r\n          component={DeliveryChallanIndex}\r\n        /> */}\r\n  \r\n        {(menuLength<=2||selectedSubMenu===\"in\")&&<Redirect to=\"/logistics/in/mrn-dc\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"out\"&&<Redirect to=\"/logistics/out/sl-dc\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"rgp\"&&<Redirect to=\"/logistics/rgp/rgp\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"jw\"&&<Redirect to=\"/logistics/jw/jwin\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"ccr\"&&<Redirect to=\"/logistics/ccr/ccr-in\" from=\"/logistics\" />}\r\n        {selectedSubMenu===\"courier\"&&<Redirect to=\"/logistics/courier/in\" from=\"/logistics\" />}\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Logistics;\r\n","F:\\React code\\diagnostic\\src\\services.js",["1180","1181","1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193"],"import config from \"./config\";\r\nimport axios from \"axios\";\r\nconst token = localStorage.getItem(\"token\");\r\n\r\nexport const userService = {\r\n  post,\r\n  login,\r\n  get,\r\n  localpost,\r\n  localget,\r\n  jsonpost,\r\n  image,\r\n  // getStatus\r\n};\r\n\r\nfunction post(apiEndpoint, payload, domain) {\r\n  return axios\r\n    .post(\r\n      `${domain === \"node\" ? config.nodeUrl : config.apiUrl}` + apiEndpoint,\r\n      payload,\r\n      getOptions()\r\n    )\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      if (err.response != undefined && err.response.status == 401) {\r\n        // window.open('/','_self');\r\n      } else {\r\n        //alert('operation not able to perform');\r\n      }\r\n      return err;\r\n    });\r\n}\r\n\r\nfunction image(apiEndpoint, payload) {\r\n  return axios\r\n    .post(config.apiUrl + apiEndpoint, payload, getOptionImage())\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      if (err.response != undefined && err.response.status == 401) {\r\n        // window.open('/','_self');\r\n      } else {\r\n        //alert('operation not able to perform');\r\n      }\r\n      return err;\r\n    });\r\n}\r\n\r\nfunction jsonpost(apiEndpoint, payload) {\r\n  return axios\r\n    .post(config.jsonUrl + apiEndpoint, payload, getOptions())\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      if (err.response != undefined && err.response.status == 401) {\r\n        // window.open('/','_self');\r\n      } else {\r\n        //alert('operation not able to perform');\r\n      }\r\n      return err;\r\n    });\r\n}\r\n\r\nfunction localpost(apiEndpoint, payload) {\r\n  return axios\r\n    .post(config.nodeUrl + apiEndpoint, payload, getOptions())\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      if (err.response != undefined && err.response.status == 401) {\r\n        // window.open('/','_self');\r\n      } else {\r\n        //alert('operation not able to perform');\r\n      }\r\n      return err;\r\n    });\r\n}\r\n\r\nfunction localget(apiEndpoint) {\r\n  return axios\r\n    .get(config.nodeUrl + apiEndpoint, getOptions())\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      if (err.response != undefined && err.response.status == 401) {\r\n        // window.open('/','_self');\r\n      } else {\r\n        //alert('operation not able to perform');\r\n      }\r\n      return err;\r\n    });\r\n}\r\n\r\nfunction get(apiEndpoint, domain) {\r\n  return axios\r\n    .get(\r\n      `${domain === \"node\" ? config.nodeUrl : config.apiUrl}` + apiEndpoint,\r\n      getOptions()\r\n    )\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      if (err.response != undefined && err.response.status == 401) {\r\n        // window.open('/','_self');\r\n      } else {\r\n        //alert('operation not able to perform');\r\n      }\r\n      return err;\r\n    });\r\n}\r\n\r\nfunction login(apiEndpoint, payload) {\r\n  return axios\r\n    .post(config.baseUrl + apiEndpoint, payload, getOptionsLogin())\r\n    .then((response) => {\r\n      return response;\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      if (err.response != undefined && err.response.status == 401) {\r\n        // window.open('/','_self');\r\n      } else {\r\n        //alert('operation not able to perform');\r\n      }\r\n      return err;\r\n    });\r\n}\r\n\r\nfunction getOptions() {\r\n  var options = {};\r\n  options.headers = {\r\n    Authorization: \"Bearer \" + token, //the token is a variable which holds the token\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  };\r\n}\r\n\r\nfunction getOptionsLogin() {\r\n  var options = {};\r\n  options.headers = {\r\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  };\r\n}\r\n\r\nfunction getOptionImage() {\r\n  var options = {};\r\n  options.headers = {\r\n    \"Content-Type\": \"multipart/form-data\",\r\n    \"Access-Control-Allow-Origin\": \"*\",\r\n  };\r\n}\r\n","F:\\React code\\diagnostic\\src\\pages\\Stock\\stockBrowse.js",["1194","1195"],"import { DatePicker } from \"@material-ui/pickers\";\nimport { Button, MenuItem, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { FormControlLabel, FormGroup, Checkbox } from \"@mui/material\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport moment from \"moment\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst StockBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    date: new Date(),\n    zero: false,\n    category_id: \"\",\n    product_id: \"\",\n    siemens_product: \"\",\n  });\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [categoryList, setCategoryList] = useState([]);\n  const [mlfbList, setMLFBList] = useState([]);\n  const [selectedValue, setSelectedValue] = useState({\n    category: \"\",\n    mlfb: \"\",\n  });\n\n  const handleChange = (e) => {\n    if (e.target.name === \"zero\") {\n      setBodyParam({ ...bodyParam, [e.target.name]: e.target.checked });\n    } else {\n      setBodyParam({ ...bodyParam, [e.target.name]: e.target.value });\n    }\n  };\n\n  const handleDateChange = (date) => {\n    setBodyParam({ ...bodyParam, date: date });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getMLFBList = async (id) => {\n    await CommonController.commonApiCallFilter(\n      `Dropdown/GetMlfbListInStock`,\n      {\n        category_id: id,\n      },\n      \"get\"\n    ).then((data) => setMLFBList(data));\n  };\n\n  const getCategoryList = async () => {\n    await CommonController.commonApiCallFilter(\"Dropdown/GetCategoryList\").then(\n      (data) => setCategoryList(data)\n    );\n  };\n\n  useEffect(() => {\n    getCategoryList();\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleAutoChange = (name, value) => {\n    setBodyParam({ ...bodyParam, [name]: value });\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      let body = { ...bodyParam };\n      body.date = moment(bodyParam.date).format(\"DD-MM-yyyy\");\n      body.zero = bodyParam.zero ? \"0\" : \"\";\n      await CommonController.commonApiCall(\n        \"Stock/NewDailyStockReportInStock\",\n        params,\n        body,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"Date\"\n                value={bodyParam.date}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo\"\n                options={categoryList}\n                onChange={(event, value) => {\n                  setSelectedValue({ ...selectedValue, category: value });\n                  handleAutoChange(\"category_id\", value ? value.id : null);\n                  if (value) {\n                    getMLFBList(value.id);\n                  }\n                }}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.category}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Category\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo2\"\n                options={mlfbList}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.mlfb}\n                onChange={(event, value) => {\n                  handleAutoChange(\"product_id\", value ? value.id : null);\n                  setSelectedValue({ ...selectedValue, mlfb: value });\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"MLFB No.\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <TextField\n                fullWidth\n                id=\"outlined-basic\"\n                size=\"small\"\n                onChange={(e) => {\n                  handleChange(e);\n                }}\n                name=\"siemens_product\"\n                select\n                label=\"Siemen Product\"\n                variant=\"outlined\"\n              >\n                <MenuItem value={\"siemens\"}>Siemens</MenuItem>\n                <MenuItem value={\"non-siemens\"}>Non-Siemens</MenuItem>\n              </TextField>\n            </div>\n            <div className=\"col-md-1 mb-5 mb-md-0\">\n              <FormGroup>\n                <FormControlLabel\n                  control={<Checkbox defaultChecked />}\n                  label=\"Zero\"\n                  name=\"zero\"\n                  checked={bodyParam.zero}\n                  onChange={handleChange}\n                />\n              </FormGroup>\n            </div>\n            <div className=\"col-md-2\">\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"filter_value\"\n                label=\"Search\"\n                onChange={handleParams}\n                value={params.filter_value}\n              />\n            </div>\n            <div className=\"col-md-12 text-right\">\n              <Button\n                variant=\"contained\"\n                onClick={getBrowseListData}\n                disableElevation\n              >\n                Refresh\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"id\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"erp_code\",\n                headerName: \"ERP Code\",\n                flex: 0.1,\n              },\n              {\n                field: \"category\",\n                headerName: \"Category\",\n                flex: 0.1,\n              },\n              {\n                field: \"group\",\n                headerName: \"Group\",\n                flex: 0.1,\n              },\n              {\n                field: \"item\",\n                headerName: \"Item\",\n                flex: 0.1,\n              },\n              {\n                field: \"mlfb\",\n                headerName: \"MLFB\",\n                flex: 0.1,\n              },\n              {\n                field: \"description\",\n                headerName: \"Description\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"store_qty\",\n                headerName: \"Store Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n              {\n                field: \"di_qty\",\n                headerName: \"DI Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n              {\n                field: \"open_qty\",\n                headerName: \"Open Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n            ]}\n            pagination\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={browseListData}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default StockBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Stock\\serialLedgerBrowse.js",["1196","1197"],"import { TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst SerialLedgerBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    product_id: \"\",\n    serial_no: \"\",\n    category_id: \"\",\n  });\n  const [categoryList, setCategoryList] = useState([]);\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [mlfbList, setMLFBList] = useState([]);\n  const [selectedValue, setSelectedValue] = useState({\n    category: \"\",\n    mlfb: \"\",\n  });\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n  const getMLFBList = async (id) => {\n    await CommonController.commonApiCallFilter(\n      `Dropdown/GetMlfbListInStock`,\n      {\n        category_id: id,\n      },\n      \"get\"\n    ).then((data) => setMLFBList(data));\n  };\n\n  const getCategoryList = async () => {\n    await CommonController.commonApiCallFilter(\"Dropdown/GetCategoryList\").then(\n      (data) => setCategoryList(data)\n    );\n  };\n\n  useEffect(() => {\n    getCategoryList();\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [bodyParam]);\n\n  const handleAutoChange = (name, value) => {\n    setBodyParam({ ...bodyParam, [name]: value });\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"Stock/ProductLedgerSerialNoReport\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo\"\n                options={categoryList}\n                onChange={(event, value) => {\n                  setSelectedValue({ ...selectedValue, category: value });\n                  handleAutoChange(\"category_id\", value ? value.id : null);\n                  if (value) {\n                    getMLFBList(value.id);\n                  }\n                }}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.category}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"Category\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo2\"\n                options={mlfbList}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue.mlfb}\n                onChange={(event, value) => {\n                  handleAutoChange(\"product_id\", value ? value.id : null);\n                  setSelectedValue({ ...selectedValue, mlfb: value });\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"MLFB No.\"\n                  />\n                )}\n              />\n            </div>\n            <div className=\"col-md-2\">\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                name=\"serial_no\"\n                label=\"Serial No\"\n                onChange={(e) =>\n                  setBodyParam({ ...bodyParam, serial_no: e.target.value })\n                }\n                value={bodyParam.serial_no}\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"id\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"entry_type\",\n                headerName: \"Entry Type\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"tran_no\",\n                headerName: \"Tran No\",\n                flex: 0.1,\n              },\n              {\n                field: \"date\",\n                headerName: \"Date\",\n                flex: 0.1,\n              },\n              {\n                field: \"party\",\n                headerName: \"Party\",\n                flex: 0.1,\n              },\n              {\n                field: \"mlfb_no\",\n                headerName: \"In Qty\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"serial_no\",\n                headerName: \"Out Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n            ]}\n            pagination\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={[]}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SerialLedgerBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Stock\\itemLedgerBrowse.js",["1198","1199","1200","1201","1202","1203","1204"],"import { DatePicker } from \"@material-ui/pickers\";\nimport { Button, MenuItem, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { FormControlLabel, FormGroup, Checkbox } from \"@mui/material\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport moment from \"moment\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst ItemLedgerBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    sdate: new Date(new Date().getTime() - 24 * 60 * 60 * 1000),\n    edate: new Date(),\n    product_id: \"\",\n  });\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [mlfbList, setMLFBList] = useState([]);\n  const [selectedValue, setSelectedValue] = useState(\"\");\n\n  const getProductList = async () => {\n    await CommonController.commonApiCallFilter(\n      \"Dropdown/GetProductMlfb\",\n      {}\n    ).then((data) => setMLFBList(data));\n  };\n\n  const handleDateChange = (name, date) => {\n    setBodyParam({ ...bodyParam, [name]: date });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getProductList();\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [bodyParam]);\n\n  const handleAutoChange = (name, value) => {\n    setBodyParam({ ...bodyParam, [name]: value });\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      let body = { ...bodyParam };\n      body.sdate = moment(bodyParam.sdate).format(\"DD-MM-yyyy\");\n      body.edate = moment(bodyParam.edate).format(\"DD-MM-yyyy\");\n      await CommonController.commonApiCall(\n        \"Stock/NewDailyLedgerReportInStock\",\n        params,\n        body,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"From Date\"\n                value={bodyParam.sdate}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"sdate\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"To Date\"\n                value={bodyParam.edate}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"edate\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                minDate={bodyParam.sdate}\n                fullWidth\n              />\n            </div>\n\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <Autocomplete\n                disablePortal\n                id=\"combo-box-demo2\"\n                options={mlfbList}\n                fullWidth\n                getOptionLabel={(option) => option.value}\n                value={selectedValue}\n                onChange={(event, value) => {\n                  handleAutoChange(\"product_id\", value ? value.id : null);\n                  setSelectedValue(value);\n                }}\n                renderInput={(params) => (\n                  <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    size=\"small\"\n                    label=\"MLFB No.\"\n                  />\n                )}\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"id\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"entry_type\",\n                headerName: \"Entry Type\",\n                flex: 0.1,\n              },\n              {\n                field: \"comp_id\",\n                headerName: \"Comp Id\",\n                flex: 0.1,\n              },\n              {\n                field: \"tran_no\",\n                headerName: \"Tran No\",\n                flex: 0.1,\n              },\n              {\n                field: \"date\",\n                headerName: \"Date\",\n                flex: 0.1,\n              },\n              {\n                field: \"party\",\n                headerName: \"Party\",\n                flex: 0.1,\n              },\n              {\n                field: \"in_qty\",\n                headerName: \"In Qty\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"out_qty\",\n                headerName: \"Out Qty\",\n                flex: 0.1,\n                align: \"right\",\n              },\n              {\n                field: \"balance\",\n                headerName: \"Balance\",\n                flex: 0.1,\n                align: \"right\",\n              },\n            ]}\n            pagination\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={browseListData}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ItemLedgerBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Profile\\profile.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\user rights\\browse.js",["1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215"],"import {\n  Checkbox,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst UserRightList = () => {\n  const [menuList, setMenuList] = useState([]);\n  const [transactionList, setTransactionList] = useState([]);\n\n  const [selectedMenu, setSelectedMenu] = useState(null);\n  const [selectedTransaction, setSelectedTransaction] = useState(null);\n\n  const [userRightList, setUserRightList] = useState([]);\n  const [selectedUserRight, setSelectedUserRight] = useState([]);\n  const [filteredArray, setFilteredArray] = useState([]);\n\n  const getMenuList = () => {\n    CommonController.commonApiCallFilter(\"UserRight/UserTransactionMenuList\")\n      .then((data) => setMenuList(data.objList.menuList))\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n\n  const getTransactionList = (id) => {\n    CommonController.commonApiCallFilter(\"UserRight/UserTransactionList\", {\n      menu_id: id,\n    })\n      .then((data) => setTransactionList(data.objList.transctionList))\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n\n  const getUserRightList = (id) => {\n    CommonController.commonApiCallFilter(\n      \"UserRight/UserRightTransactionBrowse\",\n      {\n        transaction_id: id,\n      }\n    )\n      .then((data) => {\n        setUserRightList(data);\n        setFilteredArray(data);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n\n  const onSearch = (e) => {\n    if (e.code === \"Enter\") {\n      const items = userRightList.filter((x) => x.employee == e.target.value);\n\n      if (items.length > 0) {\n        setFilteredArray(items);\n      }\n    }\n  };\n\n  useEffect(() => {\n    getMenuList();\n  }, []);\n\n  const handleMenuChange = (event, value) => {\n    setSelectedMenu(value);\n    if (value) {\n      getTransactionList(value.id);\n    }\n  };\n\n  const handleTransactionChange = (event, value) => {\n    setSelectedTransaction(value);\n    if (value) {\n      getUserRightList(value.id);\n    }\n  };\n\n  const onUserRightChange = (obj, key, checked) => {\n    let selected = [...selectedUserRight];\n    let item = obj;\n    item[key] = checked ? \"True\" : \"False\";\n    let filteredIndex = selectedUserRight.findIndex(\n      (x) => x.user_id === obj.user_id\n    );\n    if (filteredIndex > -1) {\n      selected[filteredIndex][key] = checked ? \"True\" : \"False\";\n      setSelectedUserRight(selected);\n    } else {\n      setSelectedUserRight([...selectedUserRight, item]);\n    }\n  };\n\n  const onSave = () => {\n    CommonController.commonApiCallFilter(\"UserRight/UserRightsInsert\", {\n      userRightDetails: selectedUserRight,\n    })\n      .then((data) => {\n        if (data.valid) {\n          showSuccessToast(\"User updated successfully\");\n        } else {\n          showErrorToast(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <div className=\"container-fluid p-4\">\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            <Autocomplete\n              disablePortal\n              id=\"combo-box-demo1\"\n              options={menuList}\n              getOptionLabel={(option) => option.value}\n              fullWidth\n              onChange={handleMenuChange}\n              value={selectedMenu}\n              size=\"small\"\n              renderInput={(params) => (\n                <TextField {...params} variant=\"outlined\" label=\"Menu Item\" />\n              )}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <Autocomplete\n              disablePortal\n              id=\"combo-box-demo1\"\n              options={transactionList}\n              getOptionLabel={(option) => option.value}\n              fullWidth\n              onChange={handleTransactionChange}\n              value={selectedTransaction}\n              size=\"small\"\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  variant=\"outlined\"\n                  label=\"Transaction item\"\n                />\n              )}\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              label=\"Search\"\n              onKeyDown={onSearch}\n            />\n          </div>\n        </div>\n        <Paper style={{ width: \"100%\", overflow: \"hidden\" }}>\n          <TableContainer className=\"mt-4\" style={{ maxHeight: 440 }}>\n            <Table stickyHeader aria-label=\"sticky table\">\n              <TableHead>\n                <TableRow>\n                  <StyledTableCell>Transaction</StyledTableCell>\n                  <StyledTableCell>View</StyledTableCell>\n                  <StyledTableCell>New</StyledTableCell>\n                  <StyledTableCell>Edit</StyledTableCell>\n                  <StyledTableCell>Delete</StyledTableCell>\n                  <StyledTableCell>Print</StyledTableCell>\n                  <StyledTableCell>Approve</StyledTableCell>\n                  <StyledTableCell>Revise</StyledTableCell>\n                  <StyledTableCell>Allocation</StyledTableCell>\n                  <StyledTableCell>High Priority</StyledTableCell>\n                  <StyledTableCell>Special Column</StyledTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {filteredArray.map((menu, index) => {\n                  return (\n                    <TableRow\n                      sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                      key={index}\n                    >\n                      <TableCell>{menu.employee}</TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"view_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.view_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"insert_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.insert_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"edit_button\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.edit_button == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"delete_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.delete_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"print_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.print_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"approve_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.approve_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"revise_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.revise_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"allocation_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.allocation_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"high_priority_right\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.high_priority_right == \"True\"}\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <Checkbox\n                          onChange={(event) =>\n                            onUserRightChange(\n                              menu,\n                              \"special_column\",\n                              event.target.checked\n                            )\n                          }\n                          color=\"primary\"\n                          checked={menu.special_column == \"True\"}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Paper>\n        <div className=\"w-100 mt-3 text-right\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={onSave}\n            disableElevation\n          >\n            Update\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserRightList;\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\browse.js",["1216","1217","1218","1219","1220"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\n\r\nconst DeliveryChallanBrowse = ({ type ,slType }) => {\r\n  \r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    status: \"\",\r\n    chk_all: false,\r\n    sl_type:slType,\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    debounce(\r\n      setParams({ ...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n     setBodyParam({...bodyParam,sl_type:event})\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistics/dc/browseDelivery\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.recordsFiltered);\r\n          setAmountFigures({\r\n            amount: data.amount,\r\n            mdc_amount: data.mdc_amount,\r\n            actual_amount: data.actual_amount,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleBodyParam(slType)\r\n  \r\n  }, [slType]);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center\">\r\n        <div className=\"filter_box \">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-1 d-flex align-items-center\">\r\n              <h4 className=\"mb-2\">Filters</h4>\r\n            </div>\r\n          </div>\r\n          <div className=\"row \" style={{\"width\":\"200%\"}}>\r\n            <div className=\"col-md-2\">\r\n              <TextField\r\n                fullWidth\r\n                id=\"outlined-basic\"\r\n                size=\"small\"\r\n                onKeyUp={handleParams}\r\n                name=\"filter_value\"\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n\r\n            <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n          </div>\r\n        </div>\r\n        <div className=\"widget-container pl-5\">\r\n          <div className=\"widget-box first\">\r\n            <span>Amount</span>\r\n            <p>{currenyMasking(amountFigures.amount)}</p>\r\n          </div>\r\n          <div className=\"widget-box second\">\r\n            <span>MDC Amount</span>\r\n            <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n          </div>\r\n          <div className=\"widget-box third\">\r\n            <span>Actual Amount</span>\r\n            <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n\r\n            {\r\n              field: \"dc_no\",\r\n              headerName: \"D.C No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n\r\n            {\r\n              field: \"contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"sales_order\",\r\n              headerName: \"Sales Order\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"so_date\",\r\n              headerName: \"S.O. Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_date\",\r\n              headerName: \"Ref Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"di_no\",\r\n              headerName: \"DI No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"pi_no\",\r\n              headerName: \"PI No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"dispatch_thr\",\r\n              headerName: \"Dispatch Thr.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"destination\",\r\n              headerName: \"Destination\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"amount\",\r\n              headerName: \"Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mdc_amount\",\r\n              headerName: \"MDC Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"actual_amount\",\r\n              headerName: \"Actual Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"status\",\r\n              headerName: \"Status\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"comments\",\r\n              headerName: \"Comments\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Datetime\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]} \r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeliveryChallanBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\browse.js",["1221","1222"],"import { TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport { selectedGodownId } from \"../../../_redux/actions/masters/all.action\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst GodownBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Godown/BrowseGodownMaster\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedGodownId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Godown/GodownMasterDelete\", {\n      godown_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"godown_name\",\n              headerName: \"Godown Name\",\n              flex: 0.1,\n            },\n            {\n              field: \"address\",\n              headerName: \"Address\",\n              flex: 0.1,\n            },\n            {\n              field: \"datetime\",\n              headerName: \"Date\",\n              flex: 0.1,\n            },\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.godown_id)}\n                  onDelete={() => handleDeleteRow(params.row.godown_id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default GodownBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\index.js",["1223","1224","1225","1226"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBrowseUserRight } from \"../../../components/common\";\nimport SupportTicketApprovalBrowse from \"./browse\";\n\nconst SupportTicketApprovalIndex = () => {\n  const dispatch = useDispatch();\n  const userRight = useSelector((state) => state.common.userRightList);\n\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        {getBrowseUserRight(userRight)?.insert_right == \"True\" && (\n          <li className=\"nav-item\">\n            <a\n              className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n              onClick={() => {\n                // dispatch(clearSelectedGodownId());\n                handleIndex(1);\n              }}\n            >\n              New Ticket Approval\n            </a>\n          </li>\n        )}\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? <SupportTicketApprovalBrowse /> : \"\"}\n      </div>\n    </div>\n  );\n};\n\nexport default SupportTicketApprovalIndex;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\index.js",["1227","1228","1229","1230","1231"],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getBrowseUserRight } from \"../../../components/common\";\nimport AddTicketCommercial from \"./addCommericial\";\n\nimport SupportTicketCommericialBrowse from \"./tcBrowse\";\n\nconst SupportTicketCommercialIndex = (props) => {\n  const dispatch = useDispatch();\n  const approvalObj = props.location.state;\n  const userRight = useSelector((state) => state.common.userRightList);\n\n  const [selectedIndex, setSeletedIndex] = useState(\n    approvalObj ? approvalObj.index : 0\n  );\n  const [selectedId, setSelectedId] = useState(null);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Commercial\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SupportTicketCommericialBrowse\n            selectedPreviewId={(id) => {\n              setSelectedId(id);\n              handleIndex(1);\n            }}\n          />\n        ) : (\n          <AddTicketCommercial\n            previewId={approvalObj ? approvalObj.id : selectedId}\n            changeTab={handleIndex}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SupportTicketCommercialIndex;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\index.js",["1232","1233","1234","1235"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport AddSupportTicket from \"./addTicket\";\nimport SupportTicketBrowse from \"./browse\";\nimport SalesCostingBrowse from \"./browse\";\n\nconst SupportTicketIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Ticket\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? <SupportTicketBrowse /> : <AddSupportTicket />}\n      </div>\n    </div>\n  );\n};\n\nexport default SupportTicketIndex;\n","F:\\React code\\diagnostic\\src\\config.js",[],"F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\index.js",["1236","1237","1238"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Sales Enquiry\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesEnquiryBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesIndex;\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\index.js",["1239","1240","1241"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport DeliveryChallanBrowse from \"./browse\";\nimport AddDeliveryChallan from \"./dc-add\";\n\nconst ChallanIndex = ({ type ,slType}) => {\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n          {`New ${slType} DC` }\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <DeliveryChallanBrowse type={type} slType={slType} />\n        ) : (\n          <AddDeliveryChallan challanType={type} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ChallanIndex;\n","F:\\React code\\diagnostic\\src\\components\\common.js",["1242","1243"],"import { Button } from \"@material-ui/core\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure();\n\nexport const showSuccessToast = (msg) => {\n  toast.success(msg, {\n    position: \"bottom-right\",\n    autoClose: 10000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    theme: \"colored\",\n  });\n};\n\nexport const showErrorToast = (msg) => {\n  toast.error(msg, {\n    position: \"bottom-right\",\n    autoClose: 10000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    theme: \"colored\",\n  });\n};\n\nexport const buttonLoader = (loading, label, onClick, color) => {\n  return (\n    <Button\n      variant=\"contained\"\n      color={color}\n      disabled={loading}\n      onClick={onClick}\n      disableElevation\n    >\n      {loading ? <i class=\"fas fa-circle-notch fa-spin\"></i> : label}\n    </Button>\n  );\n};\n\nexport const getBrowseUserRight = (response) => {\n  \n  const pathArr = window.location.pathname.split(\"/\").filter((x) => x != \"\");\n  // console.log(pathArr)\n  // console.log(response.data)\n  // console.log(response.data.filter((x) => x.display_name.toLowerCase() == pathArr[0])[0]\n  // .display_name.toLowerCase().replace(new RegExp(\" \"), \"-\"))\n  // return response.data.filter((x) => x.display_name.toLowerCase() == pathArr[0])[0]\n  // .display_name.toLowerCase().replace(new RegExp(\" \"), \"-\")\n};\n\nexport const getAutoValue = (key, arr, val) => {\n  const value = arr.filter((x) => x[key] === val);\n  return value && value.length > 0 ? value[0] : null;\n};\n\nexport const debounce = (func, delay) => {\n  let debounceTimer;\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(debounceTimer);\n    debounceTimer = setTimeout(() => func.apply(context, args), delay);\n  };\n};\n\nexport const getUserId = () => {\n  return localStorage.getItem(\"userId\");\n};\n","F:\\React code\\diagnostic\\src\\components\\CustomPagination.js",[],"F:\\React code\\diagnostic\\src\\components\\customRowComponent.js",[],"F:\\React code\\diagnostic\\src\\pages\\DC\\index.js",["1244","1245","1246"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport DCBrowseList from \"./browse\";\nimport NewDCPackaging from \"./form\";\n\nconst DCIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Packaging\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? <DCBrowseList /> : <NewDCPackaging />}\n      </div>\n    </div>\n  );\n};\n\nexport default DCIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\index.js",["1247","1248"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { clearMaterialCodeEditId } from \"../../../_redux/actions/masters/materialcode.action\";\r\nimport AddMaterialCode from \"./addMaterialCode\";\r\nimport MaterialCodeBrowse from \"./browse\";\r\n\r\nconst MaterialCodeIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(0)}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(1)}\r\n          >\r\n            Add Material Code\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <MaterialCodeBrowse onEditMaterial={() => handleIndex(1)} />\r\n        ) : (\r\n          <AddMaterialCode\r\n            onCancel={() => {\r\n              handleIndex(0);\r\n              dispatch(clearMaterialCodeEditId());\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaterialCodeIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\index.js",["1249","1250"],"import React, { useState } from \"react\";\r\nimport AddNewProduct from \"./addProduct\";\r\nimport BrowseProductMaster from \"./browse\";\r\n\r\nconst ProductMasterIndex = () => {\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSelectedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n        <ul className=\"nav nav-tabs nav-tabs-line\">\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n              onClick={() => handleIndex(0)}\r\n            >\r\n              Browse\r\n            </a>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a\r\n              className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n              onClick={() => handleIndex(1)}\r\n            >\r\n              New Product\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <div className=\"tab-content\">\r\n          {selectedIndex === 0 ? (\r\n            <BrowseProductMaster onEdit={() => handleIndex(1)} />\r\n          ) : (\r\n            <AddNewProduct />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ProductMasterIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\index.js",["1251","1252","1253"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport AddItemGroupMaster from \"./addItem\";\nimport ItemGroupBrowse from \"./browse\";\n\n// import AddMaterialCode from \"./addMaterialCode\";\n\n// import MaterialCodeBrowse from \"./browse\";\n\nconst ItemGroupIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              //   dispatch(clearSelectedComboId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              //   dispatch(clearSelectedComboId());\n              handleIndex(1);\n            }}\n          >\n            New Item Group\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {\n          selectedIndex === 0 ? (\n            <ItemGroupBrowse onEdit={() => handleIndex(1)} />\n          ) : (\n            <AddItemGroupMaster />\n          )\n          //   <AddComboMLFB onClose={() => handleIndex(0)} />\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default ItemGroupIndex;\n","F:\\React code\\diagnostic\\src\\components\\dateFilter.js",["1254","1255"],"import { DatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { CommonController } from \"../_redux/controller/common.controller\";\r\nimport { showErrorToast } from \"./common\";\r\n\r\nconst DateFilter = ({ onDateUpdate }) => {\r\n  const [dateUpdate, setDateUpdate] = useState(0)\r\n  const [dateParams, setDateParams] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    from_date: null,\r\n    to_date: null,\r\n  });\r\n\r\n  const { from_date, to_date } = dateParams;\r\n  const getDateFilter = async () => {\r\n    try {\r\n      let user_id=localStorage.getItem(\"userId\")\r\n      await CommonController.commonApiCallFilter(\r\n        \"user/date_filter\",\r\n        {user_id:user_id},\r\n        \"get\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status===200) {\r\n         const [getDate]=data.data;\r\n         setDateParams({...dateParams,from_date:getDate.start_date,to_date:getDate.end_date\r\n         })\r\n          onDateUpdate();\r\n        } else {\r\n          showErrorToast(data.msg);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n\r\n  const updateDateFilter = async () => {\r\n    try {\r\n      let date = { ...dateParams };\r\n      date.from_date = moment(date.from_date).format(\"MM/DD/yyyy\");\r\n      date.to_date = moment(date.to_date).format(\"MM/DD/yyyy\");\r\n      await CommonController.commonApiCallFilter(\r\n        \"user/insert_date_filter\",\r\n        date,\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status===200) {\r\n\r\n          getDateFilter()\r\n        } else {\r\n          showErrorToast(data.msg);\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n \r\n\r\n  const handleDateChange = (name, date) => {\r\n    setDateParams({ ...dateParams, [name]: date });\r\n    setDateUpdate(dateUpdate+1);\r\n  };\r\n  useEffect(() => {\r\ngetDateFilter()\r\n  },[])\r\n  \r\n  useEffect(() => {\r\n    if (from_date && to_date) {\r\n      updateDateFilter();\r\n    }\r\n  }, [dateUpdate]);\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"col-md-2\">\r\n        <DatePicker\r\n          label=\"From Date\"\r\n          value={from_date}\r\n          format=\"dd/MM/yyyy\"\r\n          onChange={(date) => handleDateChange(\"from_date\", date)}\r\n          animateYearScrolling\r\n          inputVariant=\"outlined\"\r\n          size=\"small\"\r\n          fullWidth\r\n        />\r\n      </div>\r\n      <div className=\"col-md-2\">\r\n        <DatePicker\r\n          label=\"To Date\"\r\n          value={to_date}\r\n          onChange={(date) => handleDateChange(\"to_date\", date)}\r\n          animateYearScrolling\r\n          format=\"dd/MM/yyyy\"\r\n          minDate={from_date}\r\n          inputVariant=\"outlined\"\r\n          size=\"small\"\r\n          fullWidth\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default DateFilter;\r\n","F:\\React code\\diagnostic\\src\\components\\action-buttons.js",[],"F:\\React code\\diagnostic\\src\\components\\loader.js",["1256","1257"],"import React from \"react\";\nimport loaderImg from \"../assets/image/loader.gif\";\n\nexport const Loader = () => {\n  return \"\";\n  // <div className=\"custom-loading\">\n  //   <div>\n  //     <img src={loaderImg} />\n  //     {/* <Cu */}\n  //     <p>Please wait...</p>\n  //   </div>\n  // </div>\n};\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\browse.js",["1258","1259","1260","1261","1262","1263","1264","1265","1266"],"import {\n  TextField,\n  MenuItem,\n  ListItem,\n  ListItemText,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  DialogContent,\n  List,\n  ListItemAvatar,\n  Avatar,\n} from \"@material-ui/core\";\nimport { Button } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport DateFilter from \"../../../components/dateFilter\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst SupportTicketBrowse = (props) => {\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [attachedFile, setAttachedFile] = useState(null);\n  const [remarks, setRemarks] = useState({\n    mtran_id: \"\",\n    comments: \"\",\n    status: \"\",\n    attach_file: \"\",\n    rit_user: localStorage.getItem(\"userName\"),\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const [empList, setEmpList] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n  const [bodyParam, setBodyParam] = useState({\n    user_id: 1,\n    generated_by: \"\",\n    status: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"Ticket/SupportTicketBrowse\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const getEmployeeList = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        `Dropdown/GetEmpListInSupport`,\n        { user_id: localStorage.getItem(\"userId\") },\n        \"get\"\n      ).then((data) => {\n        setEmpList(data);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getEmployeeList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  const toggleRemarks = () => setRemarksModal(!remarksModal);\n\n  const saveRemarks = async () => {\n    setLoading(true);\n\n    try {\n      let formdata = new FormData();\n      formdata.append(\"file\", attachedFile);\n      await CommonController.commonApiFile(\n        \"Ticket/TicketImageInsert\",\n        formdata\n      );\n      await CommonController.commonApiCallFilter(\n        \"Ticket/TicketCommentInsert\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, mtran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Ticket/GetTicketComment\",\n      {\n        mtran_id: id,\n      },\n      \"post\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  return (\n    <>\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"generated_by\"\n              select\n              label=\"Generated By\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {empList &&\n                empList.map((emp, index) => {\n                  return (\n                    <MenuItem key={index} value={emp.value}>\n                      {emp.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"status\"\n              select\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"open\"}>Open</MenuItem>\n              <MenuItem value={\"close\"}>Close</MenuItem>\n            </TextField>\n          </div>\n        </div>\n      </div>\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status\"\n            onChange={onRemarkChange}\n            label=\"Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"comment\"\n            onChange={onRemarkChange}\n            label=\"Comments*\"\n            fullWidth\n          />\n          <div className=\"form-group mt-3\">\n            <label>Upload Attachment</label>\n            <input\n              className=\"form-control\"\n              id=\"files\"\n              onChange={(e) => {\n                if (e.target.files.length > 0) {\n                  setAttachedFile(e.target.files[0]);\n                  setRemarks({\n                    ...remarks,\n                    attach_file: e.target.files[0].name,\n                  });\n                } else {\n                  setAttachedFile(null);\n                  setRemarks({\n                    ...remarks,\n                    attach_file: \"\",\n                  });\n                }\n              }}\n              type=\"file\"\n            />\n          </div>\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      {remark.attach_file !== \"\" ? (\n                        <img\n                          src={\n                            \"https://diagapi.quickgst.in/Support_Attachment/\" +\n                            remark.attach_file\n                          }\n                        />\n                      ) : (\n                        <Avatar>\n                          <ImageIcon />\n                        </Avatar>\n                      )}\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.emp_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.comments}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n              hide: true,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"ticket_no\",\n              headerName: \"Ticket No\",\n              width: 120,\n            },\n            {\n              field: \"menu\",\n              headerName: \"Menu\",\n              width: 120,\n            },\n            {\n              field: \"transaction\",\n              headerName: \"Transaction\",\n              width: 170,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 150,\n            },\n            {\n              field: \"priority\",\n              headerName: \"Priority\",\n              width: 100,\n            },\n            {\n              field: \"details\",\n              headerName: \"Details\",\n              width: 200,\n            },\n            {\n              field: \"generated_by\",\n              headerName: \"Generated By\",\n              width: 130,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 170,\n            },\n            {\n              field: \"attachments\",\n              headerName: \"Attachments\",\n              width: 100,\n            },\n\n            {\n              field: \"\",\n              headerName: \"\",\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        Comment\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SupportTicketBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticket\\addTicket.js",["1267","1268","1269","1270","1271","1272","1273"],"import { Button, MenuItem, TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  buttonLoader,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport {\n  getUserFilterList,\n  getUserRightList,\n} from \"../../../_redux/actions/common.action\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst AddSupportTicket = () => {\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState({});\n\n  const [userRightListArr, setUserRightList] = useState([]);\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [attachments, setAttachments] = useState({\n    attach_file: null,\n    attach_file1: null,\n    attach_file2: null,\n  });\n\n  const [subMenuList, setSubMenuList] = useState([]);\n\n  useEffect(() => {\n    dispatch(getUserRightList());\n    // dispatch(getUserFilterList());\n  }, []);\n\n  const groupBy = (array, key) => {\n    // Return the end result\n    return array.reduce((result, currentValue) => {\n      // If an array already present for key, push it to the array. Else create an array and push the object\n      (result[currentValue[key]] = result[currentValue[key]] || []).push(\n        currentValue\n      );\n      // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate\n      return result;\n    }, {}); // empty object is the initial value for result object\n  };\n\n  useEffect(() => {\n    if (getuserRightListResponse.length > 0) {\n      const groupedMenu = groupBy(getuserRightListResponse, \"group_name\");\n\n      setUserRightList(getuserRightListResponse);\n    }\n  }, [getuserRightListResponse]);\n\n  const handleMenuChange = (id) => {\n    var tempMenuIndex = userRightListArr.findIndex((x) => x.menu_id === id);\n    if (tempMenuIndex > -1) {\n      setSubMenuList(userRightListArr[tempMenuIndex].transaction_lst);\n    }\n    setFormData({\n      ...formData,\n      menu: userRightListArr[tempMenuIndex].menu_id,\n      menu_name: userRightListArr[tempMenuIndex].menu_name,\n    });\n  };\n\n  const [formData, setFormData] = useState({\n    tran_id: \"\",\n    ticket_no: \"\",\n    date: \"\",\n    menu: \"\",\n    menu_name: \"\",\n    transaction: \"\",\n    type: \"\",\n    priority: \"\",\n    details: \"\",\n    attach_file: \"\",\n    attach_file1: \"\",\n    attach_file2: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const {\n    date,\n    ticket_no,\n    menu,\n    transaction,\n    details,\n\n    type,\n    priority,\n  } = formData;\n\n  useEffect(() => {\n    getSupportTicketData();\n  }, []);\n\n  const getSupportTicketData = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"Ticket/SupportTicketPreview\",\n        formData,\n        \"post\"\n      ).then((data) => {\n        setFormData({\n          ...formData,\n          date: data.date,\n          ticket_no: data.ticket_no,\n        });\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const handleFormData = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const handleFileChange = (e) => {\n    if (e.target.files.length > 0) {\n      setAttachments({ ...attachments, [e.target.name]: e.target.files[0] });\n      setFormData({ ...formData, [e.target.name]: e.target.files[0].name });\n    } else {\n      setAttachments({ ...attachments, [e.target.name]: null });\n      setFormData({ ...formData, [e.target.name]: \"\" });\n    }\n  };\n\n  const generateTicket = async () => {\n    try {\n      if (validateForm()) {\n        let formdata = new FormData();\n        for (var key in attachments) {\n          if (attachments.hasOwnProperty(key) && attachments[key]) {\n            formdata.append(key, attachments[key]);\n          }\n        }\n        await CommonController.commonApiFile(\n          \"Ticket/TicketImageInsert\",\n          formdata\n        );\n        await CommonController.commonApiCallFilter(\n          \"Ticket/SupportTicketInsert\",\n          formData\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Ticket Generated Successfully\");\n          } else {\n            showErrorToast(data.msg);\n          }\n        });\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const validateForm = () => {\n    let errors = {};\n    if (formData.menu == \"\") {\n      errors.menu = \"Menu required\";\n    } else {\n      delete errors.menu;\n    }\n\n    console.log(formData.type);\n    if (formData.type == \"\") {\n      errors.type = \"Type required\";\n    } else {\n      delete errors.type;\n    }\n\n    const valid = Object.keys(errors).length === 0 ? true : false;\n    setErrors(errors);\n    return valid;\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <div className=\"col-md-4 mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            disabled\n            size=\"small\"\n            name=\"date\"\n            label=\"Date\"\n            variant=\"outlined\"\n            value={date}\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-4  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"ticket_no\"\n            label=\"Ticket No\"\n            disabled\n            variant=\"outlined\"\n            value={ticket_no}\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-4  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"generated_by\"\n            disabled\n            label=\"Generated By\"\n            value={localStorage.getItem(\"userName\")}\n            variant=\"outlined\"\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"menu\"\n            select\n            label=\"Menu*\"\n            value={menu}\n            variant=\"outlined\"\n            onChange={(e) => {\n              handleMenuChange(e.target.value);\n            }}\n          >\n            <MenuItem value={\"\"}>None</MenuItem>\n            {userRightListArr.length > 0 &&\n              userRightListArr.map((menu, index) => {\n                return (\n                  <MenuItem key={index} value={menu.menu_id}>\n                    {menu.menu_name}\n                  </MenuItem>\n                );\n              })}\n          </TextField>\n          {errors.menu && <p className=\"text-danger mb-0\">{errors.menu}</p>}\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"transaction\"\n            select\n            label=\"Transaction\"\n            value={transaction}\n            variant=\"outlined\"\n            onChange={handleFormData}\n          >\n            {subMenuList.length > 0 &&\n              subMenuList.map((transaction, index) => {\n                return (\n                  <MenuItem key={index} value={transaction.transaction_name}>\n                    {transaction.transaction_name}\n                  </MenuItem>\n                );\n              })}\n          </TextField>\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"type\"\n            select\n            label=\"Type*\"\n            value={type}\n            variant=\"outlined\"\n            onChange={handleFormData}\n          >\n            <MenuItem value={\"New Development\"}>New Development</MenuItem>\n            <MenuItem value={\"Modification\"}>Modification</MenuItem>\n            <MenuItem value={\"Problem\"}>Problem</MenuItem>\n            <MenuItem value={\"Other\"}>Other</MenuItem>\n          </TextField>\n          {errors.type && <p className=\"text-danger mb-0\">{errors.type}</p>}\n        </div>\n        <div className=\"col-md-3  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"priority\"\n            select\n            label=\"Priority\"\n            variant=\"outlined\"\n            value={priority}\n            onChange={handleFormData}\n          >\n            <MenuItem value={\"High\"}>High</MenuItem>\n            <MenuItem value={\"Medium\"}>Medium</MenuItem>\n            <MenuItem value={\"Low\"}>Low</MenuItem>\n          </TextField>\n        </div>\n        <div className=\"col-md-12  mb-5\">\n          <TextField\n            fullWidth\n            id=\"outlined-basic\"\n            size=\"small\"\n            name=\"details\"\n            multiline\n            label=\"Details\"\n            value={details}\n            onChange={handleFormData}\n            variant=\"outlined\"\n          />\n        </div>\n        <div className=\"col-md-1\">\n          <label className=\"font-weight-bold\">Attachment</label>\n        </div>\n        <div className=\"col-md-3\">\n          <input\n            type=\"file\"\n            name=\"attach_file\"\n            onChange={handleFileChange}\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-md-3\">\n          <input\n            type=\"file\"\n            name=\"attach_file1\"\n            onChange={handleFileChange}\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-md-3\">\n          <input\n            type=\"file\"\n            name=\"attach_file2\"\n            onChange={handleFileChange}\n            className=\"form-control\"\n          />\n        </div>\n        <div className=\"col-md-12 mt-5 text-right\">\n          <Button\n            variant=\"contained\"\n            className=\"mr-2\"\n            color=\"primary\"\n            disableElevation\n          >\n            Cancel\n          </Button>\n          {buttonLoader(loading, \"Save\", generateTicket, \"primary\")}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddSupportTicket;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\tcBrowse.js",["1274","1275","1276","1277"],"import { TextField } from \"@material-ui/core\";\n\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport DateFilter from \"../../../components/dateFilter\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst SupportTicketCommericialBrowse = ({ selectedPreviewId }) => {\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"DESC\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    menu: \"\",\n    transaction: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"TicketCommercial/TicketCommericialBrowse\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n\n  return (\n    <>\n      {/* {loading && <Loader />} */}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={getBrowseListData} />\n          <div className=\"col-md-2 \">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"menu\"\n              label=\"Menu\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2 \">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"transaction\"\n              label=\"Transaction\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n              hide: true,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"ticket_date\",\n              headerName: \"Ticket Date\",\n              width: 120,\n            },\n            {\n              field: \"ticket_no\",\n              headerName: \"Ticket No\",\n              width: 120,\n              renderCell: (param) => {\n                return (\n                  <button\n                    className=\"btn btn-link\"\n                    onClick={() => selectedPreviewId(param.row.tran_id)}\n                  >\n                    {param.row.ticket_no}\n                  </button>\n                );\n              },\n            },\n            {\n              field: \"menu\",\n              headerName: \"Menu\",\n              width: 120,\n            },\n            {\n              field: \"transaction\",\n              headerName: \"Transaction\",\n              width: 170,\n            },\n\n            {\n              field: \"details\",\n              headerName: \"Details\",\n              width: 200,\n            },\n            {\n              field: \"charges\",\n              headerName: \"Charges\",\n              width: 130,\n            },\n\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 170,\n            },\n            {\n              field: \"approved_charges\",\n              headerName: \"Approved Charges\",\n              width: 100,\n            },\n            {\n              field: \"approved_remarks\",\n              headerName: \"Approved Remarks\",\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SupportTicketCommericialBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketCommercial\\addCommericial.js",["1278","1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292"],"import { Button } from \"@material-ui/core\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  buttonLoader,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { TablePicker } from \"../../../components/table-picker\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst AddTicketCommercial = ({ changeTab, previewId, ...props }) => {\n  const [selectedTicket, setSelectedTicket] = useState(null);\n\n  const [loading, setLoading] = useState(false);\n\n  const [showPicker, setShowPicker] = useState(false);\n\n  const togglePicker = () => setShowPicker(!showPicker);\n\n  const [errors, setErrors] = useState({});\n\n  const [formData, setFormData] = useState({\n    tran_id: previewId ? previewId : \"0\",\n    ticket_id: \"\",\n    date: moment().format(\"DD-MM-yyyy\"),\n    charges: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const validateForm = () => {\n    let errors = {};\n    if (formData.charges == \"\") {\n      errors.charges = \"Charges required\";\n    } else {\n      delete errors.charges;\n    }\n\n    if (formData.remarks == \"\") {\n      errors.remarks = \"Remarks required\";\n    } else {\n      delete errors.remarks;\n    }\n\n    const valid = Object.keys(errors).length === 0 ? true : false;\n    setErrors(errors);\n    return valid;\n  };\n\n  const onSubmit = async () => {\n    try {\n      setLoading(true);\n      if (validateForm()) {\n        await CommonController.commonApiCallFilter(\n          \"TicketCommercial/TicketCommericialInsert\",\n          formData,\n          \"post\"\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Ticket Commercial Successfully\");\n            changeTab(0);\n          } else {\n            showErrorToast(data.msg);\n          }\n        });\n      }\n      setLoading(false);\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const getTicketById = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"TicketCommercial/TicketCommericialPreview\",\n        { tran_id: previewId },\n        \"post\"\n      ).then((data) => {\n        setSelectedTicket(data);\n        setFormData({\n          ...formData,\n          charges: data.charges,\n          remarks: data.remarks,\n          ticket_id: data.ticket_id,\n        });\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  useEffect(() => {\n    if (previewId) {\n      getTicketById();\n    }\n  }, [previewId]);\n\n  const newColumns = [\n    {\n      id: \"id\",\n      label: \"Sr. no\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"date\",\n      label: \"Date\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"ticket_no\",\n      label: \"Ticket No\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"menu\",\n      label: \"Menu\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"transaction\",\n      label: \"Transaction\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"type\",\n      label: \"Type\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"priority\",\n      label: \"Priority\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"details\",\n      label: \"Details\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"generated_by\",\n      label: \"Generated By\",\n      numeric: false,\n      disablePadding: true,\n    },\n    {\n      id: \"status\",\n      label: \"Status\",\n      numeric: false,\n      disablePadding: true,\n    },\n  ];\n\n  const handlePickTicket = (ticket) => {\n    setFormData({ ...formData, ticket_id: String(ticket.id) });\n    setSelectedTicket(ticket);\n    setShowPicker(false);\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <div className=\"col-md-12 text-right\">\n          {!showPicker && (\n            <Button\n              variant=\"contained\"\n              onClick={togglePicker}\n              disableElevation\n              color=\"primary\"\n            >\n              Pick Ticket\n            </Button>\n          )}\n          {showPicker && (\n            <TablePicker\n              selectedItems={selectedTicket}\n              columns={newColumns}\n              type=\"single\"\n              url={\"TicketCommercial/PickTicketInCommercial\"}\n              onSubmit={handlePickTicket}\n              onPickerClose={togglePicker}\n            />\n          )}\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Ticket Date</label>\n            <p>\n              {selectedTicket && selectedTicket.date != \"\"\n                ? selectedTicket.date\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Ticket No.</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.ticket_no != \"\"\n                ? selectedTicket.ticket_no\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Generated By</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.generated_by != \"\"\n                ? selectedTicket.generated_by\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Menu</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.menu != \"\"\n                ? selectedTicket.menu\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Transaction</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.transaction != \"\"\n                ? selectedTicket.transaction\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Type</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.type != \"\"\n                ? selectedTicket.type\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Priority</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.priority != \"\"\n                ? selectedTicket.priority\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Details</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.details != \"\"\n                ? selectedTicket.details\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Date</label>\n            <input\n              type=\"text\"\n              className=\"form-control w-75\"\n              value={formData.date}\n              disabled\n            />\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Charges</label>\n            <input\n              type=\"text\"\n              className=\"form-control w-75\"\n              name=\"charges\"\n              value={formData.charges}\n              onChange={handleChange}\n            />\n            {errors.charges && <p className=\"text-danger\">{errors.charges}</p>}\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Remarks</label>\n            <textarea\n              type=\"text\"\n              value={formData.remarks}\n              name=\"remarks\"\n              onChange={handleChange}\n              className=\"form-control w-75\"\n            ></textarea>\n            {errors.remarks && <p className=\"text-danger\">{errors.remarks}</p>}\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Approved Date</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.approved_date != \"\"\n                ? selectedTicket.approved_date\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Approved Charges</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.approved_charges != \"\"\n                ? selectedTicket.approved_charges\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"form-group\">\n            <label className=\"font-weight-bold\">Approved Remarks</label>\n            <p>\n              {\" \"}\n              {selectedTicket && selectedTicket.approved_remarks != \"\"\n                ? selectedTicket.approved_remarks\n                : \"N/A\"}\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-12 text-right\">\n          <Button\n            variant=\"contained\"\n            onClick={() => changeTab(0)}\n            className=\"mr-2\"\n            disableElevation\n          >\n            Cancel\n          </Button>\n          {buttonLoader(loading, \"Submit\", onSubmit, \"primary\")}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddTicketCommercial;\n","F:\\React code\\diagnostic\\src\\pages\\support\\ticketApproval\\browse.js",["1293","1294","1295","1296","1297","1298","1299","1300","1301"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\nimport DateFilter from \"../../../components/dateFilter\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst SupportTicketApprovalBrowse = (props) => {\n  const history = useHistory();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n\n  const [loading, setLoading] = useState(false);\n\n  const [empList, setEmpList] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n  const [bodyParam, setBodyParam] = useState({\n    menu: \"\",\n    transaction: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"TicketCommercialApproval/TicketCommercialApprovalBrowse\",\n        params,\n        bodyParam,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n\n  return (\n    <>\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"menu\"\n              label=\"Menu\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2 \">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleBodyParam}\n              name=\"transaction\"\n              label=\"Transaction\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n              hide: true,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"ticket_no\",\n              headerName: \"Ticket No\",\n              width: 120,\n              renderCell: (param) => {\n                return (\n                  <button\n                    className=\"btn btn-link\"\n                    onClick={() => {\n                      history.push({\n                        pathname: \"/support/ticket-commercial\",\n                        state: {\n                          index: 1,\n                          id: param.row.tran_id,\n                        },\n                      });\n                    }}\n                  >\n                    {param.row.ticket_no}\n                  </button>\n                );\n              },\n            },\n            {\n              field: \"menu\",\n              headerName: \"Menu\",\n              width: 120,\n            },\n            {\n              field: \"transaction\",\n              headerName: \"Transaction\",\n              width: 170,\n            },\n\n            {\n              field: \"details\",\n              headerName: \"Details\",\n              width: 200,\n            },\n            {\n              field: \"charges\",\n              headerName: \"Charges\",\n              width: 130,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"approved_charges\",\n              headerName: \"Approved Charges\",\n              width: 170,\n            },\n            {\n              field: \"approved_remarks\",\n              headerName: \"Approved Remarks\",\n              width: 170,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SupportTicketApprovalBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Enquiry\\browse.js",["1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport DateFilter from \"../../../components/dateFilter\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesEnquiryBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          \n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesEnquiryBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\addProduct.js",["1317","1318","1319"],"import React, { useEffect, useState } from \"react\";\nimport GeneralProduct from \"./general\";\nimport { Button } from \"@material-ui/core\";\nimport OtherInformation from \"./other\";\nimport { useSelector } from \"react-redux\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\n\nconst AddNewProduct = () => {\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.productId\n  );\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  const [formData, setFormData] = useState({\n    product_id: \"\",\n    product_code: \"\",\n    category_id: \"\",\n    category_name: \" \",\n    p_group_name: \"\",\n    p_group_id: \"\",\n    item_id: \"\",\n    item_name: \"\",\n    gg_id: \"\",\n    description: \" \",\n    mlfb_no: \"\",\n    grade: \"\",\n    tax_rate: \"\",\n    uom_id: \"\",\n    uom: \"\",\n    package: \"\",\n    qty: \"\",\n    list_price: \"\",\n    margin: \"\",\n    pur_rate: \"\",\n    reorder_level: \"\",\n    lp_ref: \"\",\n    di: \"\",\n    di_value: \"\",\n    ai: \"\",\n    ai_value: \"\",\n    fc: \"\",\n    fc_value: \"\",\n    do: \"\",\n    do_value: \"\",\n    ao: \"\",\n    ao_value: \"\",\n    fm: \"\",\n    fm_value: \"\",\n    edit: \"0\",\n    deactivate: \"0\",\n    serial: \"1\",\n    siemens_product: \"0\",\n    user_id: localStorage.getItem(\"userId\"),\n    user_name: \"\",\n  });\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleCheckChange = (key, value) => {\n    setFormData({ ...formData, [key]: value ? \"True\" : \"False\" });\n  };\n\n  const handleAutoChange = (key1, key2, value) => {\n    console.log(key1, key2, value);\n    setFormData({ ...formData, [key1]: value.id, [key2]: value.value });\n  };\n\n  const onNext = () => {\n    if (selectedTab === 0) {\n      setSelectedTab(1);\n    } else {\n      onSubmit();\n    }\n  };\n\n  const onSubmit = () => {\n    CommonController.commonApiCallFilter(\n      \"Product/ProductMasterInsert\",\n      formData\n    )\n      .then((data) => {\n        if (data.valid) {\n          showSuccessToast(\n            selectedIdResponse\n              ? \"Product updated successfully\"\n              : \"Product inserted successfully\"\n          );\n        } else {\n          showErrorToast(\"something went wrong\");\n        }\n      })\n      .catch((err) => showErrorToast(\"something went wrong\"));\n  };\n\n  const onBack = () => {\n    setSelectedTab(0);\n  };\n\n  useEffect(() => {\n    if (selectedIdResponse) {\n      CommonController.commonApiCallFilter(\"Product/PreviewProductMaster\", {\n        product_id: selectedIdResponse,\n      })\n        .then((data) => {\n          // setFormData(data);\n          let tempData = { ...formData };\n          for (let key in formData) {\n            if (data.hasOwnProperty(key)) {\n              tempData[key] = data[key];\n            }\n          }\n          setFormData(tempData);\n        })\n        .catch((err) => {\n          showErrorToast(err);\n        });\n    }\n  }, [selectedIdResponse]);\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      {/* {loading && <Loader />} */}\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 0 ? \"active\" : \"\")}\n            onChange={() => setSelectedTab(0)}\n          >\n            General Information\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 1 ? \"active\" : \"\")}\n            onChange={() => setSelectedTab(1)}\n          >\n            Technical Information\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content mt-10\">\n        {selectedTab === 0 && (\n          <GeneralProduct\n            formData={formData}\n            handleChange={handleChange}\n            handleAutoChange={handleAutoChange}\n            handleCheckChange={handleCheckChange}\n          />\n        )}\n        {selectedTab === 1 && (\n          <OtherInformation formData={formData} handleChange={handleChange} />\n        )}\n        <div className=\"w-100 text-right\">\n          {selectedTab === 1 && (\n            <Button\n              variant=\"contained\"\n              onClick={onBack}\n              className=\"mr-3\"\n              color=\"primary\"\n              disableElevation\n            >\n              Back\n            </Button>\n          )}\n          <Button\n            variant=\"contained\"\n            onClick={onNext}\n            color=\"primary\"\n            disableElevation\n          >\n            {selectedTab === 1 ? \"Submit\" : \"Next\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddNewProduct;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\browse.js",["1320","1321","1322","1323","1324"],"import {\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { FormControl, InputLabel } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\r\nimport { selectedProductId } from \"../../../_redux/actions/masters/all.action\";\r\n\r\nimport {\r\n  getCategoryList,\r\n  getGGNameList,\r\n  getLPRefList,\r\n  getProductListBrowse,\r\n  updateProductListPrice,\r\n  updateProductLPRef,\r\n  updateProductMovingNonMoving,\r\n  updateProductVerifiedStatus,\r\n} from \"../../../_redux/actions/masters/product.action\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst BrowseProductMaster = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsloading] = useState(false);\r\n  const stateLoading = useSelector((state) => state.ProductMaster.isLoading);\r\n  const getProductListResponse = useSelector(\r\n    (state) => state.ProductMaster.productList\r\n  );\r\n  const getCategoryListResponse = useSelector(\r\n    (state) => state.ProductMaster.categoryList\r\n  );\r\n  const getLpRefListResponse = useSelector(\r\n    (state) => state.ProductMaster.lpRefList\r\n  );\r\n  const getGGNameListResponse = useSelector(\r\n    (state) => state.ProductMaster.ggNameList\r\n  );\r\n  const [categoryList, setCategoryList] = useState([]);\r\n  const [lpRefList, setLpRefList] = useState([]);\r\n  const [ggNameList, setGGNameList] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [productList, setProductList] = useState([]);\r\n  const [tempVerifed, setTempVerified] = useState([]);\r\n\r\n  const [productMasterFilter, setProductMasterFilter] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    moving_non_moving: \"all\",\r\n    category: selectedCategory ? selectedCategory.value : \"\",\r\n    group: \"\",\r\n    gg_name: \"\",\r\n    item_name: \"\",\r\n    lp_ref: \"\",\r\n    status: \"\",\r\n    siemens_product: \"\",\r\n  });\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleFilters = (event) => {\r\n    setProductMasterFilter({\r\n      ...productMasterFilter,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleCategory = (event, value) => {\r\n    setSelectedCategory(value);\r\n    setProductMasterFilter({\r\n      ...productMasterFilter,\r\n      category: value ? value.value : \"\",\r\n    });\r\n  };\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    console.log(param);\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getProductListBrowse(params, productMasterFilter));\r\n    dispatch(getCategoryList());\r\n    dispatch(getLPRefList());\r\n    dispatch(getGGNameList());\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    dispatch(getProductListBrowse(params, productMasterFilter));\r\n  }, [productMasterFilter, params]);\r\n\r\n  useEffect(() => {\r\n    setIsloading(stateLoading);\r\n    if (getProductListResponse) {\r\n      setProductList(getProductListResponse.data);\r\n    }\r\n  }, [getProductListResponse, stateLoading]);\r\n\r\n  useEffect(() => {\r\n    setIsloading(stateLoading);\r\n    if (getCategoryListResponse) {\r\n      setCategoryList(getCategoryListResponse);\r\n    }\r\n  }, [getCategoryListResponse, stateLoading]);\r\n\r\n  useEffect(() => {\r\n    setIsloading(stateLoading);\r\n    if (getLpRefListResponse) {\r\n      setLpRefList(getLpRefListResponse);\r\n    }\r\n  }, [getLpRefListResponse, stateLoading]);\r\n\r\n  useEffect(() => {\r\n    setIsloading(stateLoading);\r\n    if (getGGNameListResponse) {\r\n      setGGNameList(getGGNameListResponse);\r\n    }\r\n  }, [getGGNameListResponse, stateLoading]);\r\n\r\n  const updateVerifiedStatus = (value, id) => {\r\n    var temp = [...tempVerifed];\r\n    var tempIndex = temp.indexOf(id);\r\n    const param = {\r\n      product_id: id,\r\n      edit: value ? \"1\" : \"0\",\r\n      user_id: localStorage.getItem(\"userId\"),\r\n    };\r\n\r\n    if (tempIndex > -1) {\r\n      temp.splice(tempIndex, 1);\r\n    } else {\r\n      if (value) {\r\n        temp.push(id);\r\n      }\r\n    }\r\n    dispatch(updateProductVerifiedStatus(param));\r\n    setTimeout(() => {\r\n      dispatch(getProductListBrowse(params, productMasterFilter));\r\n    }, 3000);\r\n  };\r\n\r\n  const updateListPriceValue = (param, event) => {\r\n    const params = {\r\n      product_id: param.row.product_id,\r\n      list_price: parseFloat(event.target.value.replace(\",\", \"\")).toFixed(2),\r\n      user_id: localStorage.getItem(\"userId\"),\r\n    };\r\n    dispatch(updateProductListPrice(params));\r\n  };\r\n\r\n  const updateProductLPRefValue = (param, event) => {\r\n    const params = {\r\n      product_id: param.row.product_id,\r\n      lp_ref: event.target.value,\r\n      user_id: localStorage.getItem(\"userId\"),\r\n    };\r\n    dispatch(updateProductLPRef(params));\r\n  };\r\n\r\n  const updateProductMovingNonValue = (param, event) => {\r\n    const params = {\r\n      product_id: param.row.product_id,\r\n      moving_non_moving: event.target.value,\r\n      user_id: localStorage.getItem(\"userId\"),\r\n    };\r\n    dispatch(updateProductMovingNonMoving(params));\r\n  };\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedProductId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\r\n      product_id: id,\r\n    }).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        dispatch(getProductListBrowse(params, productMasterFilter));\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <div className=\"d-flex align-items-center mr-5\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n          <div className=\"row w-100\">\r\n            <div className=\"col-md-2\">\r\n              <Autocomplete\r\n                id=\"combo-box-demo\"\r\n                className=\"mb-3\"\r\n                options={categoryList}\r\n                getOptionLabel={(option) => option.value}\r\n                fullWidth\r\n                onChange={handleCategory}\r\n                value={selectedCategory || null}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    size=\"small\"\r\n                    label=\"Category\"\r\n                    variant=\"outlined\"\r\n                  />\r\n                )}\r\n              />\r\n            </div>\r\n            <div className=\"col-md-1\">\r\n              <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Group\r\n                </InputLabel>\r\n                <Select\r\n                  name=\"group_name\"\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={\"\"}\r\n                  onChange={handleFilters}\r\n                  label=\"Group\"\r\n                >\r\n                  <MenuItem value=\"\">All</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Item Name\r\n                </InputLabel>\r\n                <Select\r\n                  name=\"item_name\"\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={\"\"}\r\n                  label=\"Item Name\"\r\n                >\r\n                  <MenuItem value=\"\">All</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n\r\n            <div className=\"col-md-2\">\r\n              <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Lp. Ref.\r\n                </InputLabel>\r\n                <Select\r\n                  name=\"lp_ref\"\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={productMasterFilter.lp_ref}\r\n                  onChange={handleFilters}\r\n                  label=\"Lp. Ref.\"\r\n                >\r\n                  <MenuItem value={\"\"}>None</MenuItem>\r\n                  {lpRefList.length > 0\r\n                    ? lpRefList.map((ref, index) => {\r\n                        return (\r\n                          <MenuItem key={\"ref\" + index} value={ref.value}>\r\n                            {ref.value}\r\n                          </MenuItem>\r\n                        );\r\n                      })\r\n                    : null}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n\r\n            <div className=\"col-md-2\">\r\n              <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  GG Name\r\n                </InputLabel>\r\n                <Select\r\n                  name=\"gg_name\"\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={productMasterFilter.gg_name}\r\n                  onChange={handleFilters}\r\n                  label=\"GG Name\"\r\n                >\r\n                  <MenuItem value={\"\"}>None</MenuItem>\r\n                  {ggNameList.length > 0\r\n                    ? ggNameList.map((gg, index) => {\r\n                        return (\r\n                          <MenuItem key={\"ggName\" + index} value={gg.id}>\r\n                            {gg.value}\r\n                          </MenuItem>\r\n                        );\r\n                      })\r\n                    : null}\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Siemens Product\r\n                </InputLabel>\r\n                <Select\r\n                  name=\"siemens_product\"\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={productMasterFilter.siemens_product}\r\n                  onChange={handleFilters}\r\n                  label=\"Siemens Product\"\r\n                >\r\n                  <MenuItem value={\"\"}>All</MenuItem>\r\n                  <MenuItem value={\"Siemens\"}>Siemens </MenuItem>\r\n                  <MenuItem value={\"Non-Siemens\"}>Non-Siemens</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Verified\r\n                </InputLabel>\r\n                <Select\r\n                  name=\"verified\"\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  id=\"demo-simple-select-outlined\"\r\n                  value={productMasterFilter.verified}\r\n                  onChange={handleFilters}\r\n                  label=\"Verified\"\r\n                >\r\n                  <MenuItem value={\"\"}>All</MenuItem>\r\n                  <MenuItem value={\"1\"}>Verified</MenuItem>\r\n                  <MenuItem value={\"0\"}>Not Verified</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n              <TextField\r\n                fullWidth\r\n                id=\"outlined-basic\"\r\n                size=\"small\"\r\n                onKeyUp={handleParams}\r\n                name=\"filter_value\"\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n              />\r\n            </div>\r\n            <div className=\"col-md-2 text-right\">\r\n              <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                Export Excel\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 500, width: \"100%\" }}>\r\n        <DataGrid\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[15, 25, 50, 100]}\r\n          rowCount={getProductListResponse?.recordsFiltered}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          initialState={{}}\r\n          components={{}}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"ID\",\r\n              width: 70,\r\n            },\r\n            {\r\n              field: \"product_code\",\r\n              headerName: \"ERP Code\",\r\n              width: 180,\r\n            },\r\n            {\r\n              field: \"category_name\",\r\n              headerName: \"Category\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"group\",\r\n              headerName: \"Group\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"item_name\",\r\n              headerName: \"Item Name\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"mlfb_no\",\r\n              headerName: \"MLFB No.\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"list_price\",\r\n              headerName: \"List Price\",\r\n              width: 200,\r\n              renderCell: (params) => (\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  defaultValue={params.row.list_price}\r\n                  onBlur={(event) => updateListPriceValue(params, event)}\r\n                />\r\n              ),\r\n            },\r\n            {\r\n              field: \"grade\",\r\n              headerName: \"HSN\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"tax_rate\",\r\n              headerName: \"Tax Rate\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"lp_ref\",\r\n              headerName: \"L.P. Ref.\",\r\n              width: 200,\r\n              renderCell: (params) => (\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  defaultValue={params.row.lp_ref}\r\n                  onBlur={(event) => updateProductLPRefValue(params, event)}\r\n                />\r\n              ),\r\n            },\r\n            {\r\n              field: \"gg_name\",\r\n              headerName: \"GG Name\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"siemens_product\",\r\n              headerName: \"Siemens Product\",\r\n              width: 200,\r\n            },\r\n            {\r\n              field: \"moving_non_moving\",\r\n              headerName: \"Moving\",\r\n              width: 200,\r\n              renderCell: (params) => (\r\n                <select\r\n                  className=\"form-control\"\r\n                  onChange={(event) =>\r\n                    updateProductMovingNonValue(params, event)\r\n                  }\r\n                  defaultValue={params.row.moving_non_moving}\r\n                >\r\n                  <option value=\"Old\">Old</option>\r\n                  <option value=\"New\">New</option>\r\n                  <option value=\"Panel\">Panel</option>\r\n                  <option value=\"Asset\">Asset</option>\r\n                </select>\r\n              ),\r\n            },\r\n            {\r\n              field: \"edit\",\r\n              headerName: \"Verified\",\r\n              width: 200,\r\n              renderCell: (params) => (\r\n                <FormControlLabel\r\n                  className={\"formControlLabel\"}\r\n                  control={\r\n                    <Checkbox\r\n                      defaultChecked={params.row.edit === \"True\"}\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                      onChange={(event) =>\r\n                        updateVerifiedStatus(\r\n                          event.target.checked,\r\n                          params.row.product_id\r\n                        )\r\n                      }\r\n                      inputProps={{\r\n                        \"aria-label\": \"checkbox with small size\",\r\n                      }}\r\n                    />\r\n                  }\r\n                  label={\r\n                    <span\r\n                      className={\r\n                        \"font_13 \" +\r\n                        (params.row.edit === \"True\" ||\r\n                        tempVerifed.indexOf(params.row.id) > -1\r\n                          ? \"text-success\"\r\n                          : \"text-danger\")\r\n                      }\r\n                    >\r\n                      {isLoading\r\n                        ? \"Updating\"\r\n                        : params.row.edit === \"True\" ||\r\n                          tempVerifed.indexOf(params.row.id) > -1\r\n                        ? \"Verified\"\r\n                        : \"Not Verified\"}\r\n                    </span>\r\n                  }\r\n                />\r\n              ),\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.product_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.product_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          rows={productList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseProductMaster;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\browse.js",["1325","1326","1327","1328"],"import { TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  selectedComboMLFBId,\n  selectedItemGroupId,\n} from \"../../../_redux/actions/masters/all.action\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst ItemGroupBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"ItemGroup/BrowseItemGroupMaster\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedItemGroupId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"ItemGroup/ItemGroupMasterDelete\", {\n      item_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"category_name\",\n              headerName: \"Category\",\n              flex: 0.1,\n            },\n            {\n              field: \"p_group_name\",\n              headerName: \"Group\",\n              flex: 0.1,\n            },\n            {\n              field: \"item_name\",\n              headerName: \"Item\",\n              flex: 0.1,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              flex: 0.1,\n            },\n            {\n              field: \"mlfb_no\",\n              headerName: \"MLFB No.\",\n              flex: 0.1,\n            },\n\n            {\n              field: \"uom\",\n              headerName: \"UOM\",\n              flex: 0.1,\n            },\n            {\n              field: \"list_price\",\n              headerName: \"List Price\",\n              flex: 0.1,\n            },\n            {\n              field: \"lp_ref\",\n              headerName: \"LP Ref.\",\n              flex: 0.1,\n            },\n            {\n              field: \"datetime\",\n              headerName: \"Datetime\",\n              flex: 0.1,\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.product_id)}\n                  onDelete={() => handleDeleteRow(params.row.product_id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ItemGroupBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\item Group\\addItem.js",["1329","1330"],"import {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Button,\n  CardContent,\n  Card,\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { withStyles } from \"@material-ui/styles\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { buttonLoader, showSuccessToast } from \"../../../components/common\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst selectedValues = {\n  editIndex: null,\n  category_id: null,\n  group_id: null,\n  item_id: null,\n  description: null,\n  mlfb_no: \"\",\n  lp_ref: \"\",\n  list_price: \"\",\n  qty: 1,\n  amount: \"\",\n};\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst AddItemGroupMaster = () => {\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.itemGroupId\n  );\n  const [loading, setLoading] = useState(false);\n  const [dataLoading, setDataLoading] = useState(false);\n  const [addedItemList, setAddedItemList] = useState([]);\n  const [formData, setFormData] = useState({\n    product_id: \"0\",\n    category_id: null,\n    p_group_id: null,\n    item_id: null,\n    description: \"\",\n    mlfb_no: \"\",\n    uom_id: null,\n    list_price: \"\",\n    lp_ref: \"\",\n    productQtyItem: [],\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const [dropdownList, setDropDownList] = useState({\n    categoryNameList: [],\n    uomList: [],\n    groupNameList: [],\n    itemNameList: [],\n    descriptionList: [],\n  });\n\n  const [addDropDownList, setAddDropDownList] = useState({\n    categoryNameList: [],\n    groupNameList: [],\n    itemNameList: [],\n    descriptionList: [],\n  });\n\n  const [selectedDropDown, setSelectedDropDown] = useState(selectedValues);\n\n  const [showItemList, setShowItemList] = useState(false);\n\n  const onItemRemove = (index) => {\n    let list = [...addedItemList];\n    list.splice(index, 1);\n    setAddedItemList(list);\n  };\n\n  useEffect(() => {\n    CommonController.commonApiCallFilter(\"ItemGroup/ItemGroupMasterPreview\", {\n      product_id: selectedIdResponse ? selectedIdResponse : 0,\n    }).then((data) => {\n      setDropDownList({\n        ...dropdownList,\n        categoryNameList: data.categoryList,\n        groupNameList: data.groupList,\n        itemNameList: data.itemList,\n        uomList: data.uomList,\n      });\n      setAddDropDownList({\n        ...addDropDownList,\n        categoryNameList: data.categoryList,\n      });\n    });\n  }, [selectedIdResponse]);\n\n  const getFilterGroup = (event, newValue) => {\n    CommonController.commonApiCallFilter(\n      \"ItemGroup/GroupItemDescriptionDDLList\",\n      {\n        category_id: newValue.id,\n      }\n    ).then((data) => {\n      setAddDropDownList({\n        ...addDropDownList,\n        groupNameList: data.objList.groupList,\n        descriptionList: data.objList.descList,\n      });\n      setSelectedDropDown({ ...selectedDropDown, category_id: newValue });\n    });\n  };\n\n  const getFilterItems = (event, newValue) => {\n    CommonController.commonApiCallFilter(\"ItemGroup/ItemDescriptionDDLList\", {\n      category_id: selectedDropDown.category_id.id,\n      group_id: newValue.id,\n    }).then((data) => {\n      setAddDropDownList({\n        ...addDropDownList,\n        itemNameList: data.objList.itemList,\n        descriptionList: data.objList.descList,\n      });\n      setSelectedDropDown({ ...selectedDropDown, group_id: newValue });\n    });\n  };\n\n  const getFilterDescription = (event, newValue) => {\n    CommonController.commonApiCallFilter(\"ItemGroup/DescriptionDDLList\", {\n      category_id: selectedDropDown.category_id.id,\n      group_id: selectedDropDown.group_id.id,\n      item_id: newValue.id,\n    }).then((data) => {\n      setAddDropDownList({\n        ...addDropDownList,\n        descriptionList: data.mList.descList,\n      });\n      setSelectedDropDown({ ...selectedDropDown, item_id: newValue });\n    });\n  };\n\n  const getFilterValues = (event, newValue) => {\n    CommonController.commonApiCallFilter(\"itemGroup/MlfbLpListPriceObj\", {\n      category_id: selectedDropDown.category_id.id,\n      group_id: selectedDropDown.group_id.id,\n      item_id: selectedDropDown.item_id.id,\n      description: newValue.hasOwnProperty(\"description\")\n        ? newValue.description\n        : newValue.value,\n    }).then((data) => {\n      setSelectedDropDown({\n        ...selectedDropDown,\n        description: newValue,\n        mlfb_no: data.mList.mlfb_no,\n        lp_ref: data.mList.lp_ref,\n        list_price: data.mList.list_price,\n      });\n    });\n  };\n\n  const onItemAdd = () => {\n    let selected = { ...selectedDropDown };\n    selected.amount = selected.qty * selected.list_price;\n    setAddedItemList([...addedItemList, selected]);\n    setShowItemList(false);\n    setSelectedDropDown(selectedValues);\n  };\n\n  const handleFormData = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const handleFormDataList = (name, value) => {\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const getItemById = (id, list, key) => {\n    const item = list.filter((x) => x[key] === id);\n\n    return item.length > 0 ? item[0] : null;\n  };\n\n  const onAddItemInsert = () => {\n    setLoading(true);\n    let tempData = { ...formData };\n    let arr = [];\n    addedItemList.forEach((element) => {\n      let obj = {\n        category_id: element.category_id.id,\n        group_id: element.group_id.id,\n        item_id: element.item_id.id,\n        description: element.description.value,\n        mlfb_no: element.mlfb_no,\n        lp_ref: element.lp_ref,\n        list_price: element.list_price,\n        qty: element.qty,\n        amount: element.amount,\n      };\n      arr.push(obj);\n    });\n    tempData.productQtyItem = arr;\n    CommonController.commonApiCallFilter(\n      \"ItemGroup/ItemGroupMasterInsert\",\n      tempData\n    ).then((data) => {\n      if (data.valid) {\n        showSuccessToast(data.msg);\n        setLoading(false);\n      }\n    });\n  };\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      {dataLoading && <Loader />}\n      <div className=\"row mb-5\">\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            label=\"Product ID\"\n            disabled\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            name=\"mlfb_no\"\n            onChange={handleFormData}\n            value={formData.mlfb_no}\n            label=\"MLFB No.\"\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.categoryNameList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            value={getItemById(\n              formData.category_id,\n              dropdownList.categoryNameList,\n              \"id\"\n            )}\n            onChange={(event, value) =>\n              handleFormDataList(\"category_id\", value.id)\n            }\n            fullWidth\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Category Name\" />\n            )}\n          />\n        </div>\n      </div>\n      <div className=\"row mb-5\">\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.uomList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            fullWidth\n            value={getItemById(formData.uom_id, dropdownList.uomList, \"id\")}\n            onChange={(event, value) => handleFormDataList(\"uom_id\", value.id)}\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"UOM\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.groupNameList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            fullWidth\n            value={getItemById(\n              formData.p_group_id,\n              dropdownList.groupNameList,\n              \"id\"\n            )}\n            onChange={(event, value) =>\n              handleFormDataList(\"p_group_id\", value.id)\n            }\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Group Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            name=\"list_price\"\n            value={formData.list_price}\n            onChange={handleFormData}\n            label=\"List Price\"\n          />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-4\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={dropdownList.itemNameList}\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            fullWidth\n            value={getItemById(\n              formData.item_id,\n              dropdownList.itemNameList,\n              \"id\"\n            )}\n            onChange={(event, value) => handleFormDataList(\"item_id\", value.id)}\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Item Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            value={formData.lp_ref}\n            label=\"LP Reference\"\n            name=\"lp_ref\"\n            onChange={handleFormData}\n          />\n        </div>\n        <div className=\"col-md-4\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n            multiline\n            value={formData.description}\n            name=\"description\"\n            onChange={handleFormData}\n            label=\"Description\"\n          />\n        </div>\n      </div>\n      {!showItemList && (\n        <div className=\"my-4 text-right\">\n          <Button\n            variant=\"contained\"\n            className=\"mr-2\"\n            color=\"primary\"\n            disableElevation\n            onClick={() => setShowItemList(true)}\n          >\n            Add New Item\n          </Button>\n        </div>\n      )}\n      <TableContainer className=\"mt-4\" component={Paper}>\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>Category</StyledTableCell>\n              <StyledTableCell>Group </StyledTableCell>\n              <StyledTableCell>Item</StyledTableCell>\n              <StyledTableCell>Description</StyledTableCell>\n              <StyledTableCell>MLFB No</StyledTableCell>\n              <StyledTableCell>LP Ref.</StyledTableCell>\n              <StyledTableCell>Qty</StyledTableCell>\n              <StyledTableCell>List Price</StyledTableCell>\n              <StyledTableCell>Amount</StyledTableCell>\n              <StyledTableCell>Actions</StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {addedItemList.length > 0 ? (\n              addedItemList.map((item, index) => {\n                return (\n                  <TableRow key={item.category_id.id}>\n                    {\" \"}\n                    <TableCell>{item.category_id.value}</TableCell>\n                    <TableCell>{item.group_id.value}</TableCell>\n                    <TableCell>{item.item_id.value}</TableCell>\n                    <TableCell>\n                      {item.description.hasOwnProperty(\"description\")\n                        ? item.description.description\n                        : item.description.value}\n                    </TableCell>\n                    <TableCell>{item.mlfb_no}</TableCell>\n                    <TableCell>{item.lp_ref}</TableCell>\n                    <TableCell>{item.qty}</TableCell>\n                    <TableCell>{item.list_price}</TableCell>\n                    <TableCell>{item.amount}</TableCell>\n                    <TableCell>\n                      {\" \"}\n                      <ActionButtons\n                        onEdit={() => {\n                          setSelectedDropDown(addedItemList[index]);\n                          setShowItemList(true);\n                        }}\n                        onDelete={() => onItemRemove(index)}\n                      />\n                    </TableCell>\n                  </TableRow>\n                );\n              })\n            ) : (\n              <TableRow>\n                <TableCell colSpan={12} className=\"text-center\">\n                  No Items\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {showItemList && (\n        <Card className=\"mt-4\">\n          <CardContent>\n            <div className=\"row\">\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.category_id}\n                  options={addDropDownList.categoryNameList}\n                  size=\"small\"\n                  getOptionLabel={(option) => option.value}\n                  fullWidth\n                  onChange={getFilterGroup}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"outlined\"\n                      label=\"Category\"\n                    />\n                  )}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.group_id}\n                  getOptionLabel={(option) => option.value}\n                  options={addDropDownList.groupNameList}\n                  size=\"small\"\n                  onChange={getFilterItems}\n                  fullWidth\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Group\" />\n                  )}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.item_id}\n                  options={addDropDownList.itemNameList}\n                  getOptionLabel={(option) => option.value}\n                  onChange={getFilterDescription}\n                  size=\"small\"\n                  fullWidth\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Item\" />\n                  )}\n                />\n              </div>\n\n              <div className=\"col-md-4 mb-4\">\n                <Autocomplete\n                  disablePortal\n                  disableClearable\n                  id=\"combo-box-demo\"\n                  value={selectedDropDown.description}\n                  options={addDropDownList.descriptionList}\n                  getOptionLabel={(option) =>\n                    option.hasOwnProperty(\"description\")\n                      ? option.description\n                      : option.value\n                  }\n                  size=\"small\"\n                  fullWidth\n                  onChange={getFilterValues}\n                  renderInput={(params) => (\n                    <TextField\n                      {...params}\n                      variant=\"outlined\"\n                      label=\"Description\"\n                    />\n                  )}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  disabled\n                  label=\"MLFB\"\n                  fullWidth\n                  value={selectedDropDown?.mlfb_no}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  disabled\n                  label=\"LP Ref.\"\n                  fullWidth\n                  value={selectedDropDown?.lp_ref}\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  label=\"Qty\"\n                  value={selectedDropDown.qty}\n                  fullWidth\n                  onChange={(e) =>\n                    setSelectedDropDown({\n                      ...selectedDropDown,\n                      qty: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  label=\"List Price\"\n                  fullWidth\n                  value={selectedDropDown?.list_price}\n                  onChange={(e) =>\n                    setSelectedDropDown({\n                      ...selectedDropDown,\n                      list_price: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"col-md-4 mb-4\">\n                <TextField\n                  size=\"small\"\n                  variant=\"outlined\"\n                  disabled\n                  label=\"Amount\"\n                  fullWidth\n                  value={\n                    selectedDropDown.qty !== \"\"\n                      ? selectedDropDown.qty * selectedDropDown.list_price\n                      : \"\"\n                  }\n                />\n              </div>\n              <div className=\"col-md-12 mb-4 text-right\">\n                <Button\n                  variant=\"contained\"\n                  className=\"mr-2\"\n                  color=\"primary\"\n                  disableElevation\n                  onClick={onItemAdd}\n                >\n                  Submit\n                </Button>\n                <Button\n                  variant=\"contained\"\n                  className=\"mr-2\"\n                  color=\"primary\"\n                  disableElevation\n                  onClick={() => {\n                    setShowItemList(false);\n                    setSelectedDropDown(selectedValues);\n                  }}\n                >\n                  Close\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {buttonLoader(loading, \"Submit\", onAddItemInsert, \"primary\")}\n    </div>\n  );\n};\n\nexport default AddItemGroupMaster;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\browse.js",["1331","1332","1333","1334"],"import { TextField } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\r\nimport { Loader } from \"../../../components/loader\";\r\nimport {\r\n  materialCodeEditId,\r\n  searchMaterialCodeData,\r\n} from \"../../../_redux/actions/masters/materialcode.action\";\r\nimport { MaterialCodeMasterController } from \"../../../_redux/controller/Masters/materialcode.controller\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst MaterialCodeBrowse = ({ onEditMaterial }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const user_id = {\r\n    user_id: localStorage.getItem(\"userId\"),\r\n  };\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 15,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [filter, setFilter] = useState({\r\n    fromDate: null,\r\n    toDate: null,\r\n    user_id: localStorage.getItem(\"userId\"),\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const handleDateChange = (type, date) => {\r\n    setFilter({ ...filter, [type]: date });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, filter]);\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"MaterialCode/BrowseMaterialCode\",\r\n      params,\r\n      filter\r\n    )\r\n      .then((data) => {\r\n        setBrowseListData(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param });\r\n  };\r\n\r\n  const handleEditMaterial = (id) => {\r\n    dispatch(materialCodeEditId({ tran_id: id }));\r\n    onEditMaterial();\r\n  };\r\n\r\n  const deleteMaterialData = (id = null) => {\r\n    if (id) {\r\n      setLoading(true);\r\n      MaterialCodeMasterController.deleteMaterialCode({ tran_id: id }).then(\r\n        (data) => {\r\n          if (data.valid) {\r\n            showSuccessToast(\"Deleted Successfully\");\r\n            dispatch(searchMaterialCodeData(user_id, params));\r\n          } else {\r\n            showErrorToast(\"Something went wrong\");\r\n          }\r\n          setTimeout(() => {\r\n            setLoading(false);\r\n          }, 1000);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <DatePicker\r\n              label=\"From Date\"\r\n              value={filter.fromDate}\r\n              format=\"dd/MM/yyyy\"\r\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\r\n              animateYearScrolling\r\n              inputVariant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <DatePicker\r\n              label=\"To Date\"\r\n              value={filter.toDate}\r\n              onChange={(date) => handleDateChange(\"toDate\", date)}\r\n              animateYearScrolling\r\n              inputVariant=\"outlined\"\r\n              size=\"small\"\r\n              fullWidth\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 500, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"customer\",\r\n              headerName: \"Customer\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"add_by\",\r\n              headerName: \"Add By\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEditMaterial(params.row.tran_id)}\r\n                  onDelete={() => deleteMaterialData(params.row.tran_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[15, 25, 50, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default MaterialCodeBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Material Code\\addMaterialCode.js",["1335","1336","1337","1338","1339","1340"],"import {\r\n  TextField,\r\n  Button,\r\n  Divider,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  Paper,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\r\nimport { Loader } from \"../../../components/loader\";\r\nimport { TablePicker } from \"../../../components/table-picker\";\r\n// import { TablePicker } from \"../../../components/table-picker\";\r\nimport { searchPartyName } from \"../../../_redux/actions/masters/materialcode.action\";\r\nimport { MaterialCodeMasterController } from \"../../../_redux/controller/Masters/materialcode.controller\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#1280cf\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst userId = localStorage.getItem(\"userId\");\r\n\r\nconst AddMaterialCode = ({ onCancel }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const partyNameListResponse = useSelector(\r\n    (state) => state.MaterialCodeMaster.partyNameList\r\n  );\r\n  const selectedMaterialCodeId = useSelector(\r\n    (state) => state.MaterialCodeMaster.selectedMaterialId\r\n  );\r\n  const [loading, setLoading] = useState(false);\r\n  const [partyNameList, setPartyNameList] = useState([]);\r\n  const [selectedMaterialData, setSelectedMaterialData] = useState(null);\r\n  const [selectedParty, setSelectedParty] = useState(null);\r\n  const [selectedCustomerList, setSelectedCustomerList] = useState([]);\r\n  const [showPickCustomer, setPickCustomer] = useState(false);\r\n  const [showPickItems, setPickItems] = useState(false);\r\n  const [selectedItemsList, setSelectedItemsList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (Array.isArray(partyNameListResponse)) {\r\n      setPartyNameList(partyNameListResponse);\r\n    }\r\n  }, [partyNameListResponse]);\r\n\r\n  useEffect(() => {\r\n    if (selectedMaterialCodeId && selectedMaterialCodeId.tran_id) {\r\n      setLoading(true);\r\n      MaterialCodeMasterController.getMaterialDetailById(\r\n        selectedMaterialCodeId\r\n      ).then((data) => {\r\n        if (data.tran_id) {\r\n          if (partyNameList.length > 0) {\r\n            var indx = partyNameList.findIndex(\r\n              (x) => x.id === data.customer_id\r\n            );\r\n\r\n            if (indx > -1) {\r\n              setSelectedParty(partyNameList[indx]);\r\n            }\r\n\r\n            setSelectedCustomerList(\r\n              renameKeyObj(\"customer_id\", \"company_id\", data.codeCustomerItem)\r\n            );\r\n            setSelectedItemsList(data.codeProductItem);\r\n          }\r\n        }\r\n        setTimeout(() => {\r\n          setLoading(false);\r\n        }, 2000);\r\n      });\r\n    }\r\n  }, [selectedMaterialCodeId, partyNameList]);\r\n\r\n  const renameKeyObj = (from, to, arr) => {\r\n    var temp = arr;\r\n    var newArr = [];\r\n    for (const item of temp) {\r\n      item[to] = item[from];\r\n      delete item[from];\r\n      newArr.push(item);\r\n    }\r\n    return newArr;\r\n  };\r\n\r\n  // const newArrayOfObj = selectedCustomerList.map(\r\n  //   ({ company_id: customer_id, ...rest }) => ({\r\n  //     customer_id,\r\n  //     ...rest,\r\n  //   })\r\n  // );\r\n\r\n  // useEffect(() => {\r\n  //   setNewCustomerList(newArrayOfObj);\r\n  // }, [newArrayOfObj]);\r\n\r\n  const validateMaterialCode = () => {\r\n    var validateObj = selectedItemsList.filter((x) => {\r\n      if (!x.hasOwnProperty(\"material_code\") || x.material_code === \"\") {\r\n        return x;\r\n      } else if (!x.hasOwnProperty(\"unit_price\") || isNaN(x.unit_price)) {\r\n        return x;\r\n      }\r\n    });\r\n\r\n    return validateObj;\r\n  };\r\n\r\n  const insertMaterialCode = () => {\r\n    const validateList = validateMaterialCode();\r\n    if (selectedCustomerList.length < 1) {\r\n      showErrorToast(\"Pick Customer\");\r\n    } else if (selectedItemsList.length < 1) {\r\n      showErrorToast(\"Pick Item\");\r\n    } else if (validateList.length > 0) {\r\n      showErrorToast(\"Fill the required fields\");\r\n    } else {\r\n      setLoading(true);\r\n      var param = {\r\n        tran_id: selectedMaterialCodeId ? selectedMaterialCodeId.tran_id : \"0\",\r\n        customer_id: selectedParty.id,\r\n        user_id: userId,\r\n\r\n        codeCustomerItem: filterCustomerList(),\r\n        codeProductItem: filterProductList(),\r\n      };\r\n\r\n      MaterialCodeMasterController.insertMaterialCode(param).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(data.type);\r\n          onCancel();\r\n        } else {\r\n          showErrorToast(data.type);\r\n        }\r\n        setTimeout(() => {\r\n          setLoading(false);\r\n        }, 2000);\r\n      });\r\n    }\r\n  };\r\n\r\n  const filterProductList = () => {\r\n    var newList = [];\r\n    for (const item of selectedItemsList) {\r\n      var list = {\r\n        product_id: item.product_id,\r\n        material_code: item.material_code,\r\n        lp_ref: item.lp_ref,\r\n        list_price: item.list_price,\r\n        dis_per: item.dis_per,\r\n        unit_price: item.unit_price,\r\n      };\r\n      newList.push(list);\r\n    }\r\n\r\n    return newList;\r\n  };\r\n\r\n  const filterCustomerList = () => {\r\n    var newList = [];\r\n    for (const customer of selectedCustomerList) {\r\n      var list = {\r\n        customer_id: customer.company_id,\r\n      };\r\n      newList.push(list);\r\n    }\r\n\r\n    return newList;\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(searchPartyName());\r\n  }, []);\r\n\r\n  const customerListColumn = [\r\n    {\r\n      id: \"company_id\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"\",\r\n    },\r\n    {\r\n      id: \"company_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Company Name\",\r\n    },\r\n    {\r\n      id: \"short_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Short Name\",\r\n    },\r\n    {\r\n      id: \"group_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Group Name\",\r\n    },\r\n    { id: \"address\", numeric: false, disablePadding: false, label: \"Address\" },\r\n    { id: \"city\", numeric: false, disablePadding: false, label: \"City\" },\r\n    {\r\n      id: \"district\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"District\",\r\n    },\r\n    { id: \"state\", numeric: false, disablePadding: false, label: \"State\" },\r\n    { id: \"pin_code\", numeric: false, disablePadding: false, label: \"Pincode\" },\r\n  ];\r\n\r\n  const supplyItemsColumn = [\r\n    {\r\n      id: \"product_id\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"\",\r\n    },\r\n    {\r\n      id: \"category_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Category Name\",\r\n    },\r\n    {\r\n      id: \"p_group_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Group Name\",\r\n    },\r\n    {\r\n      id: \"item_name\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Item Name\",\r\n    },\r\n    {\r\n      id: \"description\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Description\",\r\n    },\r\n    { id: \"mlfb_no\", numeric: false, disablePadding: false, label: \"MLFB\" },\r\n    {\r\n      id: \"grade\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Grade\",\r\n    },\r\n    { id: \"lp_ref\", numeric: false, disablePadding: false, label: \"LP Ref\" },\r\n    {\r\n      id: \"list_price\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"List Price\",\r\n    },\r\n  ];\r\n\r\n  const selectedCustomerColumns = [\r\n    {\r\n      id: \"company_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Company Name\",\r\n    },\r\n    {\r\n      id: \"city\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"City\",\r\n    },\r\n  ];\r\n\r\n  const togglePickCustomer = () => setPickCustomer(!showPickCustomer);\r\n  const togglePickItems = () => setPickItems(!showPickItems);\r\n\r\n  const handleAddedCustomer = (row) => {\r\n    var tempselected = [...selectedCustomerList];\r\n    var tempIndex = tempselected.findIndex(\r\n      (x) => x.company_id === row.company_id\r\n    );\r\n    if (tempIndex > -1) {\r\n      tempselected.splice(tempIndex, 1);\r\n      setSelectedCustomerList(tempselected);\r\n    }\r\n  };\r\n\r\n  const handleAddedItems = (row) => {\r\n    var tempselected = [...selectedItemsList];\r\n    var tempIndex = tempselected.findIndex(\r\n      (x) => x.product_id === row.product_id\r\n    );\r\n    if (tempIndex > -1) {\r\n      tempselected.splice(tempIndex, 1);\r\n      setSelectedItemsList(tempselected);\r\n    }\r\n  };\r\n\r\n  const handlePickCustomer = (data) => {\r\n    setSelectedCustomerList(data);\r\n    setPickCustomer(false);\r\n  };\r\n\r\n  const handlePickItems = (data) => {\r\n    setSelectedItemsList(data);\r\n    setPickItems(false);\r\n  };\r\n\r\n  const handleProductChange = (event, id) => {\r\n    console.log(id);\r\n    var tempNewList = [...selectedItemsList];\r\n    var tempIndx = tempNewList.findIndex((x) => x.product_id === id);\r\n    if (tempIndx > -1) {\r\n      var element = tempNewList[tempIndx];\r\n      element[event.target.name] = event.target.value;\r\n      tempNewList[tempIndx] = element;\r\n    } else {\r\n      var element = {\r\n        product_id: id,\r\n      };\r\n      element[event.target.name] = event.target.value;\r\n      tempNewList.push(element);\r\n    }\r\n    setSelectedItemsList(tempNewList);\r\n  };\r\n\r\n  const calculateDisPer = (event, item) => {\r\n    var tempNewList = [...selectedItemsList];\r\n    var tempIndx = tempNewList.findIndex(\r\n      (x) => x.product_id === item.product_id\r\n    );\r\n    if (tempIndx > -1) {\r\n      var element = tempNewList[tempIndx];\r\n      element.unit_price = parseInt(event.target.value);\r\n      element.dis_per =\r\n        ((parseInt(item.list_price) - element.unit_price) /\r\n          parseInt(item.list_price)) *\r\n        100;\r\n    } else {\r\n      var element = {\r\n        product_id: item.product_id,\r\n      };\r\n      element.unit_price = parseInt(event.target.value);\r\n      element.dis_per =\r\n        ((parseInt(item.list_price) - element.unit_price) /\r\n          parseInt(item.list_price)) *\r\n        100;\r\n      tempNewList.push(element);\r\n    }\r\n    setSelectedItemsList(tempNewList);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      <div className=\"container-fluid mt-4\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <Autocomplete\r\n              id=\"combo-box-demo\"\r\n              options={partyNameList}\r\n              onChange={(event, newValue) => setSelectedParty(newValue)}\r\n              getOptionLabel={(option) => option.value}\r\n              value={selectedParty}\r\n              fullWidth\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"Party Name\"\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n          {!showPickCustomer && (\r\n            <div className=\"col-md-3 ml-auto text-right\">\r\n              <Button\r\n                color=\"primary\"\r\n                className=\"mr-2\"\r\n                disableElevation\r\n                variant=\"contained\"\r\n                onClick={togglePickCustomer}\r\n              >\r\n                Pick Customer\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={togglePickItems}\r\n                disableElevation\r\n                variant=\"contained\"\r\n              >\r\n                Pick Item\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"container-fluid\">\r\n        {showPickCustomer && (\r\n          <TablePicker\r\n            selectedItems={selectedCustomerList}\r\n            columns={customerListColumn}\r\n            url={\"MaterialCode/MaterialCodePickCustomer\"}\r\n            onSubmit={handlePickCustomer}\r\n            onPickerClose={togglePickCustomer}\r\n          />\r\n        )}\r\n\r\n        {showPickItems && (\r\n          <TablePicker\r\n            selectedItems={selectedItemsList}\r\n            columns={supplyItemsColumn}\r\n            url={\"MaterialCode/MaterialCodePickProduct\"}\r\n            onSubmit={handlePickItems}\r\n            onPickerClose={togglePickItems}\r\n          />\r\n        )}\r\n      </div>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        <h4>Selected Customer List</h4>\r\n        <Divider />\r\n        <SimpleTable\r\n          columns={selectedCustomerColumns}\r\n          rows={selectedCustomerList}\r\n          onDelete={handleAddedCustomer}\r\n        />\r\n      </div>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        <h4>Selected Items List</h4>\r\n        <Divider />\r\n        <TableContainer className=\"mt-4\" component={Paper}>\r\n          <Table size=\"small\" sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell>MLFB</StyledTableCell>\r\n                <StyledTableCell>Item Name</StyledTableCell>\r\n                <StyledTableCell>Material Code</StyledTableCell>\r\n                <StyledTableCell>Lp Ref.</StyledTableCell>\r\n                <StyledTableCell>List Price</StyledTableCell>\r\n                <StyledTableCell>Dis. %</StyledTableCell>\r\n                <StyledTableCell>Unit Price</StyledTableCell>\r\n                <StyledTableCell>Actions</StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {/* {rows.lenght > 0 ? (\r\n                rows.map((row) => (\r\n                  <TableRow\r\n                    key={rows[columns[0].id]}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    {columns.map((col, index) => {\r\n                      if (columns[index + 1]) {\r\n                        return (\r\n                          <TableCell key={\"row_id\" + index} scope=\"row\">\r\n                            {row[columns[index + 1].id]}\r\n                          </TableCell>\r\n                        );\r\n                      }\r\n                    })}\r\n\r\n                    <TableCell scope=\"row\">\r\n                      <ActionButtons\r\n                        onPreview={onPreview}\r\n                        onEdit={onEdit}\r\n                        onDelete={onDelete}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              ) : (\r\n                <TableCell className=\"text-center\" colSpan={12}>\r\n                  No Records Found\r\n                </TableCell>\r\n              )} */}\r\n\r\n              {selectedItemsList.length > 0 ? (\r\n                selectedItemsList.map((item, index) => {\r\n                  return (\r\n                    <TableRow\r\n                      sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                      key={index}\r\n                    >\r\n                      <TableCell scope=\"row\">{item.mlfb_no}</TableCell>\r\n                      <TableCell scope=\"row\" style={{ width: 150 }}>\r\n                        {item.item_name}\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"material_code\"\r\n                          value={item.material_code}\r\n                          onChange={(event) =>\r\n                            handleProductChange(event, item.product_id)\r\n                          }\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"lp_ref\"\r\n                          value={item.lp_ref}\r\n                          disabled={true}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"list_price\"\r\n                          value={item.list_price}\r\n                          disabled={true}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"dis_per\"\r\n                          value={\r\n                            isNaN(item.dis_per)\r\n                              ? \"\"\r\n                              : parseFloat(item.dis_per).toFixed(2)\r\n                          }\r\n                          disabled={true}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <input\r\n                          className=\"form-control\"\r\n                          name=\"unit_price\"\r\n                          value={isNaN(item.unit_price) ? \"\" : item.unit_price}\r\n                          onChange={(event) => calculateDisPer(event, item)}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell scope=\"row\">\r\n                        <ActionButtons\r\n                          onDelete={() => handleAddedItems(item)}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })\r\n              ) : (\r\n                <TableRow>\r\n                  <TableCell colSpan={12} className=\"text-center\">\r\n                    No Records\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <div className=\"w-100 mt-3 text-right\">\r\n          <Button\r\n            color=\"primary\"\r\n            className=\"mr-2\"\r\n            onClick={insertMaterialCode}\r\n            disableElevation\r\n            variant=\"contained\"\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            color=\"primary\"\r\n            onClick={() => onCancel()}\r\n            disableElevation\r\n            variant=\"contained\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddMaterialCode;\r\n","F:\\React code\\diagnostic\\src\\pages\\DC\\browse.js",["1341","1342","1343","1344","1345","1346"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\n\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport DateFilter from \"../../components/dateFilter\";\n\nconst DCBrowseList = (props) => {\n  const history = useHistory();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      await CommonController.commonApiCall(\n        \"dc/browseDCPackage\",\n        params,\n        bodyParam,\n\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setBrowseListData(data.data);\n          setTotalRecords(data.recordsFiltered);\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    if (param !== 0) {\n      setParams({ ...params, pageNo: param });\n    }\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, bodyParam]);\n\n  return (\n    <>\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n        </div>\n      </div>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"entry_no\",\n              headerName: \"Entry No.\",\n              width: 100,\n            },\n\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 120,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 400,\n            },\n\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 400,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={\n            browseListData.length > 0\n              ? {\n                  Pagination: CustomPagination,\n                  NoRowsOverlay: CustomNoRowsOverlay,\n                }\n              : {}\n          }\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default DCBrowseList;\n","F:\\React code\\diagnostic\\src\\pages\\DC\\form.js",["1347","1348"],"import { Button, Fab } from \"@material-ui/core\";\nimport { Autocomplete, TextField } from \"@mui/material\";\n\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { SimpleTable } from \"../../components/basic-table\";\nimport {\n  debounce,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../components/common\";\nimport { TablePicker } from \"../../components/table-picker\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\n\nconst NewDCPackaging = () => {\n  const [selectedPackingList, setSelectedPackingList] = useState([]);\n  const [showPackagingList, setShowPackagingList] = useState(false);\n  const [itemListBody, setItemListBody] = useState(null);\n  const [showItemList, setShowItemList] = useState(null);\n  const [companyList, setCompanyList] = useState([]);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n\n  const [initialValues, setInitialValues] = useState({\n    date: moment().format(\"DD/MM/YYYY\"),\n    entry_no: \"\",\n    remarks: \"\",\n  });\n  const [boxList, setBoxList] = useState([\n    {\n      items: [],\n    },\n  ]);\n\n  useEffect(() => {\n    getEntryNo();\n  }, []);\n  useEffect(() => {\n    setItemListBody({\n      dcList: selectedPackingList.map((item) => ({ id: item.tran_id })),\n      itemList: [],\n    });\n  }, [selectedPackingList]);\n\n  useEffect(() => {\n    if (boxList.length > 1) {\n      let iList = [];\n      boxList.forEach((x) => {\n        iList.push.apply(iList, x.items);\n      });\n\n      setItemListBody({\n        dcList: selectedPackingList.map((item) => ({ id: item.tran_id })),\n        itemList: iList,\n      });\n    }\n  }, [boxList]);\n\n  const togglePackagingList = () => setShowPackagingList(!showPackagingList);\n  const toggleItemList = (index) => setShowItemList(index);\n\n  const handlePackagingList = (data) => {\n    setSelectedPackingList(data);\n    togglePackagingList();\n  };\n\n  const handleIemList = (data, index) => {\n    let tempBox = [...boxList];\n    tempBox[index].items = data;\n    setBoxList(tempBox);\n    toggleItemList(null);\n  };\n\n  const removeBox = (index) => {\n    setBoxList(boxList.filter((item, _) => _ !== index));\n  };\n\n  const addBox = () => {\n    setBoxList([\n      ...boxList,\n      {\n        items: [],\n      },\n    ]);\n  };\n\n  const itemListColumn = [\n    {\n      id: \"tran_id\",\n      numeric: false,\n      disablePadding: true,\n      label: \"ID\",\n    },\n    {\n      id: \"mlfb_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"MLFB No.\",\n    },\n    {\n      id: \"dc_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"DC No.\",\n    },\n    {\n      id: \"item_name\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Item Name\",\n    },\n    {\n      id: \"description\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Description\",\n    },\n\n    {\n      id: \"qty\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Quantity\",\n    },\n    {\n      id: \"serial_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Serial No.\",\n    },\n  ];\n\n  const packagingListColumn = [\n    {\n      id: \"tran_id\",\n      numeric: false,\n      disablePadding: true,\n      label: \"ID\",\n    },\n    {\n      id: \"date\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Date\",\n      dateFormat: true,\n    },\n    {\n      id: \"dc_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"DC No.\",\n    },\n    {\n      id: \"Company\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Company\",\n    },\n    {\n      id: \"Contact\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Contact\",\n    },\n    {\n      id: \"so_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"SO No.\",\n    },\n    {\n      id: \"dispatch_through\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Dispatch Through\",\n    },\n    {\n      id: \"Destination\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Destination\",\n    },\n    {\n      id: \"datetime\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Datetime\",\n      dateFormat: true,\n    },\n    {\n      id: \"status\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Status\",\n    },\n    {\n      id: \"comments\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Comments\",\n    },\n    {\n      id: \"remarks\",\n      numeric: false,\n      disablePadding: true,\n      label: \"Remarks\",\n      flex: 1,\n    },\n    {\n      id: \"di_no\",\n      numeric: false,\n      disablePadding: true,\n      label: \"DI No.\",\n    },\n  ];\n\n  const getCompanyList = async (search) => {\n    try {\n      let response = await CommonController.commonApiCallFilter(\n        \"dc/pickCompany\",\n        { search: search },\n        \"get\",\n        \"node\"\n      );\n\n      if (response.status === 200) {\n        setCompanyList(response.result);\n      } else {\n        showErrorToast(response.message);\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const deletePickItem = (item, index) => {\n    let tempBoxList = [...boxList];\n    tempBoxList[index].items = tempBoxList[index].items.filter(\n      (x) => x.tran_id !== item.tran_id\n    );\n\n    setBoxList(tempBoxList);\n  };\n\n  const getEntryNo = async () => {\n    try {\n      let response = await CommonController.commonApiCallFilter(\n        \"dc/generateDCNo\",\n        {},\n        \"get\",\n        \"node\"\n      );\n\n      if (response.status === 200) {\n        setInitialValues({ ...initialValues, entry_no: response.data });\n      } else {\n        showErrorToast(response.message);\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const submitDC = async () => {\n    try {\n      if (initialValues.remarks === \"\") {\n        showErrorToast(\"Please enter remarks\");\n      } else if (boxList.filter((x) => x.items.length < 1).length > 0) {\n        showErrorToast(\"Please choose items for box\");\n      } else if (selectedPackingList.length < 1) {\n        showErrorToast(\"Please choose dc packaging\");\n      } else {\n        const body = {\n          tran_id: \"0\",\n          date: initialValues.date,\n          entry_no: initialValues.entry_no,\n          company_id: selectedCompany.company_id,\n          remarks: initialValues.remarks,\n          boxList: boxList,\n          user_id: localStorage.getItem(\"userId\"),\n        };\n        let response = await CommonController.commonApiCallFilter(\n          \"dc/insertDc\",\n          body,\n          \"post\",\n          \"node\"\n        );\n\n        if (response.status === 200) {\n          showSuccessToast(response.message);\n          window.location.reload();\n        } else {\n          showErrorToast(response.message);\n        }\n      }\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      <div className=\"row\">\n        <div className=\"entry-details d-flex col-md-6\">\n          <div className=\"mr-3\">\n            <h5>Date</h5>\n            <TextField\n              value={initialValues.date}\n              fullWidth\n              label=\"\"\n              variant=\"outlined\"\n              size=\"small\"\n              disabled\n            />\n          </div>\n          <div className=\"mr-3\">\n            <h5>Entry No.</h5>{\" \"}\n            <TextField\n              value={initialValues.entry_no}\n              fullWidth\n              label=\"\"\n              variant=\"outlined\"\n              size=\"small\"\n              disabled\n            />\n          </div>\n          <div>\n            <h5>Remarks</h5>\n            <TextField\n              label=\"Remarks\"\n              fullWidth\n              value={initialValues.remarks}\n              variant=\"outlined\"\n              size=\"small\"\n              name=\"remarks\"\n              onChange={(e) =>\n                setInitialValues({ ...initialValues, remarks: e.target.value })\n              }\n            />\n          </div>\n        </div>\n        <div className=\"col-md-4  ml-auto \">\n          <h5>Pick Company</h5>\n          <div className=\"d-flex align-items-center\">\n            <Autocomplete\n              id=\"combo-box-demo\"\n              options={companyList}\n              fullWidth\n              size=\"small\"\n              getOptionLabel={(option) => option.company_name}\n              value={selectedCompany}\n              onChange={(e, value) => setSelectedCompany(value)}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  onInput={(e) => {\n                    debounce(getCompanyList(e.target.value, 200));\n                  }}\n                  label=\"\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n            {!showPackagingList && selectedCompany && (\n              <Button\n                color=\"primary\"\n                className=\"mx-3 w-25\"\n                disableElevation\n                variant=\"contained\"\n                onClick={togglePackagingList}\n              >\n                Pick DC\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n      <hr />\n      {showPackagingList && (\n        <TablePicker\n          selectedItems={selectedPackingList}\n          columns={packagingListColumn}\n          url={\"dc/pickDC\"}\n          isNode=\"node\"\n          apiBody={{ company_id: selectedCompany?.company_id }}\n          apiType=\"post\"\n          onPickerClose={togglePackagingList}\n          onSubmit={handlePackagingList}\n        />\n      )}\n\n      {selectedPackingList.length > 0 && (\n        <SimpleTable\n          columns={packagingListColumn}\n          rows={selectedPackingList}\n          // onDelete={handleAddedCustomer}\n        />\n      )}\n\n      {itemListBody &&\n        itemListBody.dcList.length > 0 &&\n        boxList.map((box, index) => {\n          return (\n            <div className=\"box-list mt-5 pt-5\" key={index}>\n              <div className=\"d-flex\">\n                <h2 className=\"box-header\">Box no. {index + 1}</h2>\n                <div className=\" ml-auto\">\n                  {showItemList !== index && (\n                    <Button\n                      color=\"primary\"\n                      className=\"mr-2\"\n                      disableElevation\n                      variant=\"contained\"\n                      onClick={() => toggleItemList(index)}\n                    >\n                      Pick Item\n                    </Button>\n                  )}\n\n                  <Button\n                    color=\"primary\"\n                    className=\"mr-2 ml-auto\"\n                    disableElevation\n                    variant=\"contained\"\n                    onClick={() => removeBox(index)}\n                  >\n                    Remove Box\n                  </Button>\n                </div>\n              </div>\n              <hr />\n              {showItemList === index && (\n                <TablePicker\n                  selectedItems={box.items}\n                  columns={itemListColumn}\n                  url={\"dc/pickDCItem\"}\n                  isNode=\"node\"\n                  apiBody={itemListBody}\n                  apiType=\"post\"\n                  onPickerClose={() => toggleItemList(null)}\n                  onSubmit={(data) => handleIemList(data, index)}\n                />\n              )}\n              {box.items.length > 0 && showItemList !== index && (\n                <SimpleTable\n                  columns={itemListColumn}\n                  rows={box.items}\n                  onDelete={(item) => deletePickItem(item, index)}\n                />\n              )}\n            </div>\n          );\n        })}\n\n      {selectedPackingList.length > 0 && (\n        <div className=\"float-action-btn\">\n          <Fab\n            variant=\"extended\"\n            onClick={addBox}\n            size=\"medium\"\n            color=\"primary\"\n            aria-label=\"add\"\n          >\n            <AddIcon />\n            Add Box\n          </Fab>\n        </div>\n      )}\n      <hr />\n      <div className=\"w-100 mt-3 text-right\">\n        <Button\n          color=\"primary\"\n          className=\"mr-2\"\n          disableElevation\n          variant=\"contained\"\n          onClick={submitDC}\n        >\n          Save\n        </Button>\n        <Button color=\"primary\" disableElevation variant=\"contained\">\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default NewDCPackaging;\n","F:\\React code\\diagnostic\\src\\components\\table-picker.js",["1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360"],"import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n\nimport { makeStyles, Button, withStyles, Radio } from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { CommonController } from \"../_redux/controller/common.controller\";\nimport { useState } from \"react\";\nimport moment from \"moment\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#1280cf\",\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nfunction EnhancedTableHead(props) {\n  const {\n    column,\n    classes,\n    onSelectAllClick,\n    order,\n    orderBy,\n    numSelected = 0,\n    rowCount,\n    onRequestSort,\n  } = props;\n\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\" style={{ width: 100 }}></TableCell>\n\n        {column.map((headCell, j) => {\n          if (j < column.length && column[j + 1]) {\n            return (\n              <TableCell\n                key={column[j + 1].id}\n                align={column[j + 1].numeric ? \"right\" : \"left\"}\n                //    padding={column[j + 1].disablePadding ? \"none\" : \"normal\"}\n                sortDirection={orderBy === column[j + 1].id ? order : false}\n              >\n                <TableSortLabel\n                  active={orderBy === column[j + 1].id}\n                  direction={orderBy === column[j + 1].id ? order : \"asc\"}\n                  onClick={createSortHandler(column[j + 1].id)}\n                >\n                  {column[j + 1].label}\n                  {orderBy === column[j + 1].id ? (\n                    <span className={classes.visuallyHidden}>\n                      {order === \"desc\"\n                        ? \"sorted descending\"\n                        : \"sorted ascending\"}\n                    </span>\n                  ) : null}\n                </TableSortLabel>\n              </TableCell>\n            );\n          }\n        })}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    marginTop: 30,\n  },\n  paper: {\n    width: \"100%\",\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: \"rect(0 0 0 0)\",\n    height: 1,\n    margin: -1,\n    overflow: \"hidden\",\n    padding: 0,\n    position: \"absolute\",\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport const TablePicker = ({\n  columns,\n  url,\n  onSubmit,\n  onPickerClose,\n  selectedItems,\n  type,\n  isNode = \"\",\n  apiType = \"\",\n  apiBody = null,\n}) => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(false);\n  const [selected, setSelected] = React.useState(\n    selectedItems && Array.isArray(selectedItems)\n      ? selectedItems.length > 0\n        ? []\n        : selectedItems\n      : selectedItems\n  );\n  const [records, setRecords] = useState([]);\n  const [rowCount, setRowCount] = useState(0);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  useEffect(() => {\n    setSelected(selectedItems);\n  }, [selectedItems]);\n\n  useEffect(async () => {\n    setLoading(true);\n\n    if (apiBody) {\n      await CommonController.commonApiCall(url, params, apiBody, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    } else {\n      await CommonController.tablePickerController(url, params, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    }\n    setLoading(false);\n  }, []);\n\n  useEffect(async () => {\n    setLoading(true);\n    if (apiBody) {\n      await CommonController.commonApiCall(url, params, apiBody, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    } else {\n      await CommonController.tablePickerController(url, params, isNode).then(\n        (data) => {\n          setRecords(data.data);\n          setRowCount(data.recordsFiltered);\n        }\n      );\n    }\n    setLoading(false);\n  }, [params]);\n\n  const handleRequestSort = (event, property) => {\n    const isAsc =\n      params.sort_order !== \"\" && params.sort_order === \"asc\" ? \"desc\" : \"asc\";\n    setParams({ ...params, sort_order: isAsc, sort_column: property });\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = records.map((n) => n);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, row) => {\n    if (Array.isArray(selected)) {\n      var tempselected = [...selected];\n      const selectedIndex = tempselected.findIndex(\n        (x) => x[columns[0].id] === row[columns[0].id]\n      );\n      \n      if (selectedIndex === -1) {\n        tempselected.push(row);\n      } else {\n        tempselected.splice(selectedIndex, 1);\n      }\n\n      setSelected(tempselected);\n    }\n  };\n\n  const handleRadioClick = (event, row) => {\n    if (!Array.isArray(selected)) {\n      setSelected(row);\n    }\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setParams({ ...params, pageNo: newPage });\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setParams({ ...params, pageSize: parseInt(event.target.value, 10) });\n  };\n\n  const isSelected = (id) => {\n    if (Array.isArray(selected)) {\n      return selected.findIndex((x) => x[columns[0].id] === id) !== -1;\n    } else {\n      return selected && selected[columns[0].id] === id;\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size={\"small\"}\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              column={columns}\n              numSelected={\n                selected ? (Array.isArray(selected) ? selected.length : 1) : 0\n              }\n              order={params.sort_order}\n              orderBy={params.sort_column}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={params.pageSize}\n            />\n            <TableBody>\n              {loading ? (\n                <TableRow>\n                  <TableCell colSpan={12} className=\"text-center\">\n                    Please wait\n                  </TableCell>\n                </TableRow>\n              ) : records.length > 0 ? (\n                records.map((row, index) => {\n                  if (index <= records.length) {\n                    const isItemSelected = isSelected(row[columns[0].id]);\n                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                    return (\n                      <TableRow key={row[columns[0].id]}>\n                        <TableCell padding=\"checkbox\">\n                          {type && type == \"single\" ? (\n                            <Radio\n                              color=\"primary\"\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(event) => handleRadioClick(event, row)}\n                            />\n                          ) : (\n                            <Checkbox\n                              color=\"primary\"\n                              checked={isItemSelected}\n                              inputProps={{ \"aria-labelledby\": labelId }}\n                              onChange={(event) => handleClick(event, row)}\n                            />\n                          )}\n                        </TableCell>\n                        {columns.map((col, colIndex) => {\n                          if (columns[colIndex + 1]) {\n                            return (\n                              <TableCell\n                                style={{ whiteSpace: \"nowrap\" }}\n                                key={colIndex + 2}\n                                align=\"left\"\n                              >\n                                {columns[colIndex + 1].dateFormat\n                                  ? moment(\n                                      row[columns[colIndex + 1].id]\n                                    ).format(\"DD/MM/YYYY\")\n                                  : row[columns[colIndex + 1].id]}\n                              </TableCell>\n                            );\n                          }\n                        })}\n                      </TableRow>\n                    );\n                  }\n                })\n              ) : (\n                <TableRow>\n                  <TableCell>No Data</TableCell>\n                </TableRow>\n              )}\n              {/* {records.length > 0 && (\n                <TableRow\n                  style={{ height: (false ? 33 : 53) * records.length }}\n                >\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )} */}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[10, 15, 25]}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n          component=\"div\"\n          count={rowCount}\n          rowsPerPage={params.pageSize}\n          page={params.pageNo}\n          // onPageChange={}\n          // onRowsPerPageChange={}\n        />\n      </Paper>\n      <div className=\"container-fluid text-right\">\n        <Button\n          color=\"primary\"\n          className=\"mr-2\"\n          disableElevation\n          variant=\"contained\"\n          onClick={() => onSubmit(selected)}\n        >\n          Submit\n        </Button>\n        <Button\n          onClick={onPickerClose}\n          color=\"primary\"\n          disableElevation\n          variant=\"contained\"\n        >\n          Close\n        </Button>\n      </div>\n    </div>\n  );\n};\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\dc-add.js",["1361","1362","1363","1364","1365"],"import {\n  Button,\n  formatMs,\n  MenuItem,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { getUserId, showErrorToast } from \"../../../components/common\";\nimport { TablePicker } from \"../../../components/table-picker\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst AddDeliveryChallan = ({ challanType }) => {\n  const [pickItemList, setPickItemList] = useState([]);\n  const [showDITable, setDITable] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    di_no: \"\",\n    dc_no: \"\",\n    so_no: \"\",\n    company_id: \"\",\n    company_name: \"\",\n    cperson_id: \"\",\n    di_id: \"\",\n    di_date: \"\",\n    so_date: null,\n    cperson_name: \"\",\n    ref_no: \"\",\n    ref_date: null,\n    dis_doc_no: \"\",\n    dis_doc_date: null,\n    dis_through: \"\",\n    destination: \"\",\n    vehicle_no: \"\",\n    type: \"\",\n    status: \"open\",\n    remarks: \"\",\n    noofbox: \"\",\n    scan_using: \"\",\n    dcDetail: [],\n  });\n\n  const [showDIList, setShowDIList] = useState(false);\n  const [selectedDI, setSelectedDI] = useState(null);\n\n  const toggleDIList = () => setShowDIList(!showDIList);\n\n  const handleChange = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const handleDateChange = (name, date) => {\n    setFormData({ ...formData, [name]: date });\n  };\n\n  const diListColumn = [\n    {\n      id: \"tran_id\",\n      numeric: false,\n      disablePadding: false,\n      label: \"\",\n    },\n    {\n      id: \"di_no\",\n      numeric: false,\n      disablePadding: false,\n      label: \"DI No\",\n    },\n    {\n      id: \"date\",\n      numeric: false,\n      disablePadding: false,\n      label: \"DI Date\",\n    },\n    {\n      id: \"company_name\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Party\",\n    },\n    {\n      id: \"cperson_name\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Contact\",\n    },\n    {\n      id: \"indent_no\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Indent No\",\n    },\n    {\n      id: \"so_no\",\n      numeric: false,\n      disablePadding: false,\n      label: \"SO No\",\n    },\n    {\n      id: \"so_date\",\n      numeric: false,\n      disablePadding: false,\n      label: \"SO Date\",\n    },\n    {\n      id: \"remarks\",\n      numeric: false,\n      disablePadding: false,\n      label: \"Remarks\",\n    },\n  ];\n\n  const getDCNo = async () => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/generateDc\",\n        {},\n        \"get\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setFormData({ ...formData, dc_no: data.data.dc_no });\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  useEffect(() => {\n    getDCNo();\n    // getPreviewDC(\"30490\");\n  }, []);\n\n  const handleSubmit = (data) => {\n    getItemDIList(data.tran_id);\n    setSelectedDI(data);\n    setFormData({\n      ...formData,\n      so_no: data.so_no,\n      cperson_name: data.cperson_name,\n      di_date: moment().format(\"MM/DD/YYYY\"),\n      company_name: data.company_name,\n      di_no: data.di_no,\n      company_id: data.company_id,\n      cperson_id: data.cperson_id,\n      di_id: data.tran_id,\n    });\n    toggleDIList();\n  };\n\n  const getItemDIList = async (id) => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/pickDIItem\",\n        { id: id },\n        \"post\", \n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setPickItemList(data.data);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const submitMain = async () => {\n    setLoading(true);\n    try {\n      let temp = { ...formData };\n      temp.dcDetail = pickItemList;\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/insertmain\",\n        temp,\n        \"post\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          getPreviewDC(data.data);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n  const getPreviewDC = async (id) => {\n    try {\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/previewDC\",\n        { id: id },\n        \"post\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          setFormData(data.data.dc_main[0]);\n          setPickItemList(data.data.dc_detail);\n          setDITable(true);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const updateItemById = async (obj) => {\n    try {\n      const request = {\n        tran_id: obj.tran_id,\n        box_no: obj.box_no,\n        mlfb_no: obj.mlfb_no,\n        material_code: obj.material_code,\n        serial_no: obj.serial_no,\n        user_id: getUserId(),\n      };\n      await CommonController.commonApiCallFilter(\n        \"logistics/dc/updateItemById\",\n        request,\n        \"post\",\n        \"node\"\n      ).then((data) => {\n        if (data.status === 200) {\n          console.log(data);\n        } else {\n          showErrorToast(data.message);\n        }\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  const {\n    dc_no,\n    so_no,\n    cperson_name,\n    so_date,\n    ref_date,\n    remarks,\n    scan_using,\n    noofbox,\n    destination,\n    dis_doc_date,\n    dis_doc_no,\n    dis_through,\n    vehicle_no,\n    ref_no,\n    type,\n    status,\n  } = formData;\n\n  const handleItemChange = (index, event) => {\n    let tempList = [...pickItemList];\n    tempList[index][event.target.name] = event.target.value;\n    setPickItemList(tempList);\n  };\n\n  const getNextElem = (row, input) => {\n    const nextElem = document.getElementById(\n      `row-input-${parseInt(input) == 3 ? parseInt(row) + 1 : row}-${\n        parseInt(input) > 2 ? \"1\" : parseInt(input) + 1\n      }`\n    );\n\n    return nextElem\n      ? nextElem.disabled\n        ? document.getElementById(\n            `row-input-${parseInt(input) == 3 ? parseInt(row) + 1 : row}-${\n              parseInt(input) > 2 ? \"1\" : parseInt(input) + 2\n            }`\n          )\n        : document.getElementById(\n            `row-input-${parseInt(input) == 3 ? parseInt(row) + 1 : row}-${\n              parseInt(input) > 2 ? \"1\" : parseInt(input) + 1\n            }`\n          )\n      : null;\n  };\n\n  const switchToInput = (event) => {\n    if (event.key === \"Enter\") {\n      const currentElemRow = event.target.id.split(\"-\")[2];\n      const currentElemInp = event.target.id.split(\"-\")[3];\n      if (currentElemRow) {\n        const elem = getNextElem(currentElemRow, currentElemInp);\n        if (elem) {\n          elem.focus();\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row mt-5\">\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"D.C. No.\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            value={dc_no}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Date\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={moment().format(\"MM/DD/YYYY\")}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"DI No.\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={formData.di_no}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Date\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={formData?.di_date}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n          <TextField\n            label=\"Party Name\"\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            disabled\n            value={formData.company_name}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Sales Order\"\n            fullWidth\n            onChange={handleChange}\n            value={so_no}\n            variant=\"outlined\"\n            name=\"so_no\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <DatePicker\n            label=\"Date\"\n            value={so_date}\n            format=\"dd/MM/yyyy\"\n            onChange={(date) => handleDateChange(\"so_date\", date)}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            autoOk\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n          <TextField\n            label=\"Contact Person\"\n            fullWidth\n            onChange={handleChange}\n            value={cperson_name}\n            name=\"cperson_name\"\n            variant=\"outlined\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Ref(PO) No.\"\n            fullWidth\n            variant=\"outlined\"\n            value={ref_no}\n            name={\"ref_no\"}\n            size=\"small\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <DatePicker\n            label=\"Date\"\n            value={ref_date}\n            format=\"dd/MM/yyyy\"\n            onChange={(date) => handleDateChange(\"ref_date\", date)}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            autoOk\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Type\"\n            value={type}\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            select\n            name=\"type\"\n            onChange={handleChange}\n          >\n            {\" \"}\n            <MenuItem value=\"Project\">Project</MenuItem>\n            <MenuItem value=\"Spare\">Spare</MenuItem>\n          </TextField>\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Status\"\n            disabled\n            fullWidth\n            variant=\"outlined\"\n            value={status}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Dispatch Doc. No.\"\n            fullWidth\n            variant=\"outlined\"\n            value={dis_doc_no}\n            onChange={handleChange}\n            name=\"dis_doc_no\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <DatePicker\n            label=\"Date\"\n            value={dis_doc_date}\n            format=\"dd/MM/yyyy\"\n            onChange={(date) => handleDateChange(\"dis_doc_date\", date)}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            autoOk\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n          <TextField\n            label=\"Remarks\"\n            fullWidth\n            value={remarks}\n            name=\"remarks\"\n            variant=\"outlined\"\n            onChange={handleChange}\n            size=\"small\"\n            multiline\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Dispatch Through\"\n            fullWidth\n            value={dis_through}\n            variant=\"outlined\"\n            size=\"small\"\n            name=\"dis_through\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Destination\"\n            fullWidth\n            name=\"destination\"\n            onChange={handleChange}\n            value={destination}\n            variant=\"outlined\"\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-6 mb-3\">\n     \n        \n          <TextField\n            label=\"Scan Using\"\n            fullWidth\n            select\n            variant=\"outlined\"\n            size=\"small\"\n            name=\"scan_using\"\n            disabled={selectedDI}\n            onChange={handleChange}\n            value={scan_using}\n          >\n            <MenuItem value=\"MLFB NO\">MLFB NO</MenuItem>\n            <MenuItem value=\"MATERIAL CODE\">MATERIAL CODE</MenuItem>\n          </TextField>\n        </div> \n        \n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"Vehicle No.\"\n            fullWidth\n            name=\"vehicle_no\"\n            variant=\"outlined\"\n            value={vehicle_no}\n            onChange={handleChange}\n            size=\"small\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-3\">\n          <TextField\n            label=\"No of Box\"\n            fullWidth\n            variant=\"outlined\"\n            size=\"small\"\n            name=\"noofbox\"\n            value={noofbox}\n            onChange={handleChange}\n          />\n        </div>\n      </div>\n      <div className=\"diList-container\">\n        {!showDIList && (\n          <div className=\"text-right w-100 mb-5\">\n            <Button\n              color=\"primary\"\n              className=\"mr-2\"\n              disableElevation\n              variant=\"contained\"\n              onClick={toggleDIList}\n            >\n              Pick DI\n            </Button>\n            <Button\n              color=\"primary\"\n              className=\"mr-2\"\n              disableElevation\n              variant=\"contained\"\n              disabled={loading}\n              onClick={submitMain}\n            >\n              {loading ? \"Processing...\" : \" Save & Proceed\"}\n            </Button>\n          </div>\n        )}\n        {showDIList && (\n          <TablePicker\n            selectedItems={selectedDI}\n            columns={diListColumn}\n            url={\"logistics/dc/pickDI\"}\n            isNode=\"node\"\n            apiBody={{ user_id: getUserId(), sl_type: challanType }}\n            apiType=\"post\"\n            onPickerClose={toggleDIList}\n            type=\"single\"\n            onSubmit={handleSubmit}\n          />\n        )}\n\n        {showDITable && (\n          <div className=\"table-responsive mb-5 pb-5\">\n            <Paper>\n              <Table size=\"small\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>S.N.</TableCell>\n                    <TableCell>Box No</TableCell>\n                    <TableCell>MLFB No.</TableCell>\n                    <TableCell>Material Code</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell>Serial No.</TableCell>\n                    <TableCell align=\"right\">Quantity</TableCell>\n                    <TableCell align=\"right\">Rate</TableCell>\n                    <TableCell align=\"right\">Amount</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {pickItemList.length > 0 &&\n                    pickItemList.map((item, index) => {\n                      return (\n                        <React.Fragment>\n                          <TableRow\n                            key={index}\n                            style={{\n                              backgroundColor: item.serial\n                                ? \"rgb(255 238 240)\"\n                                : \"#fff\",\n                            }}\n                          >\n                            <TableCell>{index + 1}</TableCell>\n                            <TableCell style={{ width: 100 }}>\n                              <input\n                                type=\"text\"\n                                name=\"box_no\"\n                                className=\"form-control\"\n                                onChange={(e) => handleItemChange(index, e)}\n                                // onKeyPress={(e) => {\n\n                                // }}\n                              />{\" \"}\n                            </TableCell>\n                            <TableCell>\n                              {item.serial_no !== null ? (\n                                <input\n                                  type=\"type\"\n                                  disabled={scan_using === \"MATERIAL CODE\"}\n                                  className=\"form-control switchInput\"\n                                  name=\"mlfb_no\"\n                                  onKeyPress={switchToInput}\n                                  id={`row-input-${index + 1}-1`}\n                                  onChange={(e) => handleItemChange(index, e)}\n                                />\n                              ) : (\n                                item.mlfb_no\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {\" \"}\n                              {item.serial_no !== null ? (\n                                <input\n                                  type=\"type\"\n                                  disabled={scan_using === \"MLFB NO\"}\n                                  className=\"form-control switchInput\"\n                                  id={`row-input-${index + 1}-2`}\n                                  name=\"material_code\"\n                                  onKeyPress={switchToInput}\n                                  onChange={(e) => handleItemChange(index, e)}\n                                />\n                              ) : (\n                                item.material_code\n                              )}\n                            </TableCell>\n                            <TableCell style={{ width: 200 }}>\n                              {item.description}\n                            </TableCell>\n                            <TableCell style={{ width: 200 }}>\n                              {\" \"}\n                              {item.serial_no !== null && (\n                                <input\n                                  type=\"type\"\n                                  className=\"form-control switchInput\"\n                                  name=\"serial_no\"\n                                  id={`row-input-${index + 1}-3`}\n                                  onKeyPress={(e) => {\n                                    switchToInput(e);\n                                    if (e.key === \"Enter\") {\n                                      updateItemById(pickItemList[index]);\n                                    }\n                                  }}\n                                  onChange={(e) => handleItemChange(index, e)}\n                                />\n                              )}\n                            </TableCell>\n                            <TableCell align=\"right\">{item.qty}</TableCell>\n                            <TableCell align=\"right\">{item.rate}</TableCell>\n                            <TableCell align=\"right\">{item.amount}</TableCell>\n                          </TableRow>\n                        </React.Fragment>\n                      );\n                    })}\n                </TableBody>\n              </Table>\n            </Paper>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AddDeliveryChallan;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\other.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Product\\general.js",["1366","1367","1368","1369","1370","1371","1372","1373","1374","1375"],"import {\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Paper,\n  TextField,\n} from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast } from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\n\nconst GeneralProduct = ({\n  handleChange,\n  formData,\n  handleAutoChange,\n  handleCheckChange,\n}) => {\n  const [categoryList, setCategoryList] = useState([]);\n  const [groupList, setGroupList] = useState([]);\n  const [itemList, setItemList] = useState([]);\n  const [ggList, setGGList] = useState([]);\n  const [uomList, setUomList] = useState([]);\n\n  useEffect(() => {\n    CommonController.commonApiCallFilter(\"Dropdown/GetCategoryList\")\n      .then((data) => setCategoryList(data))\n      .catch((err) => showErrorToast(err));\n    CommonController.commonApiCallFilter(\"Dropdown/GetpgroupList\")\n      .then((data) => setGroupList(data))\n      .catch((err) => showErrorToast(err));\n    CommonController.commonApiCallFilter(\"Dropdown/GetItemList\")\n      .then((data) => setItemList(data))\n      .catch((err) => showErrorToast(err));\n    CommonController.commonApiCallFilter(\"Dropdown/GetGGList\")\n      .then((data) => setGGList(data))\n      .catch((err) => showErrorToast(err));\n    CommonController.commonApiCallFilter(\"Dropdown/GetUomList\")\n      .then((data) => setUomList(data))\n      .catch((err) => showErrorToast(err));\n  }, []);\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <FormGroup className=\"flex-row justify-content-end\">\n            <FormControlLabel\n              label=\"Edit\"\n              checked={formData.edit == \"True\"}\n              control={<Checkbox color=\"primary\" />}\n              onChange={(e) => handleCheckChange(\"edit\", e.target.checked)}\n            />\n            <FormControlLabel\n              checked={formData.deactivate == \"True\"}\n              control={<Checkbox color=\"primary\" />}\n              onChange={(e) =>\n                handleCheckChange(\"deactivate\", e.target.checked)\n              }\n              label=\"Hide\"\n            />\n            <FormControlLabel\n              checked={formData.serial == \"True\"}\n              control={<Checkbox color=\"primary\" />}\n              onChange={(e) => handleCheckChange(\"serial\", e.target.checked)}\n              label=\"Multiple Line\"\n            />\n            <FormControlLabel\n              checked={formData.siemens_product == \"True\"}\n              control={<Checkbox color=\"primary\" />}\n              onChange={(e) =>\n                handleCheckChange(\"siemens_product\", e.target.checked)\n              }\n              label=\"Siemen Product\"\n            />\n          </FormGroup>\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            size=\"small\"\n            value={formData.product_id}\n            label=\"Product ID\"\n            disabled\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-3 mb-5 \">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            label=\"ERP Code\"\n            value={formData.product_code}\n            name=\"product_code\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            size=\"small\"\n            getOptionLabel={(option) => option.value}\n            options={categoryList}\n            onChange={(event, value) =>\n              handleAutoChange(\"category_id\", \"category_name\", value)\n            }\n            value={\n              formData.category_id != \"\"\n                ? { id: formData.category_id, value: formData.category_name }\n                : \"\"\n            }\n            fullWidth\n            renderInput={(params) => (\n              <TextField variant=\"outlined\" {...params} label=\"Category Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            size=\"small\"\n            options={groupList}\n            getOptionLabel={(option) => option.value}\n            onChange={(event, value) =>\n              handleAutoChange(\"p_group_id\", \"p_group_name\", value)\n            }\n            value={\n              formData.p_group_id != \"\"\n                ? { id: formData.p_group_id, value: formData.p_group_name }\n                : \"\"\n            }\n            fullWidth\n            renderInput={(params) => (\n              <TextField variant=\"outlined\" {...params} label=\"Group Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            size=\"small\"\n            options={itemList}\n            onChange={(event, value) =>\n              handleAutoChange(\"item_id\", \"item_name\", value)\n            }\n            value={\n              formData.item_id != \"\"\n                ? { id: formData.item_id, value: formData.item_name }\n                : \"\"\n            }\n            getOptionLabel={(option) => option.value}\n            fullWidth\n            renderInput={(params) => (\n              <TextField variant=\"outlined\" {...params} label=\"Item Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            size=\"small\"\n            options={ggList}\n            getOptionLabel={(option) => option.value}\n            onChange={(event, value) =>\n              handleAutoChange(\"gg_id\", \"gg_name\", value)\n            }\n            value={\n              formData.gg_id != \"\"\n                ? { id: formData.gg_id, value: formData.gg_name }\n                : \"\"\n            }\n            fullWidth\n            renderInput={(params) => (\n              <TextField variant=\"outlined\" {...params} label=\"GG Name\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            label=\"Description\"\n            value={formData.description}\n            name=\"description\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"mlfb_no\"\n            value={formData.mlfb_no}\n            onChange={handleChange}\n            label=\"MLFB No. *\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"grade\"\n            value={formData.grade}\n            onChange={handleChange}\n            label=\"HSN / SAC\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"tax_rate\"\n            value={formData.tax_rate}\n            onChange={handleChange}\n            label=\"Tax Rate\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            size=\"small\"\n            options={uomList}\n            getOptionLabel={(option) => option.value}\n            onChange={(event, value) =>\n              handleAutoChange(\"uom_id\", \"uom\", value)\n            }\n            value={\n              formData.uom_id != \"\"\n                ? { id: formData.uom_id, value: formData.uom }\n                : \"\"\n            }\n            fullWidth\n            renderInput={(params) => (\n              <TextField variant=\"outlined\" {...params} label=\"UOM\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            name=\"qty\"\n            onChange={handleChange}\n            fullWidth\n            size=\"small\"\n            value={formData.qty}\n            label=\"Qty\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name=\"package\"\n            onChange={handleChange}\n            value={formData.package}\n            size=\"small\"\n            label=\"Package\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"list_price\"\n            value={formData.list_price}\n            onChange={handleChange}\n            label=\"List Price\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            name=\"margin\"\n            onChange={handleChange}\n            value={formData.margin}\n            fullWidth\n            size=\"small\"\n            label=\"Margin\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"pur_rate\"\n            value={formData.pur_rate}\n            onChange={handleChange}\n            label=\"Purchase Rate\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"reorder_level\"\n            value={formData.reorder_level}\n            onChange={handleChange}\n            label=\"Re-Order Level Qty.\"\n          />\n        </div>\n        <div className=\"col-md-3 mb-5\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"lp_ref\"\n            value={formData.lp_ref}\n            onChange={handleChange}\n            label=\"LP Reference\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeneralProduct;\n","F:\\React code\\diagnostic\\src\\components\\basic-table.js",[],"F:\\React code\\diagnostic\\src\\pages\\Profile\\changePassword.js",["1376","1377","1378"],"import { Button, TextField } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../components/common\";\nimport { CommonController } from \"../../_redux/controller/common.controller\";\n\nconst ChangePassword = () => {\n  const [formData, setFormData] = useState({\n    oldpass: \"\",\n    newpass: \"\",\n    confpass: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n    errors: {},\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  const handleChange = (event) => {\n    setFormData({ ...formData, [event.target.name]: event.target.value });\n  };\n\n  const validateForm = () => {\n    let errors = { ...formData.errors };\n    if (formData.oldpass == \"\") {\n      errors.oldpass = \"Please enter old password\";\n    } else {\n      delete errors.oldpass;\n    }\n    if (formData.newpass == \"\") {\n      errors.newpass = \"Please enter new password\";\n    } else {\n      delete errors.newpass;\n    }\n    if (formData.confpass == \"\") {\n      errors.confpass = \"Please enter confirm password\";\n    } else {\n      delete errors.confpass;\n    }\n    console.log(errors);\n    setFormData({ ...formData, errors: errors });\n    return Object.keys(errors).length !== 0;\n  };\n\n  const onSubmit = async () => {\n    try {\n      setLoading(true);\n      if (!validateForm()) {\n        await CommonController.commonApiCallFilter(\n          \"Profile/UpdateEmployeePassword\",\n          formData,\n          \"post\"\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Password changed successfully \");\n          } else {\n            showErrorToast(data.msg);\n          }\n        });\n      }\n      setLoading(false);\n    } catch (err) {\n      showErrorToast(err);\n    }\n  };\n\n  return (\n    <div className=\"card shadow\">\n      <div className=\"card-body\">\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              value={formData.oldpass}\n              name=\"oldpass\"\n              type=\"password\"\n              label=\"Old Password\"\n              onChange={handleChange}\n            />\n            {formData.errors && (\n              <p className=\"mb-0 text-danger\">{formData.errors.oldpass}</p>\n            )}\n          </div>\n          <div className=\"col-md-3\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              name=\"newpass\"\n              type=\"password\"\n              value={formData.newpass}\n              label=\"New Password\"\n              onChange={handleChange}\n            />\n            {formData.errors && (\n              <p className=\"mb-0 text-danger\">{formData.errors.newpass}</p>\n            )}\n          </div>\n          <div className=\"col-md-3\">\n            <TextField\n              variant=\"outlined\"\n              fullWidth\n              size=\"small\"\n              name=\"confpass\"\n              value={formData.confpass}\n              label=\"Conf. Password\"\n              onChange={handleChange}\n            />\n            {formData.errors && (\n              <p className=\"mb-0 text-danger\">{formData.errors.confpass}</p>\n            )}\n          </div>\n          <div className=\"col-md-12 mt-5\">\n            <Button\n              disable={loading}\n              variant=\"contained\"\n              onClick={onSubmit}\n              disableElevation\n              color=\"primary\"\n            >\n              {loading ? \"Processing...\" : \"Update Password\"}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChangePassword;\n","F:\\React code\\diagnostic\\src\\pages\\Profile\\attendance.js",["1379","1380","1381"],"import { DatePicker } from \"@material-ui/pickers\";\nimport { TextField } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\nimport { CommonController } from \"../../_redux/controller/common.controller\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport CustomPagination from \"../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../components/customRowComponent\";\nimport { showErrorToast } from \"../../components/common\";\nimport moment from \"moment\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst AttendanceBrowse = () => {\n  const [bodyParam, setBodyParam] = useState({\n    from_date: new Date().setDate(new Date().getDate() - 1),\n    to_date: new Date(),\n    emp_id: \"1\",\n  });\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [bodyParam]);\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    try {\n      let body = { ...bodyParam };\n      body.from_date = moment(bodyParam.from_date).format(\"DD-MM-yyyy\");\n      body.to_date = moment(bodyParam.to_date).format(\"DD-MM-yyyy\");\n      await CommonController.commonApiCall(\n        \"Attandance/EmpAttandanceBrowse\",\n        params,\n        body,\n        user_id\n      ).then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      });\n    } catch (err) {\n      showErrorToast(err);\n    }\n    setLoading(false);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleDateChange = (name, date) => {\n    setBodyParam({ ...bodyParam, [name]: date });\n  };\n\n  return (\n    <>\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\n        <div className=\"filter_box mb-5\">\n          <div className=\"row\">\n            <div className=\"col-md-1 d-flex align-items-center\">\n              <h4 className=\"mb-0\">Filters</h4>\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"Date\"\n                value={bodyParam.from_date}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"from_date\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <DatePicker\n                label=\"Date\"\n                value={bodyParam.to_date}\n                format=\"dd/MM/yyyy\"\n                onChange={(date) => handleDateChange(\"to_date\", date)}\n                animateYearScrolling\n                inputVariant=\"outlined\"\n                size=\"small\"\n                fullWidth\n              />\n            </div>\n\n            <div className=\"col-md-2 mb-5 mb-md-0\">\n              <TextField\n                fullWidth\n                id=\"outlined-basic\"\n                size=\"small\"\n                onKeyUp={handleParams}\n                name=\"filter_value\"\n                label=\"Search\"\n                variant=\"outlined\"\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ height: 400, width: \"100%\" }}>\n          <DataGrid\n            columns={[\n              {\n                field: \"srno\",\n                headerName: \"Sr. no\",\n                flex: 0,\n                hide: true,\n              },\n              {\n                field: \"date\",\n                headerName: \"Date\",\n                flex: 0.1,\n              },\n              {\n                field: \"emp_code\",\n                headerName: \"Emp Code\",\n                flex: 0.1,\n              },\n              {\n                field: \"emp_name\",\n                headerName: \"Emp Name\",\n                flex: 0.1,\n              },\n              {\n                field: \"in_time\",\n                headerName: \"In Time\",\n                flex: 0.1,\n              },\n              {\n                field: \"out_time\",\n                headerName: \"Out Time\",\n                flex: 0.1,\n              },\n              {\n                field: \"m_in_time\",\n                headerName: \"Req. In Time\",\n                flex: 0.1,\n              },\n\n              {\n                field: \"m_out_time\",\n                headerName: \"Req. Out Time\",\n                flex: 0.1,\n              },\n              {\n                field: \"remarks\",\n                headerName: \"Remarks\",\n                flex: 0.1,\n              },\n            ]}\n            pagination\n            getRowId={(row) => row.srno}\n            disableColumnFilter\n            pageSize={params.pageSize}\n            page={params.pageNo}\n            rowsPerPageOptions={[10, 15, 25, 100]}\n            rowCount={totalRecord}\n            paginationMode=\"server\"\n            onPageSizeChange={handlePageSizeChange}\n            onPageChange={handlePageChange}\n            loading={loading}\n            rowHeight={30}\n            components={\n              browseListData.length > 0\n                ? {\n                    Pagination: CustomPagination,\n                    NoRowsOverlay: CustomNoRowsOverlay,\n                  }\n                : {}\n            }\n            onSortModelChange={(sort) => {\n              if (sort.length > 0) {\n                setParams({\n                  ...params,\n                  sort_column: sort[0].field,\n                  sort_order: sort[0].sort,\n                });\n              }\n            }}\n            rows={browseListData}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AttendanceBrowse;\n","F:\\React code\\diagnostic\\src\\layouts\\Dashboard.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\index.js",["1382","1383","1384","1385"],"import React, { useState } from \"react\";\r\nimport BrowseAccount from \"./browse\";\r\nimport AddAccountMaster from \"./form\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { previewSelectedAccount } from \"../../../_redux/actions/masters/account.action\";\r\nimport { clearSelectedAccountId } from \"../../../_redux/actions/masters/all.action\";\r\n\r\nconst AccountsMaster = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleActionClick = (id) => {\r\n    var param = {\r\n      company_id: id,\r\n    };\r\n    dispatch(previewSelectedAccount(param));\r\n    setSeletedIndex(1);\r\n  };\r\n\r\n  const handleIndex = (index) => {\r\n    dispatch(clearSelectedAccountId());\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(0)}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(1)}\r\n          >\r\n            New Account\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 2 ? \"active\" : \"\")}\r\n            onClick={() => handleIndex(2)}\r\n          >\r\n            TCS\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 && (\r\n          <BrowseAccount\r\n            onPreview={() => setSeletedIndex(1)}\r\n            onEdit={() => setSeletedIndex(1)}\r\n            onActionClick={handleActionClick}\r\n            accountType={props.accountType}\r\n          />\r\n        )}\r\n\r\n        {selectedIndex === 1 && <AddAccountMaster />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccountsMaster;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\index.js",["1386","1387"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { clearSelectedGodownId } from \"../../../_redux/actions/masters/all.action\";\nimport AddGodown from \"./addEntry\";\n\nimport GodownBrowse from \"./browse\";\n// import AddMaterialCode from \"./addMaterialCode\";\n\n// import MaterialCodeBrowse from \"./browse\";\n\nconst GodownIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Godown\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <GodownBrowse onEdit={() => handleIndex(1)} />\n        ) : (\n          <AddGodown onClose={() => handleIndex(0)} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GodownIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\index.js",["1388","1389"],"import react, { useEffect } from \"react\";\r\nimport { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport ConfigAccountIndex from \"./Account\";\r\nimport ConfigProductIndex from \"./product\";\r\nimport ConfigEnquiryIndex from \"./enquiry\";\r\nimport ConfigCostingIndex from \"./costing\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\nimport { buttonLoader, showErrorToast } from \"../../../components/common\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tabs: {\r\n    borderRight: `1px solid ${theme.palette.divider}`,\r\n  },\r\n}));\r\n\r\nconst panel = [\r\n  {\r\n    name: \"Account\",\r\n    component: <ConfigAccountIndex />,\r\n  },\r\n  {\r\n    name: \"Product\",\r\n    component: <ConfigProductIndex />,\r\n  },\r\n  {\r\n    name: \"Sales Enquiry\",\r\n    component: <ConfigEnquiryIndex />,\r\n  },\r\n  {\r\n    name: \"Costing\",\r\n    component: <ConfigCostingIndex />,\r\n  },\r\n  {\r\n    name: \"Sales Order\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Quotation\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Type of Invoice\",\r\n    component: \"\",\r\n  },\r\n];\r\n\r\nconst ConfigurationMaster = () => {\r\n  const classes = useStyles();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n  const [MenuList, setMenuList] = useState([]);\r\n  const [thirdMenuId, setthirdMenuId] = useState(101);\r\n  const [SubMenuList, setSubMenuList] = useState([]);\r\n  const [loading, setloading] = useState(true);\r\n  const [loadingsubMenu, setloadingsubMenu] = useState(true);\r\n  const getThirdMenu = async (menu_id) => {\r\n    try {\r\n      let user_id = { user_id: localStorage.getItem(\"userId\") };\r\n      await CommonController.commonApiCallFilter(\r\n        \"menu/menu_list_level3?menu_id=\" + menu_id,\r\n        user_id,\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setMenuList(data.data);\r\n            setloading(false);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err.message);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const getfourthMenu = async (menu_id) => {\r\n    try {\r\n      let user_id = { user_id: localStorage.getItem(\"userId\") };\r\n      await CommonController.commonApiCallFilter(\r\n        \"menu/menu_list_level4?menu_id=\" + menu_id,\r\n        user_id,\r\n        \"post\",\r\n        \"node\"\r\n      )\r\n        .then((data) => {\r\n          if (data.status === 200) {\r\n            setSubMenuList(data.data);\r\n            setloadingsubMenu(false);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          showErrorToast(err.message);\r\n        });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getfourthMenu(thirdMenuId);\r\n  }, [thirdMenuId]);\r\n\r\n  useEffect(() => {\r\n    getThirdMenu(12);\r\n  }, []);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n        <div className={\"customtab-panel\"}>\r\n          <Tabs\r\n            orientation=\"vertical\"\r\n            variant=\"scrollable\"\r\n            value={selectedIndex}\r\n            onChange={handleIndex}\r\n            indicatorColor=\"primary\"\r\n            className={classes.tabs}\r\n            aria-label=\"Vertical tabs example\"\r\n          >\r\n            {loading ? (\r\n              <div className=\"text-center\">\r\n                {buttonLoader(false, \"Loading...\", \"\")}\r\n              </div>\r\n            ) : null}\r\n            {MenuList.map((tab, index) => {\r\n              return (\r\n                <Tab\r\n                  onClick={() => {\r\n                    setloadingsubMenu(true);\r\n                    setthirdMenuId(tab.transaction_id);\r\n                  }}\r\n                  className={\"tab\"}\r\n                  value={index}\r\n                  key={\"tab\" + index}\r\n                  label={tab.display_name}\r\n                />\r\n              );\r\n            })}\r\n          </Tabs>\r\n          <div className=\"customtab-container\">\r\n            {loadingsubMenu ? (\r\n              <div className=\"text-center\">\r\n                {buttonLoader(false, \"Loading...\", \"\")}\r\n              </div>\r\n            ) : (\r\n              <>\r\n                {selectedIndex===0 && (\r\n                  <ConfigAccountIndex list={SubMenuList} />\r\n                )}\r\n                {selectedIndex === 1 && (\r\n                  <ConfigProductIndex list={SubMenuList} />\r\n                )}\r\n              </>\r\n            )}\r\n            {/* {panel[selectedIndex].component} */}\r\n\r\n            {}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ConfigurationMaster;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\index.js",["1390","1391","1392","1393"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  clearSelectedEmployeeId,\n  clearSelectedGodownId,\n} from \"../../../_redux/actions/masters/all.action\";\nimport AddGodown from \"./addEntry\";\nimport EmployeeBrowse from \"./browse\";\n\nimport GodownBrowse from \"./browse\";\n// import AddMaterialCode from \"./addMaterialCode\";\n\n// import MaterialCodeBrowse from \"./browse\";\n\nconst EmployeeIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    dispatch(clearSelectedEmployeeId());\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Employee\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <EmployeeBrowse onEdit={() => handleIndex(1)} />\n        ) : (\n          <AddGodown onClose={() => handleIndex(0)} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\index.js",["1394","1395"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { clearSelectedComboId } from \"../../../_redux/actions/masters/all.action\";\nimport AddComboMLFB from \"./addCombo\";\n// import AddMaterialCode from \"./addMaterialCode\";\nimport ComboMLFBBrowse from \"./browse\";\n// import MaterialCodeBrowse from \"./browse\";\n\nconst ComboMLFBIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedComboId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              dispatch(clearSelectedComboId());\n              handleIndex(1);\n            }}\n          >\n            New Combo MLFB\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <ComboMLFBBrowse onEdit={() => handleIndex(1)} />\n        ) : (\n          <AddComboMLFB onClose={() => handleIndex(0)} />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ComboMLFBIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\index.js",["1396","1397","1398"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesCostingBrowse from \"./browse\";\n\nconst SalesCostingIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Costing\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesCostingBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesCostingIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\browse.js",["1399","1400","1401","1402","1403","1404"],"import React, { useEffect, useState } from \"react\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getAccountMasterFiltersList,\r\n  searchAccountMasterData,\r\n  setAccountHide,\r\n  setAccountVerified,\r\n} from \"../../../_redux/actions/masters/account.action\";\r\nimport {\r\n  Checkbox,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n  Tooltip,\r\n  withStyles,\r\n  Button,\r\n  FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\nimport { selectedAccountId } from \"../../../_redux/actions/masters/all.action\";\r\n\r\nimport { getBrowseUserRight, showErrorToast } from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst LightTooltip = withStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: theme.palette.common.white,\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    boxShadow: theme.shadows[1],\r\n    fontSize: 11,\r\n  },\r\n}))(Tooltip);\r\n\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseAccount = ({ onEdit, onPreview,accountType }) => {\r\n \r\n  const dispatch = useDispatch();\r\n  const getuserRightListResponse = useSelector(\r\n    (state) => state.common.userRightList\r\n  );\r\n\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [accountMasterFilter, setAccountMasterFilter] = useState({\r\n    region_name: \"\",\r\n    group_name: \"\",\r\n    verified: \"\",\r\n    mark_engg: \"\",\r\n    account_type:accountType\r\n  });\r\n\r\n  const [tempVerifed, setTempVerified] = useState([]);\r\n\r\n  const [regionList, setRegionList] = useState([]);\r\n  const [groupList, setGroupList] = useState([]);\r\n  const [enggList, setEnggList] = useState([]);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 15,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  let columns = [\r\n    {\r\n      field: \"id\",\r\n      headerName: \"ID\",\r\n      width: 70,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"region\",\r\n      headerName: \"Region\",\r\n      width: 180,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"short_name\",\r\n      headerName: \"Short Name\",\r\n      renderCell: (params) => (\r\n        <LightTooltip title={params.row.short_name}>\r\n          <span>{params.row.short_name}</span>\r\n        </LightTooltip>\r\n      ),\r\n      width: 200,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"company\",\r\n      headerName: \"Company\",\r\n      renderCell: (params) => (\r\n        <LightTooltip title={params.row.company}>\r\n          <span>{params.row.company}</span>\r\n        </LightTooltip>\r\n      ),\r\n      width: 180,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"address\",\r\n      headerName: \"Address\",\r\n      renderCell: (params) => (\r\n        <LightTooltip title={params.row.address}>\r\n          <span>{params.row.address}</span>\r\n        </LightTooltip>\r\n      ),\r\n      width: 300,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"pin\",\r\n      headerName: \"Pin\",\r\n      width: 80,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"mobile\",\r\n      headerName: \"Mobile\",\r\n      renderCell: (params) => (\r\n        <LightTooltip title={params.row.mobile}>\r\n          <span>{params.row.mobile}</span>\r\n        </LightTooltip>\r\n      ),\r\n      width: 150,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"email\",\r\n      headerName: \"Email\",\r\n      renderCell: (params) => (\r\n        <LightTooltip title={params.row.email}>\r\n          <span>{params.row.email}</span>\r\n        </LightTooltip>\r\n      ),\r\n      width: 200,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"verified\",\r\n      headerName: \"Verified\",\r\n      renderCell: (params) => (\r\n        <FormControlLabel\r\n          className={\"formControlLabel\"}\r\n          control={\r\n            <Checkbox\r\n              defaultChecked={params.row.edit === \"True\"}\r\n              size=\"small\"\r\n              color=\"primary\"\r\n              onChange={(event) =>\r\n                updateVerifiedStatus(event.target.checked, params.id)\r\n              }\r\n              inputProps={{ \"aria-label\": \"checkbox with small size\" }}\r\n            />\r\n          }\r\n          label={\r\n            <span\r\n              className={\r\n                \"font_13 \" +\r\n                (params.row.edit === \"True\" ||\r\n                tempVerifed.indexOf(params.row.id) > -1\r\n                  ? \"text-success\"\r\n                  : \"text-danger\")\r\n              }\r\n            >\r\n              {params.row.edit === \"True\" ||\r\n              tempVerifed.indexOf(params.row.id) > -1\r\n                ? \"Verified\"\r\n                : \"Not Verified\"}\r\n            </span>\r\n          }\r\n        />\r\n      ),\r\n      width: 120,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"hide\",\r\n      headerName: \"Hide\",\r\n      renderCell: (params) => (\r\n        <Checkbox\r\n          size=\"small\"\r\n          color=\"primary\"\r\n          defaultChecked={params.row.hide === \"True\"}\r\n          onChange={(event) =>\r\n            updateHideStatus(event.target.checked, params.id)\r\n          }\r\n          // onChange={() => console.log(params.id)}\r\n          inputProps={{ \"aria-label\": \"checkbox with small size\" }}\r\n        />\r\n      ),\r\n      width: 80,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"mark_engg\",\r\n      headerName: \"Markt. Engg\",\r\n      renderCell: (params) => (\r\n        <LightTooltip title={params.row.mark_engg}>\r\n          <span>{params.row.mark_engg}</span>\r\n        </LightTooltip>\r\n      ),\r\n      width: 150,\r\n      hide: false,\r\n    },\r\n    {\r\n      field: \"\",\r\n      headerName: \"Actions\",\r\n      renderCell: (params) => (\r\n        <ActionButtons\r\n          onPreview={\r\n            getBrowseUserRight(getuserRightListResponse)?.level == 1\r\n              ? () => handleEdit(params.row.id)\r\n              : null\r\n          }\r\n          onEdit={\r\n            getBrowseUserRight(getuserRightListResponse)?.level == 1\r\n              ? () => handleEdit(params.row.id)\r\n              : null\r\n          }\r\n          // onDelete={\r\n          //   getBrowseUserRight(getuserRightListResponse)?.delete_right == \"True\"\r\n          //     ? () => handleDeleteRow(params.row.id)\r\n          //     : null\r\n          // }\r\n        />\r\n      ),\r\n      width: 120,\r\n    },\r\n    {\r\n      field: \"datetime\",\r\n      headerName: \"Date Time\",\r\n      width: 120,\r\n      hide: false,\r\n    },\r\n  ];\r\n\r\n  const handleFilters = (event) => {\r\n    setAccountMasterFilter({\r\n      ...accountMasterFilter,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleParams = (event) => {\r\n    setParams({ ...params, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // getUserFilter();\r\n    getBrowseListData();\r\n    getFilterListData();\r\n  }, []);\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Account/AccountMasterBrowse\",\r\n      params,\r\n      accountMasterFilter\r\n    )\r\n      .then((data) => {\r\n        setBrowseListData(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setLoading(false);\r\n  };\r\n\r\n  const getFilterListData = async () => {\r\n    await CommonController.commonApiCallFilter(\r\n      \"Dropdown/AccountMasterDropdown\",\r\n      user_id,\r\n      \"post\"\r\n    )\r\n      .then((data) => {\r\n        setRegionList(data.regionList);\r\n        setGroupList(data.groupList);\r\n        setEnggList(data.employeeList);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, accountMasterFilter]);\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param });\r\n  };\r\n\r\n  const updateHideStatus = (val, id) => {\r\n    const param = {\r\n      company_id: id,\r\n      hide: val ? \"1\" : \"0\",\r\n      user_id: localStorage.getItem(\"userId\"),\r\n    };\r\n    dispatch(setAccountHide(param));\r\n  };\r\n\r\n  const updateVerifiedStatus = (val, id) => {\r\n    var temp = [...tempVerifed];\r\n    var tempIndex = temp.indexOf(id);\r\n    const param = {\r\n      company_id: id,\r\n      edit: val ? \"1\" : \"0\",\r\n      user_id: localStorage.getItem(\"userId\"),\r\n    };\r\n\r\n    if (tempIndex > -1) {\r\n      temp.splice(tempIndex, 1);\r\n    } else {\r\n      if (val) {\r\n        temp.push(id);\r\n      }\r\n    }\r\n    setTempVerified(temp);\r\n    dispatch(setAccountVerified(param));\r\n  };\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedAccountId(id));\r\n    onEdit();\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                Region Name\r\n              </InputLabel>\r\n              <Select\r\n                name=\"region_name\"\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={accountMasterFilter.region_name}\r\n                onChange={handleFilters}\r\n                label=\"Region Name\"\r\n              >\r\n                <MenuItem value=\"\">None</MenuItem>\r\n                {regionList.length > 0\r\n                  ? regionList.map((region, index) => {\r\n                      return (\r\n                        <MenuItem key={\"region\" + index} value={region.value}>\r\n                          {region.value}\r\n                        </MenuItem>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                Group\r\n              </InputLabel>\r\n              <Select\r\n                name=\"group_name\"\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={accountMasterFilter.group_name}\r\n                onChange={handleFilters}\r\n                label=\"Group\"\r\n              >\r\n                <MenuItem value=\"\">None</MenuItem>\r\n                {groupList.length > 0\r\n                  ? groupList.map((group, index) => {\r\n                      return (\r\n                        <MenuItem key={\"groupList\" + index} value={group.value}>\r\n                          {group.value}\r\n                        </MenuItem>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <div className=\"col-md-1\">\r\n            <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                Verified\r\n              </InputLabel>\r\n              <Select\r\n                name=\"verified\"\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={accountMasterFilter.region}\r\n                onChange={handleFilters}\r\n                label=\"Verified\"\r\n              >\r\n                <MenuItem value={\"\"}>All</MenuItem>\r\n                <MenuItem value={\"1\"}>Verified</MenuItem>\r\n                <MenuItem value={\"0\"}>Not Verified</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <FormControl fullWidth size=\"small\" variant=\"outlined\">\r\n              <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                Markt. Engg\r\n              </InputLabel>\r\n              <Select\r\n                name=\"mark_engg\"\r\n                labelId=\"demo-simple-select-outlined-label\"\r\n                id=\"demo-simple-select-outlined\"\r\n                value={accountMasterFilter.mark_engg}\r\n                onChange={handleFilters}\r\n                label=\"Markt. Engg\"\r\n              >\r\n                <MenuItem value=\"\">None</MenuItem>\r\n                {enggList.length > 0\r\n                  ? enggList.map((engg, index) => {\r\n                      return (\r\n                        <MenuItem key={\"enggList\" + index} value={engg.value}>\r\n                          {engg.value}\r\n                        </MenuItem>\r\n                      );\r\n                    })\r\n                  : null}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyDown={(e) => {\r\n                if (e.keyCode === 13) {\r\n                  handleParams(e);\r\n                }\r\n              }}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-2 text-right\">\r\n            <Button color=\"primary\" disableElevation variant=\"contained\">\r\n              Export Excel\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 500, width: \"100%\" }}>\r\n        <DataGrid\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[15, 25, 50, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          // onColumnVisibilityChange={(e) => handleColumnHide(e)}\r\n          columns={columns}\r\n          rows={browseListData} //accountMasterList\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseAccount;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\form.js",["1405","1406","1407","1408","1409","1410"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\nimport ContactPerson from \"./contact_person\";\r\nimport GeneralInfo from \"./generalInfo\";\r\nimport AccountTNC from \"./tnc\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\r\n\r\nconst AddAccountMaster = () => {\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.accountId\r\n  );\r\n\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n  const [formData, setFormData] = useState({\r\n    datetime: \"\",\r\n    short_name: \"\",\r\n    mobile: \"\",\r\n    mark_engg: \"\",\r\n    edit: \"\",\r\n    hide: \"\",\r\n    district: \"\",\r\n    state: \"\",\r\n    city: \"\",\r\n    region_name: \"\",\r\n    group_name: \"\",\r\n    verified: null,\r\n    company_id: \"\",\r\n    company_name: \"\",\r\n    group_id: \"\",\r\n    address1: \"\",\r\n    address2: \"\",\r\n    pin_id: \"\",\r\n    pin_code: \"\",\r\n    region_id: \"\",\r\n    phone1: \"\",\r\n    phone2: \"\",\r\n    fax: \"\",\r\n    email: \"\",\r\n    website: \"\",\r\n    rating_id: \"\",\r\n    rating_name: \"\",\r\n    se_id: \"\",\r\n    siem_engg: \"\",\r\n    remarks: \"\",\r\n    distance: \"\",\r\n    credit_limit: \"\",\r\n    credit_period: \"\",\r\n    range: \"\",\r\n    division: \"\",\r\n    comm: \"\",\r\n    ecc_no: \"\",\r\n    ser_tax_no: \"\",\r\n    pan_no: \"\",\r\n    tin_no: \"\",\r\n    cst_no: \"\",\r\n    lst_no: \"\",\r\n    pla_no: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n    new_identity: null,\r\n    pf_id: \"\",\r\n    exciseduty_id: \"\",\r\n    salestax_id: \"\",\r\n    freight_id: \"\",\r\n    insurance_id: \"\",\r\n    inspection_id: \"\",\r\n    mode_of_dispatch_id: \"\",\r\n    delivery_id: \"\",\r\n    octroi_id: \"\",\r\n    servicetax_id: \"\",\r\n    travel_id: \"\",\r\n    conveyance_id: \"\",\r\n    loading_id: \"\",\r\n    boarding_id: \"\",\r\n    ld_id: \"\",\r\n    validity_id: \"\",\r\n    payment_id: \"\",\r\n    finance_id: \"\",\r\n    tcs_per: \"\",\r\n    add_user_id: \"\",\r\n    edit_user_id: \"\",\r\n    edit_user_name: \"\",\r\n    add_user_name: \"\",\r\n    edatetime: \"\",\r\n    cpersonList: [],\r\n    partyList: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\"Account/AccountMasterPreview\", {\r\n        company_id: selectedIdResponse,\r\n      }).then((data) => {\r\n        setFormData(data);\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleAutoChange = (key1, key2, value) => {\r\n    let tempFormData = { ...formData };\r\n\r\n    if (key1.trim() != \"\") {\r\n      tempFormData[key1] = value?.id;\r\n    }\r\n\r\n    if (key2.trim() != \"\") {\r\n      tempFormData[key2] = value?.value;\r\n    }\r\n    setFormData(tempFormData);\r\n  };\r\n\r\n  console.log(formData);\r\n\r\n  const saveForm = () => {\r\n    let _formData = { ...formData };\r\n\r\n    if (selectedIdResponse) {\r\n      _formData.user_id = localStorage.getItem(\"userId\");\r\n      _formData.user_name = localStorage.getItem(\"userName\");\r\n    }\r\n\r\n    CommonController.commonApiCallFilter(\r\n      \"Account/AccountMasterInsert\",\r\n      _formData\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\r\n          `Account Details ${\r\n            selectedIdResponse ? \"updated\" : \"saved\"\r\n          } successfully`\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => setSeletedIndex(0)}\r\n          >\r\n            General Infomation\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => setSeletedIndex(1)}\r\n          >\r\n            Contact Person\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 2 ? \"active\" : \"\")}\r\n            onClick={() => setSeletedIndex(2)}\r\n          >\r\n            Terms & Conditions\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content pt-7\">\r\n        {selectedIndex === 0 && (\r\n          <GeneralInfo\r\n            formData={formData}\r\n            handleChange={handleChange}\r\n            handleAutoChange={handleAutoChange}\r\n          />\r\n        )}\r\n        {selectedIndex === 1 && (\r\n          <ContactPerson\r\n            formData={formData}\r\n            handleChange={handleChange}\r\n            handleAutoChange={handleAutoChange}\r\n            handleCPersonList={(arr) =>\r\n              setFormData({ ...formData, cpersonList: arr })\r\n            }\r\n          />\r\n        )}\r\n\r\n        {selectedIndex === 2 && (\r\n          <AccountTNC formData={formData} handleChange={handleChange} />\r\n        )}\r\n      </div>\r\n      <div className=\"col-md-12 text-right\">\r\n        {selectedIndex !== 0 && (\r\n          <Button\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            onClick={() => setSeletedIndex(selectedIndex - 1)}\r\n            disableElevation\r\n          >\r\n            Back\r\n          </Button>\r\n        )}\r\n        {selectedIndex !== 2 && (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => setSeletedIndex(selectedIndex + 1)}\r\n            color=\"primary\"\r\n            className=\"mr-2\"\r\n            disableElevation\r\n          >\r\n            Next\r\n          </Button>\r\n        )}\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={saveForm}\r\n          color=\"primary\"\r\n          disableElevation\r\n        >\r\n          Submit\r\n        </Button>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddAccountMaster;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\godown\\addEntry.js",["1411","1412","1413","1414","1415","1416","1417","1418"],"import { TextField, Button } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React, { useEffect, useState } from \"react\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport {\n  buttonLoader,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport { SimpleTable } from \"../../../components/basic-table\";\nimport useForceUpdate from \"use-force-update\";\nimport moment from \"moment\";\nimport { useSelector } from \"react-redux\";\nimport { Loader } from \"../../../components/loader\";\nimport { selectedGodownId } from \"../../../_redux/actions/masters/all.action\";\n\nconst AddGodown = ({ onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.godownId\n  );\n  const [validator, setValidator] = useState(new SimpleReactValidator());\n\n  const forceUpdate = useForceUpdate();\n\n  const [insertParams, setInsertParams] = useState({\n    godown_id: \"0\",\n    godown_name: \"\",\n    address: \"\",\n    user_id: \"\",\n  });\n\n  useEffect(() => {\n    if (selectedIdResponse) {\n      CommonController.commonApiCallFilter(\"Godown/GodownMasterPreview\", {\n        godown_id: selectedIdResponse,\n      }).then((data) => {\n        if (data.godown_id) {\n          setInsertParams({\n            ...insertParams,\n            godown_id: data.godown_id,\n            godown_name: data.godown_name,\n            address: data.address,\n          });\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    }\n  }, [selectedIdResponse]);\n\n  const insertCombo = async () => {\n    if (validator.allValid()) {\n      setLoading(true);\n      CommonController.commonApiCallFilter(\n        \"Godown/GodownMasterInsert\",\n        insertParams\n      ).then((data) => {\n        if (data.valid) {\n          showSuccessToast(\"Successfully Saved\");\n          setLoading(false);\n        } else {\n          showErrorToast(\"Something went wrong\");\n        }\n      });\n    } else {\n      validator.showMessages();\n      // rerender to show messages for the first time\n      // you can use the autoForceUpdate option to do this automatically`\n      forceUpdate();\n    }\n  };\n\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      {/* {loading && <Loader />} */}\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            label=\"Godown Name*\"\n            value={insertParams.godown_name}\n            onChange={(event) => {\n              setInsertParams({\n                ...insertParams,\n                godown_name: event.target.value,\n              });\n            }}\n          />\n          <p className=\"text-danger\">\n            {validator.message(\n              \"Godown Name\",\n              insertParams.godown_name,\n              \"required\"\n            )}\n          </p>\n        </div>\n        <div className=\"col-md-6\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            multiline\n            label=\"Address\"\n            value={insertParams.address}\n            onChange={(event) => {\n              setInsertParams({ ...insertParams, address: event.target.value });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"w-100 text-right mt-4\">\n        <Button\n          onClick={() => onClose()}\n          variant=\"contained\"\n          className=\"mr-2\"\n          color=\"primary\"\n          disableElevation\n        >\n          Cancel\n        </Button>\n        {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\n      </div>\n    </div>\n  );\n};\n\nexport default AddGodown;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\browse.js",["1419","1420"],"import { Checkbox, TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst EmployeeBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Employee/EmpMasterBrowse\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"srno\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"code\",\n              headerName: \"Code\",\n              flex: 0.1,\n            },\n            {\n              field: \"empname\",\n              headerName: \"Emp. Name\",\n              flex: 0.1,\n            },\n            {\n              field: \"address\",\n              headerName: \"Address\",\n              flex: 0.1,\n            },\n            {\n              field: \"mobile\",\n              headerName: \"Mobile\",\n              flex: 0.1,\n            },\n            {\n              field: \"email\",\n              headerName: \"Email\",\n              flex: 0.1,\n            },\n            {\n              field: \"department\",\n              headerName: \"Department\",\n              flex: 0.1,\n            },\n            {\n              field: \"designation\",\n              headerName: \"Designation\",\n              flex: 0.1,\n            },\n            {\n              field: \"manager\",\n              headerName: \"Manager\",\n              flex: 0.1,\n            },\n            {\n              field: \"disable\",\n              headerName: \"Disable\",\n              flex: 0.1,\n              renderCell: (params) => {\n                return (\n                  <Checkbox\n                    {...label}\n                    color=\"primary\"\n                    checked={params.row.disable === \"True\"}\n                  />\n                );\n              },\n            },\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.id)}\n                  onDelete={() => handleDeleteRow(params.row.id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default EmployeeBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\addEntry.js",["1421","1422","1423","1424"],"import React, { useEffect, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport GeneralInfoEmp from \"./general\";\nimport OtherDetails from \"./other\";\nimport { useSelector } from \"react-redux\";\nimport { ifStatement } from \"@babel/types\";\n\nconst AddEmployee = ({ onClose }) => {\n  const selectedIdResponse = useSelector(\n    (state) => state.AllReducersMaster.employeeId\n  );\n  const [selectedTab, setSelectedTab] = useState(0);\n  const [listValues, setListValues] = useState({\n    empList: [],\n    desgnList: [],\n    depInchrList: [],\n  });\n\n  const [formData, setFormData] = useState({\n    pr_check: false,\n    user_id: 0,\n    user_code: \"\",\n    attendance_emp_code: \"\",\n    ctc_per_day: \"\",\n    card_no: \"\",\n    short_name: \"\",\n    first_name: \"\",\n    last_name: \"\",\n    f_h_name: \"\",\n    mother_name: \"\",\n    m_status: \"\",\n    gender: \"\",\n    dob: null,\n    pr_add1: \"\",\n    pr_phone: \"\",\n    pr_mobile: \"\",\n    pt_add1: \"\",\n    pt_phone: \"\",\n    pt_mobile: \"\",\n    department_name: \"\",\n    designation_name: \"\",\n    joining_date: null,\n    leaving_date: null,\n    leaving_reason: \"\",\n    dispensary: \"\",\n    remarks: \"\",\n    department_incharge: \"\",\n    user_name: \"\",\n    password: \"\",\n    email: \"\",\n    pf_code: \"\",\n    esi_code: \"\",\n    pan_no: \"\",\n    salary_p_mode: 1,\n    account_no: \"\",\n    bank_name: \"\",\n    nominee: \"\",\n    edit_button: \"\",\n    disable: \"\",\n    login_user_id: \"\",\n    login_user_name: \"\",\n    sign_path: \"\",\n  });\n\n  useEffect(() => {\n    if (selectedIdResponse) {\n      CommonController.commonApiCallFilter(\"Employee/EmployeeMasterPreview\", {\n        user_id: selectedIdResponse,\n      })\n        .then((data) => {\n          // setFormData(data);\n          let tempData = { ...formData };\n          for (let key in formData) {\n            if (data.hasOwnProperty(key)) {\n              tempData[key] = data[key];\n            }\n          }\n          setFormData(tempData);\n        })\n        .catch((err) => {\n          showErrorToast(err);\n        });\n    }\n  }, [selectedIdResponse]);\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleDateChange = (name, date) => {\n    setFormData({ ...formData, [name]: date });\n  };\n\n  const handleAutoChange = (name, value) => {\n    setFormData({ ...formData, [name]: value ? value.value : null });\n  };\n\n  const getAutoValue = (key, arr, val) => {\n    const value = arr.filter((x) => x[key] === val);\n    return value && value.length > 0 ? value[0] : null;\n  };\n\n  const handleTabChange = (index) => {\n    setSelectedTab(index);\n  };\n\n  const setPRAddress = (e) => {\n    if (e.target.checked) {\n      setFormData({\n        ...formData,\n        pr_check: e.target.checked,\n        pr_add1: formData.pt_add1,\n      });\n    } else {\n      setFormData({\n        ...formData,\n        pr_check: e.target.checked,\n        pr_add1: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDropdown\")\n      .then((data) => {\n        setListValues({\n          empList: data.empList,\n          desgnList: data.desgnList,\n          depInchrList: data.depInchrList,\n        });\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  }, []);\n\n  const onNext = () => {\n    if (selectedTab === 0) {\n      setSelectedTab(1);\n    } else {\n      onSubmit();\n    }\n  };\n\n  const onBack = () => {\n    setSelectedTab(0);\n  };\n\n  const onSubmit = () => {\n    CommonController.commonApiCallFilter(\n      \"Employee/EmployeeMasterInsert\",\n      formData\n    )\n      .then((data) => {\n        if (data.valid) {\n          showSuccessToast(\n            `Employee ${\n              selectedIdResponse ? \"updated\" : \"created\"\n            } successfully`\n          );\n        }\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n  };\n\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      {/* {loading && <Loader />} */}\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 0 ? \"active\" : \"\")}\n            onClick={() => handleTabChange(0)}\n          >\n            General Information\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedTab === 1 ? \"active\" : \"\")}\n            onClick={() => handleTabChange(1)}\n          >\n            Other Details\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content mt-10\">\n        {selectedTab === 0 && (\n          <GeneralInfoEmp\n            formData={formData}\n            handleChange={handleChange}\n            handleDateChange={handleDateChange}\n            handleAutoChange={handleAutoChange}\n            getAutoValue={getAutoValue}\n            listValues={listValues}\n            onCheckChange={setPRAddress}\n          />\n        )}\n        {selectedTab === 1 && (\n          <OtherDetails formData={formData} handleChange={handleChange} />\n        )}\n        <div className=\"w-100 text-right\">\n          {selectedTab === 1 && (\n            <Button\n              variant=\"contained\"\n              onClick={onBack}\n              className=\"mr-3\"\n              color=\"primary\"\n              disableElevation\n            >\n              Back\n            </Button>\n          )}\n          <Button\n            variant=\"contained\"\n            onClick={onNext}\n            color=\"primary\"\n            disableElevation\n          >\n            {selectedTab === 1 ? \"Submit\" : \"Next\"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AddEmployee;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\Sales Costing\\browse.js",["1425","1426","1427","1428","1429","1430","1431","1432","1433","1434"],"import { TextField, MenuItem } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\n\nimport moment from \"moment\";\n\nimport { DatePicker } from \"@material-ui/pickers\";\nimport DateFilter from \"../../../components/dateFilter\";\n\nconst SalesCostingBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const [markEng, setMarkEng] = useState(null);\n\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: \"\",\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Costing/SalesCostingBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\n          \n         \n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}       \n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n            },\n            {\n              field: \"riv\",\n              headerName: \"Costing No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"status_name\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesCostingBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\browse.js",["1435","1436","1437"],"import { TextField } from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport moment from \"moment\";\nimport React, { useEffect, useState } from \"react\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch } from \"react-redux\";\nimport { selectedComboMLFBId } from \"../../../_redux/actions/masters/all.action\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\nconst ComboMLFBBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 10,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"\",\n  });\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"ComboMlfb/ComboMlfbBrowse\",\n      params,\n      user_id\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedComboMLFBId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"ComboMlfb/ComboMlfbDelete\", {\n      tran_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyUp={handleParams}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n        </div>\n      </div>\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              flex: 0,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              flex: 0.1,\n            },\n            {\n              field: \"mlfb_no\",\n              headerName: \"MLFB No.\",\n              flex: 0.1,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Date\",\n              flex: 0.1,\n            },\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onEdit={() => handleEdit(params.row.tran_id)}\n                  onDelete={() => handleDeleteRow(params.row.tran_id)}\n                />\n              ),\n              flex: 0.1,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          components={{\n            Pagination: CustomPagination,\n            NoRowsOverlay: CustomNoRowsOverlay,\n          }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ComboMLFBBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\combomlfb\\addCombo.js",["1438","1439","1440"],"import { TextField, Button } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React, { useEffect, useState } from \"react\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { showErrorToast, showSuccessToast } from \"../../../components/common\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport { SimpleTable } from \"../../../components/basic-table\";\nimport useForceUpdate from \"use-force-update\";\nimport moment from \"moment\";\nimport { useSelector } from \"react-redux\";\nimport { Loader } from \"../../../components/loader\";\n\nconst AddComboMLFB = ({ onClose }) => {\n  const [loading, setLoading] = useState(false);\n  const [dataLoading, setDataLoading] = useState(false);\n  const [validator, setValidator] = useState(new SimpleReactValidator());\n  const selectedComboMLFBIdResponse = useSelector(\n    (state) => state.AllReducersMaster.comboMLFBId\n  );\n\n  const forceUpdate = useForceUpdate();\n  const [mlfbProductList, setProductList] = useState([]);\n  const [insertParams, setInsertParams] = useState({\n    tran_id: \"0\",\n    date: null,\n    product_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n    user_name: localStorage.getItem(\"userName\"),\n    mlfbItems: [],\n  });\n\n  const [selectedParams, setSelectedParams] = useState({\n    date: null,\n    selectedProduct: \"\",\n    selectedMlfb: \"\",\n  });\n\n  useEffect(async () => {\n    if (selectedComboMLFBIdResponse && mlfbProductList.length > 0) {\n      setDataLoading(true);\n      await CommonController.commonApiCallFilter(\"ComboMlfb/ComboMlfbPreview\", {\n        tran_id: selectedComboMLFBIdResponse,\n      }).then((data) => {\n        setSelectedParams({\n          ...selectedParams,\n          date: new Date(\n            data.date.split(\"/\")[1] +\n              \"/\" +\n              data.date.split(\"/\")[0] +\n              \"/\" +\n              data.date.split(\"/\")[2]\n          ),\n          selectedMlfb: mlfbProductList.filter(\n            (x) => x.value === data.mlfb_no\n          )[0],\n        });\n        setInsertParams({\n          ...insertParams,\n          remarks: data.remarks,\n          product_id: data.product_id,\n          mlfbItems: data.mlfbItems,\n          date: data.date,\n          tran_id: data.tran_id,\n        });\n      });\n      setDataLoading(false);\n    }\n  }, [selectedComboMLFBIdResponse, mlfbProductList]);\n\n  const onProductChoose = async () => {\n    const tempList = [...insertParams.mlfbItems];\n    const indx = tempList.findIndex(\n      (x) => x.product_id === selectedParams.selectedProduct?.id\n    );\n    if (indx > -1) {\n      showErrorToast(\"Already selected\");\n    } else {\n      setLoading(true);\n      await CommonController.commonApiCallFilter(\n        \"ComboMlfb/ComboMlfbPreviewDetails\",\n        {\n          product_id: selectedParams.selectedProduct?.id,\n        }\n      ).then((data) => {\n        tempList.push(data);\n      });\n      setInsertParams({ ...insertParams, mlfbItems: tempList });\n      setLoading(false);\n      setSelectedParams({ ...selectedParams, selectedProduct: \"\" });\n    }\n  };\n\n  const insertCombo = async () => {\n    if (validator.allValid()) {\n      if (insertParams.mlfbItems.length > 0) {\n        CommonController.commonApiCallFilter(\n          \"ComboMlfb/ComboMlfbInsert\",\n          insertParams\n        ).then((data) => {\n          if (data.valid) {\n            showSuccessToast(\"Successfully Saved\");\n          } else {\n            showErrorToast(\"Something went wrong\");\n          }\n        });\n      } else {\n        showErrorToast(\"Please select MLFB Products\");\n      }\n    } else {\n      validator.showMessages();\n      // rerender to show messages for the first time\n      // you can use the autoForceUpdate option to do this automatically`\n      forceUpdate();\n    }\n  };\n\n  const getProductList = async () => {\n    await CommonController.commonApiCallFilter(\n      \"Dropdown/GetProductMlfb\",\n      {}\n    ).then((data) => setProductList(data));\n  };\n\n  useEffect(() => {\n    getProductList();\n  }, []);\n\n  //   const handleDataChange = () => {};\n\n  const handleDateChange = (key, date) => {\n    setInsertParams({\n      ...insertParams,\n      [key]: moment(date).format(\"DD-MM-YYYY\"),\n    });\n    setSelectedParams({ ...selectedParams, date: date });\n  };\n\n  const mlfbColumns = [\n    {\n      id: \"mlfb_no\",\n      label: \"MLFB No\",\n    },\n    {\n      id: \"product_code\",\n      label: \"Product Code\",\n    },\n    {\n      id: \"category_name\",\n      label: \"Category Name\",\n    },\n    {\n      id: \"p_group_name\",\n      label: \"Group Name\",\n    },\n  ];\n\n  const handleDelete = (row) => {\n    const tempList = [...insertParams.mlfbItems];\n    const indx = tempList.findIndex((x) => x.product_id === row.product_id);\n    if (indx > -1) {\n      tempList.splice(indx, 1);\n    }\n    setInsertParams({ ...insertParams, mlfbItems: tempList });\n  };\n\n  return (\n    <div className=\"container-fluid mt-5 pt-5\">\n      {dataLoading && <Loader />}\n      <div className=\"row\">\n        <div className=\"col-md-3\">\n          <DatePicker\n            label=\"Date*\"\n            value={selectedParams.date}\n            format=\"dd-MM-yyyy\"\n            onChange={(date) => {\n              handleDateChange(\"date\", date);\n              setSelectedParams({ ...selectedParams, date: date });\n            }}\n            animateYearScrolling\n            inputVariant=\"outlined\"\n            size=\"small\"\n            fullWidth\n          />\n          <p className=\"text-danger\">\n            {validator.message(\"Date\", selectedParams.date, \"required\")}\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo\"\n            options={mlfbProductList}\n            getOptionLabel={(options) => options.value}\n            fullWidth\n            value={selectedParams.selectedMlfb}\n            onChange={(event, newValue) => {\n              setInsertParams({ ...insertParams, product_id: newValue?.id });\n              setSelectedParams({ ...selectedParams, selectedMlfb: newValue });\n            }}\n            size=\"small\"\n            renderInput={(params) => (\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                {...params}\n                label=\"MLFB No.*\"\n              />\n            )}\n          />\n          <p className=\"text-danger\">\n            {validator.message(\"MLFB\", insertParams.product_id, \"required\")}\n          </p>\n        </div>\n        <div className=\"col-md-6\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            multiline\n            label=\"Remarks\"\n            value={insertParams.remarks}\n            onChange={(event) => {\n              setInsertParams({ ...insertParams, remarks: event.target.value });\n            }}\n          />\n          <p className=\"text-danger\">\n            {validator.message(\"Remarks\", insertParams.remarks, \"required\")}\n          </p>\n        </div>\n        <div className=\"col-md-4 d-flex\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo2\"\n            options={mlfbProductList}\n            getOptionLabel={(options) => options.value}\n            fullWidth\n            value={selectedParams.selectedProduct}\n            onChange={(event, newValue) => {\n              setSelectedParams({\n                ...selectedParams,\n                selectedProduct: newValue,\n              });\n            }}\n            size=\"small\"\n            className=\"mr-3\"\n            renderInput={(params) => (\n              <TextField\n                variant=\"outlined\"\n                size=\"small\"\n                {...params}\n                label=\"MLFB Product\"\n              />\n            )}\n          />\n\n          <Button\n            color=\"primary\"\n            disabled={loading}\n            onClick={onProductChoose}\n            disableElevation\n            variant=\"contained\"\n          >\n            {loading ? (\n              <i class=\"fas fa-circle-notch fa-spin text-white\"></i>\n            ) : (\n              \"Add\"\n            )}\n          </Button>\n        </div>\n      </div>\n      <SimpleTable\n        columns={mlfbColumns}\n        rows={insertParams.mlfbItems}\n        onDelete={handleDelete}\n      />\n      <div className=\"w-100 text-right mt-4\">\n        <Button\n          variant=\"contained\"\n          className=\"mr-2\"\n          color=\"primary\"\n          disableElevation\n          onClick={insertCombo}\n        >\n          Save\n        </Button>\n        <Button\n          onClick={() => onClose()}\n          variant=\"contained\"\n          color=\"primary\"\n          disableElevation\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddComboMLFB;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\tnc.js",[],"F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\generalInfo.js",["1441","1442","1443","1444","1445","1446","1447","1448","1449","1450"],"import {\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getAutoValue } from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst GeneralInfo = ({ formData, handleChange, handleAutoChange }) => {\r\n  const [dropDownValues, setDropDownValues] = useState({\r\n    groupList: [],\r\n    pincodeList: [],\r\n    regionList: [],\r\n    ratingList: [],\r\n    employeeList: [],\r\n    seimenggList: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    CommonController.commonApiCallFilter(\"Dropdown/AccountMasterDropdown\").then(\r\n      (data) => {\r\n        const values = {\r\n          groupList: data.groupList,\r\n          pincodeList: data.pincodeList,\r\n          regionList: data.regionList,\r\n          ratingList: data.ratingList,\r\n          employeeList: data.employeeList,\r\n          seimenggList: data.seimenggList,\r\n        };\r\n        setDropDownValues(values);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  const {\r\n    groupList,\r\n    pincodeList,\r\n    regionList,\r\n    employeeList,\r\n    seimenggList,\r\n    ratingList,\r\n  } = dropDownValues;\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Company Id\"\r\n              fullWidth\r\n              disabled\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"company_id\"\r\n              value={formData.company_id}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Short Name *\"\r\n              name=\"short_name\"\r\n              onChange={handleChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              value={formData.short_name}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Company Name*\"\r\n              onChange={handleChange}\r\n              fullWidth\r\n              value={formData.company_name}\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"company_name\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <Autocomplete\r\n              size=\"small\"\r\n              options={groupList}\r\n              getOptionLabel={(option) => option.value}\r\n              fullWidth\r\n              value={{ id: formData?.group_id, value: formData?.group_name }}\r\n              onChange={(event, value) =>\r\n                handleAutoChange(\"group_id\", \"group_name\", value)\r\n              }\r\n              variant=\"outlined\"\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Group\" variant=\"outlined\" />\r\n              )}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Address 1\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"address1\"\r\n              value={formData.address1}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"Address 2\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n              name=\"address2\"\r\n              value={formData.address2}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-md-12 mb-5\">\r\n            <Autocomplete\r\n              size=\"small\"\r\n              options={pincodeList}\r\n              getOptionLabel={(option) => option.value}\r\n              fullWidth\r\n              value={\r\n                formData.pin_id != \"\"\r\n                  ? { id: formData.pin_id, value: formData.pin_code }\r\n                  : \"\"\r\n              }\r\n              onChange={(event, value) =>\r\n                handleAutoChange(\"pin_id\", \"pin_code\", value)\r\n              }\r\n              variant=\"outlined\"\r\n              renderInput={(params) => (\r\n                <TextField {...params} label=\"Pincode\" variant=\"outlined\" />\r\n              )}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"City\"\r\n              name=\"city\"\r\n              value={formData.city}\r\n              onChange={handleChange}\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-12 mb-5\">\r\n            <TextField\r\n              label=\"District\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              onChange={handleChange}\r\n              size=\"small\"\r\n              name=\"district\"\r\n              value={formData.district}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Pan No.\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"pan_no\"\r\n            value={formData.pan_no}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"GSTIN No.\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"tin_no\"\r\n            value={formData.tin_no}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Phone No. 1\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"phone1\"\r\n            value={formData.phone1}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Phone No. 2\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"phone2\"\r\n            value={formData.phone2}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Mobile\"\r\n            name=\"mobile\"\r\n            value={formData.mobile}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Fax\"\r\n            name=\"fax\"\r\n            value={formData.fax}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Website\"\r\n            name=\"website\"\r\n            value={formData.website}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={ratingList}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"rating_id\", \"rating_name\", value)\r\n            }\r\n            getOptionLabel={(option) => option.value}\r\n            value={{ id: formData.rating_id, value: formData.rating_name }}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Rating\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"col-md-4\">\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Remarks\"\r\n            fullWidth\r\n            name=\"remarks\"\r\n            value={formData.remarks}\r\n            onChange={handleChange}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Distance\"\r\n            fullWidth\r\n            name=\"distance\"\r\n            value={formData.distance}\r\n            onChange={handleChange}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Credit Period\"\r\n            fullWidth\r\n            name=\"credit_period\"\r\n            value={formData.credit_period}\r\n            onChange={handleChange}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"Credit Limit\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            name=\"credit_limit\"\r\n            value={formData.credit_limit}\r\n            onChange={handleChange}\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={employeeList}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"\", \"mark_engg\", value)\r\n            }\r\n            getOptionLabel={(option) => option.value}\r\n            fullWidth\r\n            value={\r\n              formData.mark_engg != \"\"\r\n                ? getAutoValue(\"value\", employeeList, formData.mark_engg)\r\n                : \"\"\r\n            }\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Marketing Engg.\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={seimenggList || []}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"se_id\", \"siem_engg\", value)\r\n            }\r\n            value={\r\n              formData?.siem_engg != \"\"\r\n                ? { id: formData?.se_id, value: formData?.siem_engg }\r\n                : \"\"\r\n            }\r\n            getOptionLabel={(option) => option.value}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Siemens Engg.\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-12 mb-5\">\r\n          <TextField\r\n            label=\"State\"\r\n            name=\"state\"\r\n            value={formData.state}\r\n            onChange={handleChange}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        {/* <div className=\"col-md-12 mb-5\">\r\n          <Autocomplete\r\n            size=\"small\"\r\n            options={regionList}\r\n            onChange={(event, value) =>\r\n              handleAutoChange(\"region_id\", \"region_name\", value)\r\n            }\r\n            getOptionLabel={(option) => option.value}\r\n            fullWidth\r\n            value={{ id: formData.region_id, value: formData.region_name }}\r\n            variant=\"outlined\"\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Region\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </div>\r\n     */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GeneralInfo;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Accounts_Master\\contact_person.js",["1451","1452","1453","1454","1455"],"import {\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst ContactPerson = ({ formData, handleChange, handleCPersonList }) => {\r\n  const columns = [\r\n    {\r\n      id: \"cperson\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Name\",\r\n    },\r\n    {\r\n      id: \"department_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Department \",\r\n    },\r\n    {\r\n      id: \"designation_name\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Designation\",\r\n    },\r\n    {\r\n      id: \"mobile\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Mobile\",\r\n    },\r\n    {\r\n      id: \"email\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Email\",\r\n    },\r\n    {\r\n      id: \"phone\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Phone\",\r\n    },\r\n    {\r\n      id: \"\",\r\n      numeric: false,\r\n      disablePadding: true,\r\n      label: \"Actions\",\r\n    },\r\n  ];\r\n\r\n  const [dropDownValues, setDropDownValues] = useState({\r\n    departmentList: [],\r\n    designationList: [],\r\n  });\r\n\r\n  const handleRemoveContact = (id) => {\r\n    let personList = formData.cpersonList;\r\n    const itemIndex = personList.findIndex((x) => x.contact_id === id);\r\n    if (itemIndex > -1) {\r\n      personList.splice(itemIndex, 1);\r\n      handleCPersonList(personList);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Dropdown/AccountContactDropdown\"\r\n    ).then((data) => {\r\n      const list = {\r\n        departmentList: data.departmentList,\r\n        designationList: data.designationList,\r\n      };\r\n      setDropDownValues(list);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Company Name\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"company_name\"\r\n          value={formData.company_name}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Contact ID\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"contact_id\"\r\n          value={formData.contact_id}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Contact Name\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"contact_name\"\r\n          value={formData.contact_name}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <Autocomplete\r\n          size=\"small\"\r\n          options={dropDownValues.departmentList}\r\n          getOptionLabel={(option) => option.value}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Department\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <Autocomplete\r\n          size=\"small\"\r\n          options={dropDownValues.designationList}\r\n          getOptionLabel={(option) => option.value}\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Designation\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Mobile\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"mobile\"\r\n          value={formData.mobile}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Email\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"email\"\r\n          value={formData.email}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Phone\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"phone\"\r\n          value={formData.phone}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-4 mb-5\">\r\n        <TextField\r\n          label=\"Extn.\"\r\n          fullWidth\r\n          variant=\"outlined\"\r\n          name=\"contact_name\"\r\n          value={formData.contact_name}\r\n          size=\"small\"\r\n          onChange={handleChange}\r\n        />\r\n      </div>\r\n      <div className=\"col-md-12 mb-3\">\r\n        <SimpleTable\r\n          columns={columns}\r\n          rows={formData.cpersonList}\r\n          onDelete={handleRemoveContact}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactPerson;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\index.js",["1456","1457","1458"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport LedgerIndex from \"./ledger\";\r\nimport FinanceIndex from \"./finance\";\r\nimport CostingTabsIndex from \"./tabs\";\r\n\r\nconst panel = [\r\n  {\r\n    name: \"Ledger\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Finance\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Tabs\",\r\n    component: \"\",\r\n  },\r\n];\r\n\r\nconst ConfigCostingIndex = () => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <LedgerIndex />;\r\n        break;\r\n      case 1:\r\n        return <FinanceIndex />;\r\n        break;\r\n      case 2:\r\n        return <CostingTabsIndex />;\r\n        break;\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {panel.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigCostingIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\index.js",["1459","1460","1461","1462"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport TypeIndex from \"./type\";\r\nimport PriorityIndex from \"./priority\";\r\nimport ReferenceIndex from \"./reference\";\r\nimport EnqStatusIndex from \"./status\";\r\nconst panel = [\r\n  {\r\n    name: \"Type\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Priority\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Reference\",\r\n    component: \"\",\r\n  },\r\n  {\r\n    name: \"Status\",\r\n    component: \"\",\r\n  },\r\n];\r\n\r\nconst ConfigEnquiryIndex = () => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <TypeIndex />;\r\n        break;\r\n      case 1:\r\n        return <PriorityIndex />;\r\n        break;\r\n      case 2:\r\n        return <ReferenceIndex />;\r\n        break;\r\n      case 3:\r\n        return <EnqStatusIndex />;\r\n        break;\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {panel.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigEnquiryIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\index.js",["1463","1464","1465","1466","1467","1468"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\n\r\nimport CategoryIndex from \"./category\";\r\nimport GroupIndex from \"./group\";\r\nimport ItemIndex from \"./item\";\r\nimport UnitIndex from \"./unit\";\r\nimport GGIndex from \"./gg\";\r\nimport { buttonLoader } from \"../../../../components/common\";\r\n\r\n// const panel = [\r\n//   {\r\n//     name: \"Category\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Group\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Item\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Unit\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"GG\",\r\n//     component: \"\",\r\n//   },\r\n// ];\r\n\r\nconst ConfigProductIndex = ({list}) => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <CategoryIndex />;\r\n        break;\r\n      case 1:\r\n        return <GroupIndex />;\r\n        break;\r\n      case 2:\r\n        return <ItemIndex />;\r\n        break;\r\n      case 3:\r\n        return <UnitIndex />;\r\n        break;\r\n      case 4:\r\n        return <GGIndex />;\r\n        break;\r\n\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {list.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.display_name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      \r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigProductIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\general.js",["1469","1470","1471","1472"],"import { Checkbox, MenuItem, TextField, Button } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nconst GeneralInfoEmp = ({\n  formData,\n  handleChange,\n  handleDateChange,\n  handleAutoChange,\n  getAutoValue,\n  listValues,\n  onCheckChange,\n}) => {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            disabled\n            value={formData.user_id}\n            size=\"small\"\n            name=\"user_id\"\n            label=\"Employee ID\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            onChange={handleChange}\n            name={\"attendance_emp_code\"}\n            value={formData.attendance_emp_code}\n            label=\"Attendance Code\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name={\"user_code\"}\n            size=\"small\"\n            onChange={handleChange}\n            value={formData.user_code}\n            label=\"Employee Code\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name={\"card_no\"}\n            onChange={handleChange}\n            value={formData.card_no}\n            size=\"small\"\n            label=\"Card No.\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            onChange={handleChange}\n            name={\"first_name\"}\n            size=\"small\"\n            value={formData.first_name}\n            label=\"First Name\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            onChange={handleChange}\n            name={\"last_name\"}\n            value={formData.last_name}\n            size=\"small\"\n            label=\"Last Name\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            value={formData.f_h_name}\n            name={\"f_h_name\"}\n            size=\"small\"\n            onChange={handleChange}\n            label=\"Father/Husband Name\"\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name=\"mother_name\"\n            value={formData.mother_name}\n            onChange={handleChange}\n            size=\"small\"\n            label=\"Mother name\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            id=\"outlined-select-currency1\"\n            select\n            name=\"m_status\"\n            label=\"Martial Status\"\n            onChange={handleChange}\n            value={formData.m_status}\n            variant=\"outlined\"\n            size=\"small\"\n            fullWidth\n          >\n            <MenuItem value={\"Maried\"}>Married</MenuItem>\n            <MenuItem value={\"Unmaried\"}>Unmarried</MenuItem>\n          </TextField>\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            id=\"outlined-select-currency2\"\n            select\n            label=\"Gender\"\n            variant=\"outlined\"\n            name=\"gender\"\n            size=\"small\"\n            value={formData.gender}\n            onChange={handleChange}\n            fullWidth\n          >\n            <MenuItem value={\"Male\"}>Male</MenuItem>\n            <MenuItem value={\"Female\"}>Female</MenuItem>\n          </TextField>\n        </div>\n        {console.log(moment(formData.dob).format())}\n        {console.log(formData.dob)}\n        <div className=\"col-md-4 mb-3\">\n          <DatePicker\n            autoOk\n            variant=\"inline\"\n            format=\"MM/dd/yyyy\"\n            inputVariant=\"outlined\"\n            label=\"Date of Birth (mm/dd/yyyy)\"\n            value={formData.dob == \"\" ? null : moment(formData.dob).format()}\n            name=\"dob\"\n            onChange={(date) => handleDateChange(\"dob\", date)}\n            size=\"small\"\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            size=\"small\"\n            name=\"pt_add1\"\n            value={formData.pt_add1}\n            onChange={handleChange}\n            label=\"Present Address\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name=\"pt_mobile\"\n            value={formData.pt_mobile}\n            onChange={handleChange}\n            size=\"small\"\n            label=\"Mobile No.\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            name=\"pt_phone\"\n            value={formData.pt_phone}\n            onChange={handleChange}\n            size=\"small\"\n            label=\"Phone No.\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            multiline\n            disabled={formData.pr_check}\n            name=\"pr_add1\"\n            value={formData.pr_add1}\n            onChange={handleChange}\n            size=\"small\"\n            label=\"Permanent Address\"\n          />\n          <p>\n            Same as present address{\" \"}\n            <Checkbox\n              color=\"primary\"\n              checked={formData.pr_check}\n              onChange={(e) => onCheckChange(e)}\n            />{\" \"}\n          </p>\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"pr_phone\"\n            value={formData.pr_phone}\n            onChange={handleChange}\n            label=\"Phone No.\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"pr_mobile\"\n            value={formData.pr_mobile}\n            onChange={handleChange}\n            label=\"Mobile No.\"\n          />\n        </div>\n\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"short_name\"\n            value={formData.short_name}\n            onChange={handleChange}\n            label=\"Short Name\"\n          />\n        </div>\n\n        <div className=\"col-md-4 mb-3\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo1\"\n            options={listValues.empList}\n            getOptionLabel={(option) => option.value}\n            fullWidth\n            onChange={(event, value) =>\n              handleAutoChange(\"department_name\", value)\n            }\n            value={getAutoValue(\n              \"value\",\n              listValues.empList,\n              formData.department_name\n            )}\n            size=\"small\"\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Department\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo2\"\n            options={listValues.desgnList}\n            getOptionLabel={(option) => option.value}\n            onChange={(event, value) =>\n              handleAutoChange(\"designation_name\", value)\n            }\n            value={getAutoValue(\n              \"value\",\n              listValues.desgnList,\n              formData.designation_name\n            )}\n            fullWidth\n            size=\"small\"\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label=\"Designation\" />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <DatePicker\n            autoOk\n            format=\"dd/MM/yyyy\"\n            variant=\"inline\"\n            inputVariant=\"outlined\"\n            label=\"Joining Date\"\n            value={formData.joining_date == \"\" ? null : formData.joining_date}\n            onChange={(date) => handleDateChange(\"joining_date\", date)}\n            size=\"small\"\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <DatePicker\n            autoOk\n            format=\"dd/MM/yyyy\"\n            variant=\"inline\"\n            inputVariant=\"outlined\"\n            label=\"Leaving Date\"\n            value={formData.leaving_date == \"\" ? null : formData.leaving_date}\n            onChange={(date) => handleDateChange(\"leaving_date\", date)}\n            size=\"small\"\n            fullWidth\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"leaving_reason\"\n            onChange={handleChange}\n            value={formData.leaving_reason}\n            label=\"Leaving Reason\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            name=\"dispensary\"\n            onChange={handleChange}\n            value={formData.dispensary}\n            label=\"Dispensary\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            multiline\n            fullWidth\n            size=\"small\"\n            name=\"remarks\"\n            onChange={handleChange}\n            value={formData.remarks}\n            label=\"Remark\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <Autocomplete\n            disablePortal\n            id=\"combo-box-demo2\"\n            options={listValues.depInchrList}\n            fullWidth\n            getOptionLabel={(option) => option.value}\n            size=\"small\"\n            onChange={(event, value) =>\n              handleAutoChange(\"department_incharge\", value)\n            }\n            value={getAutoValue(\n              \"value\",\n              listValues.depInchrList,\n              formData.department_incharge\n            )}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                variant=\"outlined\"\n                label=\"Department Incharge\"\n              />\n            )}\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            multiline\n            fullWidth\n            size=\"small\"\n            name=\"user_name\"\n            onChange={handleChange}\n            value={formData.user_name}\n            label=\"User Name\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            size=\"small\"\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            value={formData.password}\n            label=\"Password\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeneralInfoEmp;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\index.js",["1473","1474","1475","1476","1477","1478","1479","1480"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport GroupIndex from \"./group\";\r\nimport PincodeIndex from \"./pincode\";\r\nimport RegionIndex from \"./region\";\r\nimport RatingIndex from \"./rating\";\r\nimport DepartmentIndex from \"./department\";\r\nimport DesignationIndex from \"./designation\";\r\nimport SiemensIndex from \"./siemens\";\r\nimport SupplyItemIndex from \"./supply-item\";\r\n\r\n// const panel = [\r\n//   {\r\n//     name: \"Group\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Pin Code\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Region\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Rating\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Department\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Designation\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Siemens\",\r\n//     component: \"\",\r\n//   },\r\n//   {\r\n//     name: \"Supply Items\",\r\n//     component: \"\",\r\n//   },\r\n// ];\r\n\r\nconst ConfigAccountIndex = ({list}) => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  const getSelectedComponent = () => {\r\n    switch (selectedIndex) {\r\n      case 0:\r\n        return <GroupIndex />;\r\n        break;\r\n      case 1:\r\n        return <PincodeIndex />;\r\n        break;\r\n      case 2:\r\n        return <RegionIndex />;\r\n        break;\r\n      case 3:\r\n        return <RatingIndex />;\r\n        break;\r\n      case 4:\r\n        return <DepartmentIndex />;\r\n        break;\r\n      case 5:\r\n        return <DesignationIndex />;\r\n        break;\r\n      case 6:\r\n        return <SiemensIndex />;\r\n        break;\r\n      case 7:\r\n        return <SupplyItemIndex />;\r\n        break;\r\n      default:\r\n        alert(\"Something went wrong\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"px-3\">\r\n      <AppBar className=\"rounded light-tab\" position=\"relative\" elevation={0}>\r\n        <Tabs\r\n          className=\"w-100\"\r\n          value={selectedIndex}\r\n          onChange={handleIndex}\r\n          indicatorColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {list.map((tab, index) => {\r\n            return <Tab value={index} key={\"tab\" + index} label={tab.display_name} />;\r\n          })}\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"customtab-container w-100\">{getSelectedComponent()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfigAccountIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\employee\\other.js",["1481","1482","1483","1484","1485"],"import { Checkbox, MenuItem, TextField, Button } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport React from \"react\";\n\nconst OtherDetails = ({ formData, handleChange }) => {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.first_name}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"first_name\"\n            label=\"First Name\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.last_name}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"last_name\"\n            label=\"Last Name\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.email}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"email\"\n            label=\"Email\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.pf_code}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"pf_code\"\n            label=\"P.F.Code\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.esi_code}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"esi_code\"\n            label=\"ESI Code\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.pan_no}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"pan_no\"\n            label=\"PAN No.\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.salary_p_mode}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"salary_p_mode\"\n            label=\"Salary Payment Mode\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.ctc_per_day}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"ctc_per_day\"\n            label=\"CTC Per Day\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.account_no}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"account_no\"\n            label=\"Account No.\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.bank_name}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"bank_name\"\n            label=\"Bank Name\"\n          />\n        </div>\n        <div className=\"col-md-4 mb-3\">\n          <TextField\n            variant=\"outlined\"\n            fullWidth\n            value={formData.nominee}\n            onChange={handleChange}\n            size=\"small\"\n            name=\"nominee\"\n            label=\"Nominee\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OtherDetails;\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\index.js",["1486","1487","1488","1489"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedLedgerId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseLedger from \"./browse\";\r\nimport AddOrEditLedger from \"./form\";\r\n\r\nconst LedgerIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedLedgerId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedLedgerId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Ledger\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseLedger onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditLedger onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LedgerIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\index.js",["1490","1491","1492","1493"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedFinanceId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseFinance from \"./browse\";\r\nimport AddOrEditFinance from \"./form\";\r\n\r\nconst FinanceIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedFinanceId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedFinanceId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Finance\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseFinance onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditFinance onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FinanceIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\index.js",["1494","1495","1496","1497"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedCostingTabsId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseCostingTabs from \"./browse\";\r\nimport AddOrEditCostingTabs from \"./form\";\r\n\r\nconst CostingTabsIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedCostingTabsId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedCostingTabsId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Tabs\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseCostingTabs onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditCostingTabs onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CostingTabsIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\index.js",["1498","1499","1500","1501"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedTypeId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseType from \"./browse\";\r\nimport AddOrEditType from \"./form\";\r\n\r\nconst TypeIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedTypeId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedTypeId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Type\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseType onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditType onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypeIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\index.js",["1502","1503","1504","1505"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedCategoryId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseCategory from \"./browse\";\r\nimport AddOrEditCategory from \"./form\";\r\n\r\nconst CategoryIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedCategoryId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedCategoryId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Category\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseCategory onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditCategory onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CategoryIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\index.js",["1506","1507","1508","1509"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedReferenceId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseReference from \"./browse\";\r\nimport AddOrEditReference from \"./form\";\r\n\r\nconst ReferenceIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedReferenceId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedReferenceId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Reference\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseReference onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditReference onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReferenceIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\index.js",["1510","1511","1512","1513"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedPriorityId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowsePriority from \"./browse\";\r\nimport AddOrEditPriority from \"./form\";\r\n\r\nconst PriorityIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedPriorityId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedPriorityId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Priority\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowsePriority onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditPriority onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PriorityIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\index.js",["1514","1515","1516","1517"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedEnqStatusId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseEnqStatus from \"./browse\";\r\nimport AddOrEditEnqStatus from \"./form\";\r\n\r\nconst EnqStatusIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedEnqStatusId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedEnqStatusId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Status\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseEnqStatus onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditEnqStatus onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EnqStatusIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\index.js",["1518","1519","1520","1521"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedItemId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseItem from \"./browse\";\r\nimport AddOrEditItem from \"./form\";\r\n\r\nconst ItemIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedItemId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedItemId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Item\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseItem onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditItem onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ItemIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\index.js",["1522","1523","1524","1525"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedGroupId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseGroup from \"./browse\";\r\nimport AddOrEditGroup from \"./form\";\r\n\r\nconst GroupIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedGroupId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedGroupId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Group\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseGroup onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditGroup onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\index.js",["1526","1527","1528","1529"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedUnitId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseUnit from \"./browse\";\r\nimport AddOrEditUnit from \"./form\";\r\n\r\nconst UnitIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedUnitId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedUnitId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Unit\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseUnit onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditUnit onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UnitIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\index.js",["1530","1531","1532","1533"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedGGId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseGG from \"./browse\";\r\nimport AddOrEditGG from \"./form\";\r\n\r\nconst GGIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedGGId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedGGId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New GG\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseGG onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditGG onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GGIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\index.js",["1534","1535"],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\index.js",["1536","1537","1538"],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\index.js",["1539","1540","1541","1542"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedRatingId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseRating from \"./browse\";\r\nimport AddOrEditRating from \"./form\";\r\n\r\nconst RatingIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedRatingId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedRatingId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Rating\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseRating onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditRating onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RatingIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\index.js",["1543","1544","1545","1546"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedRegionId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseConfigRegion from \"./browse\";\r\nimport AddOrEditRegion from \"./form\";\r\n\r\nconst RegionIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedRegionId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedRegionId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Region\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseConfigRegion onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditRegion onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegionIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\index.js",["1547","1548","1549","1550"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedDesignationId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseDesignation from \"./browse\";\r\nimport AddOrEditDesignation from \"./form\";\r\n\r\nconst DesignationIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedDesignationId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedDesignationId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Designation\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseDesignation onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditDesignation onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DesignationIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\index.js",["1551","1552","1553","1554"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedSiemensId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseSiemens from \"./browse\";\r\nimport AddOrEditSiemens from \"./form\";\r\n\r\nconst SiemensIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedSiemensId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedSiemensId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Siemens\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseSiemens onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditSiemens onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SiemensIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\index.js",["1555","1556","1557","1558"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedDepartmentId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseDepartment from \"./browse\";\r\nimport AddOrEditDepartment from \"./form\";\r\n\r\nconst DepartmentIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedDepartmentId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedDepartmentId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Department\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseDepartment onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditDepartment onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DepartmentIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\index.js",["1559","1560","1561","1562"],"import { Tab, Tabs } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { clearSelectedSupplyItemId } from \"../../../../../_redux/actions/masters/all.action\";\r\nimport BrowseSupplyItem from \"./browse\";\r\nimport AddOrEditSupplyItem from \"./form\";\r\n\r\nconst SupplyItemIndex = () => {\r\n  const dispatch = useDispatch();\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (event, newValue) => {\r\n    setSeletedIndex(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedSupplyItemId());\r\n              handleIndex({}, 0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              dispatch(clearSelectedSupplyItemId());\r\n              handleIndex({}, 1);\r\n            }}\r\n          >\r\n            New Supply Item\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          <BrowseSupplyItem onEdit={() => handleIndex({}, 1)} />\r\n        ) : (\r\n          <AddOrEditSupplyItem onClose={() => handleIndex({}, 0)} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SupplyItemIndex;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\form.js",["1563","1564","1565","1566","1567","1568","1569","1570"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedLedgerId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditLedger = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.ledgerId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    ledger_id: \"0\",\r\n    ledger_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationCostingLedgerPreview\",\r\n        {\r\n          ledger_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.ledger_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            ledger_id: data.ledger_id,\r\n            ledger_name: data.ledger_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationCostingLedgerInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Ledger Name*\"\r\n              value={insertParams.ledger_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  ledger_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Ledger Name\",\r\n                insertParams.ledger_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditLedger;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\ledger\\browse.js",["1571","1572","1573"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedLedgerId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseLedger = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ledgerList, setLedgerList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationCostingLedgerBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setLedgerList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedLedgerId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationCostingLedgerDelete\",\r\n      {\r\n        ledger_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"ledger_name\",\r\n              headerName: \"Ledger Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.ledger_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.ledger_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={ledgerList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseLedger;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\form.js",["1574","1575","1576","1577","1578","1579","1580","1581"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedCostingTabsId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditCostingTabs = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.costingTabsId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    tab_id: \"0\",\r\n    mtab_id: \"\",\r\n    mtab_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationCostingTabsPreview\",\r\n        {\r\n          mtab_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.mtab_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            tab_id: data.tab_id,\r\n            mtab_id: data.mtab_id,\r\n            mtab_name: data.mtab_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationCostingTabsInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Tabs Name*\"\r\n              value={insertParams.mtab_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  mtab_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Tabs Name\",\r\n                insertParams.mtab_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditCostingTabs;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\tabs\\browse.js",["1582","1583","1584"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedCostingTabsId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseCostingTabs = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [costingTabsList, setCostingTabsList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationCostingTabsBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setCostingTabsList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedCostingTabsId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationCostingTabsDelete\",\r\n      {\r\n        mtab_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"mtab_name\",\r\n              headerName: \"Tab Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.mtab_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.mtab_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={costingTabsList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseCostingTabs;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\browse.js",["1585","1586","1587"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedFinanceId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseFinance = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [financeList, setFinanceList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationCostingFinanceBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setFinanceList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedFinanceId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationCostingFinanceDelete\",\r\n      {\r\n        finance_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"finance_name\",\r\n              headerName: \"Finance Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.finance_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.finance_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={financeList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseFinance;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\costing\\finance\\form.js",["1588","1589","1590","1591","1592","1593","1594","1595"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedFinanceId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditFinance = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.financeId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    finance_id: \"0\",\r\n    finance_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationCostingFinancePreview\",\r\n        {\r\n          finance_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.finance_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            finance_id: data.finance_id,\r\n            finance_name: data.finance_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationCostingFinanceInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Finance Name*\"\r\n              value={insertParams.finance_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  finance_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Finance Name\",\r\n                insertParams.finance_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditFinance;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\form.js",["1596","1597","1598","1599","1600","1601","1602","1603"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedTypeId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditType = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.typeId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    enq_type_id: \"0\",\r\n    enq_type: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqTypePreview\",\r\n        {\r\n          enq_type_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.enq_type_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            enq_type_id: data.enq_type_id,\r\n            enq_type: data.enq_type,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqTypeInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Type Name*\"\r\n              value={insertParams.enq_type}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  enq_type: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Type Name\",\r\n                insertParams.enq_type,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditType;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\type\\browse.js",["1604","1605","1606"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedTypeId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseType = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [typeList, setTypeList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationSalesEnqTypeBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setTypeList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedTypeId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationSalesEnqTypeDelete\",\r\n      {\r\n        enq_type_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"enq_type\",\r\n              headerName: \"Type Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.enq_type_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.enq_type_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={typeList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseType;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\browse.js",["1607","1608","1609"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedSupplyItemId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseSupplyItem = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [itemList, setItemList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationItemBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setItemList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedSupplyItemId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationItemDelete\",\r\n      {\r\n        item_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"item_name\",\r\n              headerName: \"Item Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.item_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.item_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={itemList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseSupplyItem;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\supply-item\\form.js",["1610","1611","1612","1613","1614","1615","1616","1617"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedSupplyItemId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditSupplyItem = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.supplyItemId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    item_id: \"0\",\r\n    item_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationItemPreview\",\r\n        {\r\n          item_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.item_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            item_id: data.item_id,\r\n            item_name: data.item_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationItemInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Item Name*\"\r\n              value={insertParams.item_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  item_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Item Name\",\r\n                insertParams.item_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditSupplyItem;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\form.js",["1618","1619","1620","1621","1622","1623","1624","1625"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedDepartmentId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditDepartment = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.departmentId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    department_id: \"0\",\r\n    department_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationDepartmentPreview\",\r\n        {\r\n          department_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.department_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            department_id: data.department_id,\r\n            department_name: data.department_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationDepartmentInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Department Name*\"\r\n              value={insertParams.department_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  department_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Department Name\",\r\n                insertParams.department_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditDepartment;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\department\\browse.js",["1626","1627","1628"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedDepartmentId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseDepartment = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [departmentList, setDepartmentList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationDepartmentBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setDepartmentList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    console.log(\"id : \" + id);\r\n    dispatch(selectedDepartmentId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationDepartmentDelete\",\r\n      {\r\n        department_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"department_name\",\r\n              headerName: \"Department Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.department_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.department_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={departmentList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseDepartment;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\browse.js",["1629","1630","1631"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedSiemensId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseSiemens = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [siemensList, setSiemensList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationSiemensBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setSiemensList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedSiemensId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationSiemensDelete\",\r\n      {\r\n        se_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"engg_name\",\r\n              headerName: \"Engg Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"roll_no\",\r\n              headerName: \"Roll No\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.se_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.se_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={siemensList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseSiemens;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\siemens\\form.js",["1632","1633","1634","1635","1636","1637","1638","1639"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedSiemensId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditSiemens = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.siemensId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    se_id: \"0\",\r\n    engg_name: \"\",\r\n    roll_no: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSiemensPreview\",\r\n        {\r\n          se_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.se_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            se_id: data.se_id,\r\n            engg_name: data.engg_name,\r\n            roll_no: data.roll_no,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSiemensInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Roll No.\"\r\n              value={insertParams.roll_no}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  roll_no: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\"Roll No.\", insertParams.roll_no, \"required\")}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Engg Name*\"\r\n              value={insertParams.engg_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  engg_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Engg Name\",\r\n                insertParams.engg_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditSiemens;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\form.js",["1640","1641","1642","1643","1644","1645","1646","1647"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedDesignationId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditDesignation = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.designationId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    designation_id: \"0\",\r\n    designation_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationDesignationPreview\",\r\n        {\r\n          designation_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.designation_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            designation_id: data.designation_id,\r\n            designation_name: data.designation_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationDesignationtInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Designation Name*\"\r\n              value={insertParams.designation_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  designation_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Region Name\",\r\n                insertParams.designation_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditDesignation;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\form.js",["1648","1649","1650","1651","1652","1653","1654","1655"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedRegionId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditRegion = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.regionId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    region_id: \"0\",\r\n    region_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationRegionPreview\",\r\n        {\r\n          region_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.region_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            region_id: data.region_id,\r\n            region_name: data.region_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationRegionInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Region Name*\"\r\n              value={insertParams.region_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  region_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Region Name\",\r\n                insertParams.region_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditRegion;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\designation\\browse.js",["1656","1657","1658"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedDesignationId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseDesignation = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [designationList, setDesignationList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationDesignationBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setDesignationList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    console.log(\"id : \" + id);\r\n    dispatch(selectedDesignationId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationDesignationDelete\",\r\n      {\r\n        designation_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"designation_name\",\r\n              headerName: \"Designation Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.designation_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.designation_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={designationList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseDesignation;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\form.js",["1659","1660","1661","1662","1663","1664","1665","1666"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedRatingId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditRating = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.ratingId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    rating_id: \"0\",\r\n    rating_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationRatingPreview\",\r\n        {\r\n          rating_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.rating_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            rating_id: data.rating_id,\r\n            rating_name: data.rating_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationRatingInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Rating Name*\"\r\n              value={insertParams.rating_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  rating_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Rating Name\",\r\n                insertParams.rating_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditRating;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\region\\browse.js",["1667","1668","1669"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedRegionId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseConfigRegion = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [regionList, setRegionList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationRegionBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setRegionList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    console.log(\"id : \" + id);\r\n    dispatch(selectedRegionId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationRegionDelete\",\r\n      {\r\n        region_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"region_name\",\r\n              headerName: \"Region Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.region_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.region_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={regionList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseConfigRegion;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\form.js",["1670","1671","1672","1673","1674"],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\rating\\browse.js",["1675","1676","1677"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedRatingId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseRating = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ratingList, setRatingList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationRatingBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setRatingList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    console.log(\"id : \" + id);\r\n    dispatch(selectedRatingId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationRatingDelete\",\r\n      {\r\n        rating_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"rating_name\",\r\n              headerName: \"Rating Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.rating_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.rating_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={ratingList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseRating;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\group\\browse.js",["1678","1679","1680","1681","1682","1683","1684","1685","1686","1687","1688","1689"],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\form.js",["1690","1691","1692","1693","1694"],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\form.js",["1695","1696","1697","1698","1699","1700","1701","1702"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Select, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedGGId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditGG = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.ggId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    gg_id: \"0\",\r\n    gg_name: \"\",\r\n    qty_value: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductGGPreview\",\r\n        {\r\n          gg_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.gg_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            gg_id: data.gg_id,\r\n            gg_name: data.gg_name,\r\n            qty_value: data.qty_value,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductGGInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"GG Name*\"\r\n              value={insertParams.gg_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  gg_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\"GG Name\", insertParams.gg_name, \"required\")}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <Select\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Qty/Value*\"\r\n              value={insertParams.qty_value}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  qty_value: event.target.value,\r\n                });\r\n              }}\r\n            >\r\n              <option value=\"\"></option>\r\n              <option value=\"Qty\">Qty</option>\r\n              <option value=\"Value\">Value</option>\r\n            </Select>\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Qty/Value\",\r\n                insertParams.qty_value,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditGG;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\Account\\pincode\\browse.js",["1703","1704","1705","1706","1707","1708","1709","1710","1711","1712","1713","1714"],"F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\gg\\browse.js",["1715","1716","1717"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedGGId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseGG = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [ggList, setGgList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationProductGGBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setGgList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedGGId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationProductGGDelete\",\r\n      {\r\n        gg_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"gg_name\",\r\n              headerName: \"GG Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"qty_value\",\r\n              headerName: \"Qty/Value\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.gg_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.gg_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={ggList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseGG;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\form.js",["1718","1719","1720","1721","1722","1723","1724","1725"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedUnitId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditUnit = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.unitId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    uom_id: \"0\",\r\n    uom: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductUnitPreview\",\r\n        {\r\n          uom_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.uom_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            uom_id: data.uom_id,\r\n            uom: data.uom,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductUnitInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Unit Name*\"\r\n              value={insertParams.uom}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  uom: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\"Unit Name\", insertParams.uom, \"required\")}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditUnit;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\unit\\browse.js",["1726","1727","1728"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedUnitId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseUnit = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [unitList, setUnitList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationProductUnitBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setUnitList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedUnitId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationProductUnitDelete\",\r\n      {\r\n        uom_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"uom\",\r\n              headerName: \"Unit Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.uom_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.uom_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={unitList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseUnit;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\form.js",["1729","1730","1731","1732","1733","1734","1735","1736"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedGroupId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditGroup = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.groupId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    p_group_id: \"0\",\r\n    p_group_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductGroupPreview\",\r\n        {\r\n          p_group_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.p_group_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            p_group_id: data.p_group_id,\r\n            p_group_name: data.p_group_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductGroupInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Group Name*\"\r\n              value={insertParams.p_group_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  p_group_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Group Name\",\r\n                insertParams.p_group_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditGroup;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\group\\browse.js",["1737","1738","1739"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedGroupId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseGroup = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [groupList, setGroupList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationProductGroupBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setGroupList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedGroupId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationProductGroupDelete\",\r\n      {\r\n        p_group_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"group_name\",\r\n              headerName: \"Group Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.group_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.group_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={groupList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseGroup;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\form.js",["1740","1741","1742","1743","1744","1745","1746","1747"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedItemId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditItem = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.itemId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    item_id: \"0\",\r\n    item_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductItemPreview\",\r\n        {\r\n          item_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.item_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            item_id: data.item_id,\r\n            item_name: data.item_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductItemInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Item Name*\"\r\n              value={insertParams.item_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  item_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Item Name\",\r\n                insertParams.item_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditItem;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\form.js",["1748","1749","1750","1751","1752","1753","1754","1755"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedEnqStatusId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditEnqStatus = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.enqStatusId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    status_id: \"0\",\r\n    status_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqStatusPreview\",\r\n        {\r\n          status_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.status_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            status_id: data.status_id,\r\n            status_name: data.status_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqStatusInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Status Name*\"\r\n              value={insertParams.status_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  status_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Status Name\",\r\n                insertParams.status_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditEnqStatus;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\item\\browse.js",["1756","1757","1758"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedItemId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseItem = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [itemList, setItemList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationProductItemBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setItemList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedItemId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationProductItemDelete\",\r\n      {\r\n        item_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"item_name\",\r\n              headerName: \"Item Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.item_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.item_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={itemList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseItem;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\status\\browse.js",["1759","1760","1761"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedEnqStatusId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseEnqStatus = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [enqStatusList, setEnqStatusList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationSalesEnqStatusBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setEnqStatusList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedEnqStatusId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationSalesEnqStatusDelete\",\r\n      {\r\n        status_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"status_name\",\r\n              headerName: \"Status Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.status_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.status_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={enqStatusList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseEnqStatus;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\form.js",["1762","1763","1764","1765","1766","1767","1768","1769"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedPriorityId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditPriority = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.priorityId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    enq_priority_id: \"0\",\r\n    enq_priority: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqPriorityPreview\",\r\n        {\r\n          enq_priority_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.enq_priority_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            enq_priority_id: data.enq_priority_id,\r\n            enq_priority: data.enq_priority,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqPriorityInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Priority Name*\"\r\n              value={insertParams.enq_priority}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  enq_priority: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Priority Name\",\r\n                insertParams.enq_priority,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditPriority;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\priority\\browse.js",["1770","1771","1772"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedPriorityId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowsePriority = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [enq_priorityList, setEnqPriorityList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationSalesEnqPriorityBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setEnqPriorityList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedPriorityId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationSalesEnqPriorityDelete\",\r\n      {\r\n        enq_priority_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"enq_priority\",\r\n              headerName: \"Priority Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.enq_priority_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.enq_priority_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={enq_priorityList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowsePriority;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\form.js",["1773","1774","1775","1776","1777","1778","1779","1780"],"import React, { useEffect, useState } from \"react\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedReferenceId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditReference = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.referenceId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    enq_ref_id: \"0\",\r\n    enq_ref: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqRefPreview\",\r\n        {\r\n          enq_ref_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.enq_ref_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            enq_ref_id: data.enq_ref_id,\r\n            enq_ref: data.enq_ref,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationSalesEnqRefInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Reference Name*\"\r\n              value={insertParams.enq_ref}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  enq_ref: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Reference Name\",\r\n                insertParams.enq_ref,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditReference;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\enquiry\\reference\\browse.js",["1781","1782","1783"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedReferenceId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseReference = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [enq_ref_List, setEnqRefList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationSalesEnqRefBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setEnqRefList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    dispatch(selectedReferenceId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationSalesEnqRefDelete\",\r\n      {\r\n        enq_ref_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"enq_ref\",\r\n              headerName: \"Reference Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.enq_ref_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.enq_ref_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={enq_ref_List}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseReference;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\browse.js",["1784","1785","1786"],"import { DataGrid } from \"@material-ui/data-grid\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\n\r\nimport CustomPagination from \"../../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../../components/customRowComponent\";\r\n\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport ActionButtons from \"../../../../../components/action-buttons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { selectedCategoryId } from \"../../../../../_redux/actions/masters/all.action\";\r\nconst user_id = {\r\n  user_id: localStorage.getItem(\"userId\"),\r\n};\r\n\r\nconst BrowseCategory = ({ onEdit }) => {\r\n  const dispatch = useDispatch();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [categoryList, setCategoryList] = useState([]);\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const handleParams = (event) => {\r\n    setTimeout(() => {\r\n      setParams({ ...params, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setIsLoading(true);\r\n    await CommonController.commonApiCall(\r\n      \"Configuration/ConfigurationProductCgyBrowse\",\r\n      params,\r\n      user_id\r\n    )\r\n      .then((data) => {\r\n        setCategoryList(data.data);\r\n        setTotalRecords(data.recordsFiltered);\r\n      })\r\n      .catch((err) => {\r\n        showErrorToast(err);\r\n      });\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param.pageSize });\r\n  };\r\n  const handlePageChange = (param) => {\r\n    setParams({ ...params, pageNo: param.page });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params]);\r\n\r\n  const handleEdit = (id) => {\r\n    console.log(\"id : \" + id);\r\n    dispatch(selectedCategoryId(id));\r\n    onEdit();\r\n  };\r\n\r\n  const handleDeleteRow = (id) => {\r\n    CommonController.commonApiCallFilter(\r\n      \"Configuration/ConfigurationProductCgyDelete\",\r\n      {\r\n        p_category_id: id,\r\n      }\r\n    ).then((data) => {\r\n      if (data.valid) {\r\n        showSuccessToast(\"Record Deleted Successfully\");\r\n        getBrowseListData();\r\n      } else {\r\n        showErrorToast(\"Something went wrong\");\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {isLoading && <Loader />}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"id\",\r\n              headerName: \"Sr. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"category\",\r\n              headerName: \"Category Name\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"description\",\r\n              headerName: \"Description\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"datetime\",\r\n              headerName: \"Date\",\r\n              flex: 0.1,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Actions\",\r\n              renderCell: (params) => (\r\n                <ActionButtons\r\n                  onEdit={() => handleEdit(params.row.p_category_id)}\r\n                  onDelete={() => handleDeleteRow(params.row.p_category_id)}\r\n                />\r\n              ),\r\n              flex: 0.1,\r\n            },\r\n          ]}\r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          // page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={isLoading}\r\n          rowHeight={30}\r\n          components={{\r\n            Pagination: CustomPagination,\r\n            NoRowsOverlay: CustomNoRowsOverlay,\r\n          }}\r\n          onSortModelChange={(sort) => {\r\n            if (sort.sortModel.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort.sortModel[0].field,\r\n                sort_order: sort.sortModel[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={categoryList}\r\n        />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default BrowseCategory;\r\n","F:\\React code\\diagnostic\\src\\pages\\Master\\Configuration\\product\\category\\form.js",["1787","1788","1789","1790","1791","1792","1793","1794","1795","1796"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\n\r\nimport {\r\n  buttonLoader,\r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../../components/common\";\r\nimport { CommonController } from \"../../../../../_redux/controller/common.controller\";\r\nimport { SimpleTable } from \"../../../../../components/basic-table\";\r\nimport useForceUpdate from \"use-force-update\";\r\nimport moment from \"moment\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Loader } from \"../../../../../components/loader\";\r\nimport { selectedCategoryId } from \"../../../../../_redux/actions/masters/all.action\";\r\n\r\nconst AddOrEditCategory = ({ onClose }) => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const selectedIdResponse = useSelector(\r\n    (state) => state.AllReducersMaster.categoryId\r\n  );\r\n\r\n  const [validator, setValidator] = useState(new SimpleReactValidator());\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const [insertParams, setInsertParams] = useState({\r\n    p_category_id: \"0\",\r\n    p_category_name: \"\",\r\n    description: \"\",\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    user_name: localStorage.getItem(\"userName\"),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (selectedIdResponse) {\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductCgyPreview\",\r\n        {\r\n          p_category_id: selectedIdResponse,\r\n        }\r\n      ).then((data) => {\r\n        if (data.p_category_id) {\r\n          setInsertParams({\r\n            ...insertParams,\r\n            p_category_id: data.p_category_id,\r\n            p_category_name: data.p_category_name,\r\n            description: data.description,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    }\r\n  }, [selectedIdResponse]);\r\n\r\n  const insertCombo = async () => {\r\n    if (validator.allValid()) {\r\n      setLoading(true);\r\n      CommonController.commonApiCallFilter(\r\n        \"Configuration/ConfigurationProductCgyInsert\",\r\n        insertParams\r\n      ).then((data) => {\r\n        if (data.valid) {\r\n          showSuccessToast(\"Successfully Saved\");\r\n          setLoading(false);\r\n          onClose();\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } else {\r\n      validator.showMessages();\r\n      // rerender to show messages for the first time\r\n      // you can use the autoForceUpdate option to do this automatically`\r\n      forceUpdate();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container-fluid mt-5 pt-5\">\r\n        {/* {loading && <Loader />} */}\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              label=\"Category Name*\"\r\n              value={insertParams.p_category_name}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  p_category_name: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <p className=\"text-danger\">\r\n              {validator.message(\r\n                \"Category Name\",\r\n                insertParams.p_category_name,\r\n                \"required\"\r\n              )}\r\n            </p>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <TextField\r\n              variant=\"outlined\"\r\n              fullWidth\r\n              size=\"small\"\r\n              multiline\r\n              label=\"Description\"\r\n              value={insertParams.description}\r\n              onChange={(event) => {\r\n                setInsertParams({\r\n                  ...insertParams,\r\n                  description: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-100 text-right mt-4\">\r\n          <Button\r\n            onClick={() => onClose()}\r\n            variant=\"contained\"\r\n            className=\"mr-2\"\r\n            color=\"primary\"\r\n            disableElevation\r\n          >\r\n            Cancel\r\n          </Button>\r\n          {buttonLoader(loading, \"Save\", insertCombo, \"primary\")}\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default AddOrEditCategory;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\index.js",["1797","1798","1799"],"import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DeliveryChallanMdcBrowse from \"./browse\";\r\nimport AddDeliveryChallanMdc from \"./mdc-add\";\r\n\r\nconst ChallanIndexMdc = ({ type }) => {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(1);\r\n            }}\r\n          >\r\n            Manufacturing DC\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? (\r\n          \r\n            <DeliveryChallanMdcBrowse/>\r\n        \r\n        ) : (\r\n        \r\n        <AddDeliveryChallanMdc/>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChallanIndexMdc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\browse.js",["1800","1801","1802","1803","1804","1805","1806","1807","1808","1809"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst DeliveryChallanMdcBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  console.log(browseListData)\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/mdc/browsemdc\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          console.log(data)\r\n          setTotalRecords(data.totalrecord);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"widget-container\">\r\n        <div className=\"widget-box first\">\r\n          <span>Amount</span>\r\n          <p>{currenyMasking(amountFigures.amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box second\">\r\n          <span>MDC Amount</span>\r\n          <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box third\">\r\n          <span>Actual Amount</span>\r\n          <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n        </div>\r\n      </div> */}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"dc_no\",\r\n              headerName: \"D.C No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"so_no\",\r\n              headerName: \"So No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n           \r\n            {\r\n              field: \"party_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"carrier\",\r\n              headerName: \"Carrier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"vehicle\",\r\n              headerName: \"Vehicle No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"value\",\r\n              headerName: \"Value\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"approved\",\r\n              headerName: \"Approved\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"status\",\r\n              headerName: \"Status\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"comments\",\r\n              headerName: \"Comments\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default DeliveryChallanMdcBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\mdc\\mdc-add.js",["1810","1811","1812","1813","1814","1815","1816"],"import {\r\n  Button,\r\n  formatMs,\r\n  MenuItem,\r\n  TextField,\r\n  Fab,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete,} from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n  debounce,\r\n  \r\n  showErrorToast,\r\n  showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst AddDeliveryChallanMdc = ({ challanType }) => {\r\n  const [tableList, settableList] = useState([]);\r\n  const [formData, setFormData] = useState({\r\n    date: \"\",\r\n    dc_no: \"\",\r\n    po_no: \"\",\r\n    po_date: \"\",\r\n    courier: \"\",\r\n    vehicle_no: \"\",\r\n    contact_person: \"\",\r\n    cperson_id: \"\",\r\n    remarks: \"\",\r\n    no_of_box: \"\",\r\n    value: \"\",\r\n    box_no: \"\",\r\n    description: \"\",\r\n    qty: \"\",\r\n   \r\n  });\r\nconst [contactlist, setcontactlist] = useState(null)\r\nconst [saleslist, setsaleslist] = useState(null)\r\n  const [showDIList, setShowDIList] = useState(false);\r\n  const [accountList, setaccountList] = useState([]);\r\n  const [salesOrderList, setsalesOrderList] = useState([])\r\n  const toggleDIList = () => setShowDIList(!showDIList);\r\n  const submitAddBox = () => {\r\n          if (formData.box_no===\"\") {\r\n          showErrorToast(\"Please Enter Box No\");\r\n        }else if (formData.description===\"\") {\r\n          showErrorToast(\"Please Enter description\");\r\n        }else if (formData.qty===\"\") {\r\n          showErrorToast(\"Please Enter Quality\");\r\n         } else{\r\n          settableList([\r\n            ...tableList,\r\n            {\r\n              box_no: formData.box_no,\r\n              description: formData.description,\r\n              qty: formData.qty,\r\n            },\r\n          ]);\r\n          setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n         }\r\n  };\r\n \r\n  const handleChange = (event) => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value });\r\n  };\r\n  const handleDateChange = (name, date) => {\r\n    setFormData({ ...formData, [name]: date });\r\n  };\r\n\r\n  const handleDeleteTable = (e) => {\r\n    tableList.splice(tableList.indexOf(e), 1);\r\n    settableList([...tableList]);\r\n  };\r\n\r\n  const diListColumn = [\r\n    {\r\n      id: \"box_no\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Box No\",\r\n    },\r\n    {\r\n      id: \"description\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Description\",\r\n    },\r\n    {\r\n      id: \"qty\",\r\n      numeric: false,\r\n      disablePadding: false,\r\n      label: \"Qty\",\r\n    },\r\n  ];\r\n\r\n  const getDCNo = async () => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistics/dc/generateDc\",\r\n        {},\r\n        \"get\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setFormData({ ...formData, dc_no: data.data.dc_no });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  //Party name\r\n  const getCompanyList = async (search) => {\r\n    // setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistic/mdc/accountlist\",\r\n        { search:search},\r\n        \"get\",\r\n        \"node\"\r\n      ).then((data) => {\r\n  console.log(data)\r\n        if (data.status === 200) {\r\n          setaccountList(data.result);\r\n          console.log(accountList)\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const getSalesOrder = async (search) => {\r\n    try {\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistic/mdc/picksomdc?search=\" + search,\r\n        \"\",\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setsalesOrderList(data.result)\r\n        }\r\n      }).catch(err=>{\r\n        showErrorToast(err.message)\r\n      })\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  //contact list\r\n  const getAccountContactList = async () => {\r\n\r\n    try {\r\n     \r\n      let search=contactlist.company_id;\r\n      await CommonController.commonApiCallFilter(\r\n        \"logistic/mdc/accountcontactlist\",\r\n        { search:search},\r\n        \"post\",\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setFormData({\r\n            ...formData,\r\n            cperson_id: data.result.cperson_id,\r\n            contact_person: data.result.cperson_name,\r\n          });\r\n        }else{\r\n         showErrorToast(data.message)\r\n        }\r\n      }).catch(err=>{\r\n        showErrorToast(err)\r\n      })\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  const submitMdc = async () => {\r\n    try {\r\n      if (formData.po_no === \"\") {\r\n        showErrorToast(\"Please Enter Po No\");\r\n      }else if (formData.po_date === \"\") {\r\n        showErrorToast(\"Please Enter Po Date\");\r\n      }  else if (tableList.length < 0) {\r\n        showErrorToast(\"Please add box\");\r\n      } else if (formData.remarks === \"\") {\r\n        showErrorToast(\"Please enter remarks\");\r\n      } else if (contactlist.company_name === \"\") {\r\n        showErrorToast(\"Please Select Party Name\");\r\n      } else if (formData.courier === \"\") {\r\n        showErrorToast(\"Please Enter Courier\");\r\n      } else if (formData.vehicle_no === \"\") {\r\n        showErrorToast(\"Please Enter Vehicle NO\");\r\n      } else if (formData.contact_person === \"\") {\r\n        showErrorToast(\"Please Enter Contact Person\");\r\n      } else if (formData.no_of_box === \"\") {\r\n        showErrorToast(\"Please Enter No Of Box\");\r\n      \r\n      } else if (formData.value === \"\") {\r\n        showErrorToast(\"Please Enter Value\");\r\n      \r\n      } else {\r\n        const body = {\r\n          tran_id: \"0\",\r\n          date:moment().format(\"MM/DD/YYYY\"),\r\n          dc_no: formData.dc_no,\r\n          so_id:saleslist.tran_id,\r\n          company_id:contactlist.company_id,\r\n          company_name:contactlist.company_name,\r\n          cperson_id: formData.cperson_id,\r\n          cperson_name: formData.contact_person,\r\n          po_no: formData.po_no,\r\n          po_date: formData.po_date,\r\n          carrier: formData.courier,\r\n          vehicle: formData.vehicle_no,\r\n          remarks: formData.remarks,\r\n          noofbox: formData.no_of_box,\r\n          value: formData.value,\r\n          user_name: localStorage.getItem(\"userName\"),\r\n          manuDcDetail: tableList,\r\n          user_id: localStorage.getItem(\"userId\"),\r\n        };\r\n        await CommonController.commonApiCallFilter(\r\n          \"logistic/mdc/insertmdc\",\r\n          body,\r\n          \"post\",\r\n          \"node\"\r\n        )\r\n          .then((result) => {\r\n            if (result.status === 200) {\r\n              showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n              // window.location.reload();\r\n              settableList([])\r\n              setFormData({\r\n                ...formData,\r\n                date: \"\",\r\n                po_no: \"\",\r\n                po_date: \"\",\r\n                courier: \"\",\r\n                vehicle_no: \"\",\r\n                contact_person: \"\",\r\n                cperson_id: \"\",\r\n                remarks: \"\",\r\n                no_of_box: \"\",\r\n               \r\n                value: \"\",\r\n             \r\n              \r\n              });\r\n              setsaleslist(null)\r\n              setcontactlist(null)\r\n            } else {\r\n              showErrorToast(result.message.code);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            showErrorToast(err);\r\n          });\r\n      }\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getAccountContactList();\r\n\r\n  }, [contactlist]);\r\n\r\n  useEffect(() => {\r\n    getDCNo();\r\n  }, []);\r\n\r\n \r\n \r\n\r\n  const {\r\n    dc_no,\r\n    po_no,\r\n    courier,\r\n    po_date,\r\n    vehicle_no,\r\n    contact_person,\r\n    remarks,\r\n    no_of_box,\r\n    value,\r\n    box_no,\r\n    description,\r\n    qty,\r\n  } = formData;\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row mt-5\">\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Date\"\r\n            disabled\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={moment().format(\"MM/DD/YYYY\")}\r\n            size=\"small\"\r\n            name=\"date\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"DC NO.\"\r\n            disabled\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={dc_no}\r\n            name={\"dc_no\"}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"PO No.\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={po_no}\r\n            name=\"po_no\"\r\n            size=\"small\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <DatePicker\r\n            label=\"PO Date\"\r\n            // value={po_date}\r\n            format=\"dd/MM/yyyy\"\r\n            onChange={(date) => handleDateChange(\"po_date\", date)}\r\n            animateYearScrolling\r\n            inputVariant=\"outlined\"\r\n            size=\"small\"\r\n            autoOk\r\n            fullWidth\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mb-3\">\r\n        <Autocomplete\r\n              id=\"combo-box-demo\"\r\n              options={accountList}\r\n              fullWidth\r\n              size=\"small\"\r\n              getOptionLabel={(option) =>option.company_name}\r\n              value={contactlist}\r\n              onChange={(e, value) => setcontactlist(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onInput={(e) => {\r\n                    debounce(getCompanyList(e.target.value, 200));\r\n                  }}\r\n                  label=\"Party Name\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          {/* <TextField\r\n            label=\"Party Name\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={party_name}\r\n            name=\"party_name\"\r\n            // disabled\r\n            onChange={handleChange}\r\n            select\r\n          >\r\n            {accountList.map((val) => (\r\n              <MenuItem key={val.company_id} value={val.company_name}>\r\n                {val.company_name}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField> */}\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Courier\"\r\n            fullWidth\r\n            onChange={handleChange}\r\n            value={courier}\r\n            variant=\"outlined\"\r\n            name=\"courier\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Vehicle No\"\r\n            fullWidth\r\n            value={vehicle_no}\r\n            onChange={handleChange}\r\n            name={\"vehicle_no\"}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mb-3\">\r\n          <TextField\r\n            label=\"Contact Person\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={contact_person}\r\n            name={\"contact_person\"}\r\n            size=\"small\"\r\n            onChange={handleChange}\r\n            // select\r\n          >\r\n            {/* <MenuItem value=\"ab\">ab</MenuItem> */}\r\n          </TextField>\r\n        </div>\r\n\r\n        <div className=\"col-md-6 mb-3\">\r\n          <TextField\r\n            label=\"Remarks\"\r\n            value={remarks}\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            name=\"remarks\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mb-3\">\r\n          <TextField\r\n            label=\"No Of Box\"\r\n            value={no_of_box}\r\n            name=\"no_of_box\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n        <Autocomplete\r\n              id=\"combo-box-demo\"\r\n              options={salesOrderList}\r\n              fullWidth\r\n              getOptionLabel={(option) =>option.so_no}\r\n              value={saleslist}\r\n              onChange={(e, value) => setsaleslist(value)}\r\n              sx={{ height:20 }}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  onChange={(e) => {\r\n                    debounce(getSalesOrder(e.target.value));\r\n                  }}\r\n                  label=\"Sales Order\"\r\n                  variant=\"outlined\"\r\n                />\r\n              )}\r\n            />\r\n          {/* <TextField\r\n            label=\"Sales Order\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n            value={sales_order}\r\n            onChange={handleChange}\r\n            name=\"sales_order\"\r\n            size=\"small\"\r\n            select\r\n          >\r\n           {salesOrderList.map((val,i)=>( <MenuItem key={i }value={val.so_no}> {val.so_no}</MenuItem>))}\r\n          </TextField> */}\r\n        </div>\r\n        <div className=\"col-md-3 mb-3\">\r\n          <TextField\r\n            label=\"Value\"\r\n            fullWidth\r\n            value={value}\r\n            name=\"value\"\r\n            variant=\"outlined\"\r\n            onChange={handleChange}\r\n            size=\"small\"\r\n            multiline\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {tableList.length > 0 ? (\r\n        <SimpleTable\r\n          columns={diListColumn}\r\n          rows={tableList}\r\n          onDelete={handleDeleteTable}\r\n        />\r\n      ) : null}\r\n      <hr />\r\n      <div className=\"container-fluid\">\r\n        {/* <h1>Add Box:</h1> */}\r\n        <div className=\"row mt-5\">\r\n          <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"Box No\"\r\n              fullWidth\r\n              onChange={handleChange}\r\n              value={box_no}\r\n              variant=\"outlined\"\r\n              name=\"box_no\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-4 mb-3\">\r\n            <TextField\r\n              label=\"Description\"\r\n              fullWidth\r\n              onChange={handleChange}\r\n              value={description}\r\n              variant=\"outlined\"\r\n              name=\"description\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"Qty\"\r\n              fullWidth\r\n              onChange={handleChange}\r\n              value={qty}\r\n              variant=\"outlined\"\r\n              name=\"qty\"\r\n              type=\"number\"\r\n              size=\"small\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-2 mb-3 pl-5\">\r\n            <Button\r\n              color=\"primary\"\r\n              // className=\"mr-2\"\r\n              // disableElevation\r\n              variant=\"contained\"\r\n              onClick={submitAddBox}\r\n            >\r\n              Add New\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* <div className=\"float-action-btn\">\r\n          <Fab\r\n            variant=\"extended\"\r\n            onClick={addBox}\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            aria-label=\"add\"\r\n          >\r\n            <AddIcon />\r\n            Add Box\r\n          </Fab>\r\n        </div> */}\r\n\r\n      <hr />\r\n      <div className=\"w-100 mt-3 text-right\">\r\n        <Button\r\n          color=\"primary\"\r\n          className=\"mr-2\"\r\n          disableElevation\r\n          variant=\"contained\"\r\n          onClick={submitMdc}\r\n        >\r\n          Save\r\n        </Button>\r\n        <Button color=\"primary\" disableElevation variant=\"contained\">\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddDeliveryChallanMdc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\index.js",["1817","1818"],"import React, { useState } from \"react\";\r\nimport SlWipAdd from \"./add\";\r\n\r\nimport SlWipBrowse from \"./browse\";\r\n\r\n\r\nexport default function SlWipIndex({slType}) {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(1);\r\n            }}\r\n          >\r\n           {`New ${slType} WIP` }\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? <SlWipBrowse slType={slType}/> : <SlWipAdd />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\index.js",["1819","1820"],"import React,{useState} from 'react'\r\nimport MrnAddDc from './add';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function MrnDcIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        New Material Receipt Note\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <MrnBrowseDc/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <MrnAddDc/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\add.js",["1821","1822","1823","1824","1825","1826","1827","1828","1829","1830","1831","1832","1833","1834"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst MrnAddDc = ({ challanType }) => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MrnAddDc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\browse.js",["1835","1836","1837","1838","1839","1840","1841","1842","1843","1844"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst MrnBrowseDc = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_mrn_dc\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totaldata);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"widget-container\">\r\n        <div className=\"widget-box first\">\r\n          <span>Amount</span>\r\n          <p>{currenyMasking(amountFigures.amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box second\">\r\n          <span>MDC Amount</span>\r\n          <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box third\">\r\n          <span>Actual Amount</span>\r\n          <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n        </div>\r\n      </div> */}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n             \r\n            },\r\n         \r\n\r\n            {\r\n              field: \"mrn_no\",\r\n              headerName: \"MRN No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mrn_date\",\r\n              headerName: \"MRN Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Comp ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.po_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            {\r\n                field: \"status\",\r\n                headerName: \"Status\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_date\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.docket_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default MrnBrowseDc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\index.js",["1845","1846","1847"],"import React,{useState} from 'react'\r\nimport RgpBrowseDc from './browse';\r\n\r\nimport RrgpAdd from './rrgp/add';\r\n\r\n\r\n\r\nexport default function ReturnableIndex() {\r\n    const challanType = new URLSearchParams(window.location.search).get(\"type\");\r\n    const [index, setindex] = useState(0)\r\n    // const history = useHistory();\r\n    // console.log(challanType);\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={\r\n                            `nav-link ` +\r\n                            (index === 0\r\n                                ? \"active\"\r\n                                : \"\")\r\n                        }\r\n                        onClick={() => {\r\n                            // window.location.href = `/logistics/delivery-challan?type=${encodeURIComponent(\r\n                            //   \"SL\" \r\n                            // )}`;\r\n                            setindex(0)\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={\r\n                            `nav-link ` +\r\n                            (index === 1 ? \"active\" : \"\")\r\n                        }\r\n                        onClick={() =>\r\n                            // (window.location.href = `/logistics/delivery-challan?type=${encodeURIComponent(\r\n                            //   \"Non SL\"\r\n                            // )}`)\r\n                            setindex(1)\r\n                        }\r\n                    >\r\n                        Returnable Gate Pass\r\n                    </a>\r\n                </li>\r\n              \r\n              \r\n               \r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {/* {(index === 0 || index === 1) && <ChallanIndex\r\n                    type={challanType ? decodeURIComponent(challanType) : \"SL\"}\r\n                />}  */}\r\n                \r\n                {  index===0&& <RgpBrowseDc/>}\r\n                {  index===1&& <RrgpAdd/>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\add.js",["1848","1849","1850","1851","1852","1853","1854","1855","1856","1857","1858","1859","1860","1861"],"F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\browse.js",["1862","1863","1864","1865","1866","1867","1868","1869","1870","1871"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst RgpBrowseDc = () => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_rgp\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n                field: \"date\",\r\n                headerName: \"Date\",\r\n                width: 100,\r\n                renderCell: (params) => {\r\n                  return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n                },\r\n              },\r\n            {\r\n              field: \"rgp_no\",\r\n              headerName: \"RGP No.\",\r\n              width: 120,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Package\",\r\n              headerName: \"Package\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"Transport\",\r\n                headerName: \"Transport\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Attachement\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default RgpBrowseDc;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\index.js",["1872","1873","1874","1875"],"import React,{useState} from 'react'\r\nimport JobWorkAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport JobWorkBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function JobWorkIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                    Job Work In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <JobWorkBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <JobWorkAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\subIndex.js",["1876","1877","1878","1879"],"import React,{useState} from 'react'\r\nimport JobWorkAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport JobWorkBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function JobWorkSubIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                    Job Work In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <JobWorkBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <JobWorkAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n",["1880","1881"],"F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\add.js",["1882","1883","1884","1885","1886","1887","1888","1889","1890","1891","1892","1893","1894","1895"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst JobWorkAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JobWorkAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\browse.js",["1896","1897","1898","1899","1900","1901","1902","1903","1904","1905"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst JobWorkBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_jwin\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"widget-container\">\r\n        <div className=\"widget-box first\">\r\n          <span>Amount</span>\r\n          <p>{currenyMasking(amountFigures.amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box second\">\r\n          <span>MDC Amount</span>\r\n          <p>{currenyMasking(amountFigures.mdc_amount)}</p>\r\n        </div>\r\n        <div className=\"widget-box third\">\r\n          <span>Actual Amount</span>\r\n          <p>{currenyMasking(amountFigures.actual_amount)}</p>\r\n        </div>\r\n      </div> */}\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n\r\n            {\r\n              field: \"jwin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Ref Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.ref_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"Destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Attachement\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobWorkBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\index.js",["1906","1907","1908","1909"],"import React,{useState} from 'react'\r\nimport CcrAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport CcrBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function CcrInIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        CCR In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CcrBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CcrAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\index.js",["1910","1911"],"import React,{useState} from 'react'\r\nimport CourierAdd from './add'\r\nimport CourierBrowse from './browse'\r\nexport default function CourierInIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                \r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        Courier In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CourierBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CourierAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\subIndex.js",["1912","1913","1914","1915"],"import React,{useState} from 'react'\r\nimport CcrAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport CcrBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function CcrSubIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        CCR In\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CcrBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CcrAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\subIndex.js",[],"F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\add.js",["1916","1917","1918","1919","1920","1921","1922","1923","1924","1925","1926","1927","1928","1929"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst CourierAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourierAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\browse.js",["1930","1931","1932","1933","1934","1935","1936","1937","1938","1939"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst CourierBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_courierin\",\r\n         params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n   \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"tran_no\",\r\n              headerName: \"Tran No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n           \r\n            // {\r\n            //   field: \"so_no\",\r\n            //   headerName: \"So No\",\r\n            //   width: 120,\r\n            // },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Description\",\r\n              headerName: \"Description\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"box_no\",\r\n              headerName: \"Box No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"no_of_packets\",\r\n              headerName: \"No Of Packets\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 120,\r\n            },\r\n\r\n            // {\r\n            //   field: \"comments\",\r\n            //   headerName: \"Comments\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CourierBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\add.js",["1940","1941","1942","1943","1944","1945","1946","1947","1948","1949","1950","1951","1952","1953"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../components/common\";\r\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\r\n\r\nconst CcrAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CcrAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\browse.js",["1954","1955","1956","1957","1958","1959","1960","1961","1962","1963"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../components/common\";\r\nimport DateFilter from \"../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../components/action-buttons\";\r\n\r\nconst CcrBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_ccrin\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n  \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n\r\n            {\r\n              field: \"ccrin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"cperson_name\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_no\",\r\n              headerName: \"Notification No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_date\",\r\n              headerName: \"Notification Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.notification_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"carrier\",\r\n                headerName: \"carrier\",\r\n                width: 120,\r\n              },\r\n              {\r\n                field: \"destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CcrBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\index.js",["1964","1965","1966","1967","1968","1969"],"import React,{useState} from 'react'\r\nimport CcrAdd from './add';\r\nimport CcrOutAdd from './add';\r\nimport MrnAddDc from './add';\r\nimport CcrOutBrowse from './browse';\r\nimport CcrBrowse from './browse';\r\nimport MrnBrowseDc from './browse';\r\n\r\nexport default function CcrOutIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        CCR Out\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CcrOutBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CcrOutAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\add.js",["1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst CcrOutAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CcrOutAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\ccr\\ccrOut\\browse.js",["1984","1985","1986","1987","1988","1989","1990","1991","1992","1993"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\n// import { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst CcrOutBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_ccrout\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n              field: \"ccrout_no\",\r\n              headerName: \"JWOUT No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ccrin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"cperson_name\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_no\",\r\n              headerName: \"Notification No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"notification_date\",\r\n              headerName: \"Notification Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.notification_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"carrier\",\r\n                headerName: \"carrier\",\r\n                width: 120,\r\n              },\r\n              {\r\n                field: \"destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CcrOutBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\index.js",["1994","1995"],"import React,{useState} from 'react'\r\n\r\nimport CourierOutBrowse from './browse';\r\nimport CourierOutAdd from './add'\r\n\r\nexport default function CourierOutIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        Courier Out\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <CourierOutBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CourierOutAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\index.js",["1996","1997"],"import React,{useState} from 'react'\r\nimport CourierInvoiceBrowse from './browse'\r\nimport CourierInvoiceAdd from './add'\r\nexport default function CourierInvoiceIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        Courier Invoice\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                <CourierInvoiceBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <CourierInvoiceAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\browse.js",["1998","1999","2000","2001","2002","2003","2004","2005","2006","2007"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst CourierOutBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  console.log(browseListData)\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_courierout\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n         \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n     \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"tran_no\",\r\n              headerName: \"Tran No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n           \r\n            // {\r\n            //   field: \"so_no\",\r\n            //   headerName: \"So No\",\r\n            //   width: 120,\r\n            // },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Description\",\r\n              headerName: \"Description\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"box_no\",\r\n              headerName: \"Box No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"no_of_packets\",\r\n              headerName: \"No Of Packets\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 120,\r\n            },\r\n\r\n            // {\r\n            //   field: \"comments\",\r\n            //   headerName: \"Comments\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n          \r\n          ]}  \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CourierOutBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\courierOut\\add.js",["2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst CourierOutAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourierOutAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\add.js",["2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst CourierInvoiceAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CourierInvoiceAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\courier\\invoice\\browse.js",["2036","2037","2038","2039","2040","2041","2042","2043","2044","2045","2046"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst CourierInvoiceBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  console.log(browseListData)\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_courierinvoice\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n     \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n         \r\n\r\n            {\r\n              field: \"mrn_no\",\r\n              headerName: \"MRN No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mrn_date\",\r\n              headerName: \"MRN Date\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"comp_id\",\r\n              headerName: \"Comp ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"status\",\r\n                headerName: \"Status\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_date\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CourierInvoiceBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\index.js",["2047","2048"],"import React,{useState} from 'react'\r\nimport JobWorkOutAdd from './add';\r\nimport JobWorkOutBrowse from './browse';\r\n\r\nexport default function JobWorkOutIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                    Job Work Out\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <JobWorkOutBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <JobWorkOutAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\add.js",["2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060","2061","2062"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst JobWorkOutAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default JobWorkOutAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\job-work\\jobWorkOut\\browse.js",["2063","2064","2065","2066","2067","2068","2069","2070","2071","2072"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst JobWorkOutBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_jwout\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n              field: \"jwout_no\",\r\n              headerName: \"JWOUT No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"jwin_no\",\r\n              headerName: \"JWIN No.\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"mrn_date\",\r\n            //   headerName: \"MRN Date\",\r\n            //   width: 120,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"date\",\r\n              headerName: \"Ref Date\",\r\n              width: 100,\r\n              renderCell: (params) => {\r\n                return moment(params.row.ref_date).format(\"DD/MM/YYYY\");\r\n              },\r\n            },\r\n            {\r\n                field: \"Destination\",\r\n                headerName: \"Destination\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Fault\",\r\n              headerName: \"Fault\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"Remarks\",\r\n              headerName: \"Remarks\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"Status\",\r\n              headerName: \"Status\",\r\n              width: 150,\r\n            },\r\n            {\r\n              field: \"\",\r\n              headerName: \"Attachement\",\r\n              width: 150,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobWorkOutBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\index.js",["2073","2074"],"import React,{useState} from 'react'\r\nimport MrnPoAdd from './add';\r\n\r\nimport MrnPoBrowse from './browse';\r\n\r\nexport default function MrnPoIndex({type}) {\r\n    const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n    const handleIndex = (index) => {\r\n        setSeletedIndex(index);\r\n    };\r\n\r\n    return (\r\n        <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n            <ul className=\"nav nav-tabs nav-tabs-line\">\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(0);\r\n                        }}\r\n                    >\r\n                        Browse\r\n                    </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                    <a\r\n                        className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n                        onClick={() => {\r\n                            // dispatch(clearSelectedGodownId());\r\n                            handleIndex(1);\r\n                        }}\r\n                    >\r\n                        New MRN(PO)\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n            <div className=\"tab-content\">\r\n                {selectedIndex === 0 ? (\r\n                    // <DeliveryChallanBrowse type={type} />\r\n                    <MrnPoBrowse/>\r\n                ) : (\r\n                    // <AddDeliveryChallan challanType={type} />\r\n                    <MrnPoAdd/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\add.js",["2075","2076","2077","2078","2079","2080","2081","2082","2083","2084","2085","2086","2087","2088"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst MrnPoAdd = ({ challanType }) => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MrnPoAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\material-receipt-note\\mrn-po\\browse.js",["2089","2090","2091","2092","2093","2094","2095","2096","2097","2098"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst MrnPoBrowse = ({ type }) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_mrn_po\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totaldata);\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n   \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n             \r\n            },\r\n         \r\n\r\n            {\r\n              field: \"mrn_no\",\r\n              headerName: \"MRN No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"mrn_date\",\r\n              headerName: \"MRN Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            // {\r\n            //   field: \"date\",\r\n            //   headerName: \"Date\",\r\n            //   width: 100,\r\n            //   renderCell: (params) => {\r\n            //     return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n            //   },\r\n            // },\r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Comp ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"company_name\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"po_no\",\r\n              headerName: \"PO No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"po_date\",\r\n              headerName: \"PO Date\",\r\n              width: 120,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.po_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            {\r\n                field: \"status\",\r\n                headerName: \"Status\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"courier\",\r\n              headerName: \"Courier\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_no\",\r\n              headerName: \"Docket No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"docket_date\",\r\n              headerName: \"Docket No.\",\r\n              width: 150,\r\n              renderCell:(params)=>{\r\n                return moment(params.row.docket_date).format(\"DD/MM/YYYY\");\r\n              }\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n\r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default MrnPoBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\index.js",["2099","2100","2101","2102","2103","2104"],"import React, { useState } from \"react\";\r\nimport RgpAdd from \"./add\";\r\nimport RrgpAdd from \"./add\";\r\nimport MrnAddDc from \"./add\";\r\nimport RrgpBrowse from \"./browse\";\r\nimport RgpBrowseDc from \"./browse\";\r\nimport MrnBrowseDc from \"./browse\";\r\n\r\nexport default function RrgpIndex() {\r\n  const [selectedIndex, setSeletedIndex] = useState(0);\r\n\r\n  const handleIndex = (index) => {\r\n    setSeletedIndex(index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\r\n      <ul className=\"nav nav-tabs nav-tabs-line\">\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(0);\r\n            }}\r\n          >\r\n            Browse\r\n          </a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a\r\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\r\n            onClick={() => {\r\n              // dispatch(clearSelectedGodownId());\r\n              handleIndex(1);\r\n            }}\r\n          >\r\n            Return Of Returnable Gate Pass{\" \"}\r\n          </a>\r\n        </li>\r\n      </ul>\r\n      <div className=\"tab-content\">\r\n        {selectedIndex === 0 ? <RrgpBrowse /> : <RrgpAdd/>}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\add.js",["2105","2106","2107","2108","2109","2110","2111","2112","2113","2114","2115","2116","2117","2118"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst RrgpAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RrgpAdd;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\returnable-gate-pass\\rrgp\\browse.js",["2119","2120","2121","2122","2123","2124","2125","2126","2127"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst RrgpBrowse = () => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n  \r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:true,\r\n    status: \"\",\r\n    approval:\"\",\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (event) => {\r\n    setTimeout(() => {\r\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\r\n    }, 800);\r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistic/browse_rgp\",\r\n        params,\r\n        bodyParam,\r\n\r\n        \"node\"\r\n      ).then((data) => {\r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totalRecords);\r\n          setAmountFigures({\r\n            amount: data.amount,\r\n            mdc_amount: data.mdc_amount,\r\n            actual_amount: data.actual_amount,\r\n          });\r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n    \r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"ID\",\r\n              headerName: \"ID\",\r\n              flex: 0,\r\n            },\r\n            {\r\n                field: \"date\",\r\n                headerName: \"Date\",\r\n                width: 100,\r\n                renderCell: (params) => {\r\n                  return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n                },\r\n              },\r\n              {\r\n                field: \"rrgp_no\",\r\n                headerName: \"RRGP No.\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"rgp_no\",\r\n              headerName: \"RGP No.\",\r\n              width: 120,\r\n            },\r\n            \r\n           \r\n            {\r\n              field: \"company_id\",\r\n              headerName: \"Party ID\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"party_name\",\r\n              headerName: \"Party Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"gate_no\",\r\n              headerName: \"Gate No\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"challan_no\",\r\n                headerName: \"Challan No\",\r\n                width: 120,\r\n              },\r\n            {\r\n              field: \"bill_no\",\r\n              headerName: \"Bill No\",\r\n              width: 120,\r\n            },\r\n            // {\r\n            //   field: \"Status\",\r\n            //   headerName: \"Status\",\r\n            //   width: 120,\r\n            // },\r\n            // {\r\n            //   field: \"Attachement\",\r\n            //   headerName: \"Docket No.\",\r\n            //   width: 150,\r\n            // },\r\n            \r\n           \r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.ID}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default RrgpBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\browse.js",["2128","2129","2130","2131","2132","2133","2134","2135","2136"],"import { TextField, Button, MenuItem } from \"@material-ui/core\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\nimport {\r\n  CommonController,\r\n  currenyMasking,\r\n} from \"../../../../_redux/controller/common.controller\";\r\nimport CustomPagination from \"../../../../components/CustomPagination\";\r\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\"; \r\nimport { debounce, showErrorToast } from \"../../../../components/common\";\r\nimport DateFilter from \"../../../../components/dateFilter\";\r\nimport moment from \"moment\";\r\nimport ActionButtons from \"../../../../components/action-buttons\";\r\n\r\nconst SlWipBrowse = ({slType}) => {\r\n  const [browseListData, setBrowseListData] = useState([]);\r\n\r\n  const [totalRecord, setTotalRecords] = useState(0);\r\n  const [amountFigures, setAmountFigures] = useState({\r\n    amount: 0,\r\n    mdc_amount: 0,\r\n    actual_amount: 0,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [params, setParams] = useState({\r\n    pageNo: 1,\r\n    pageSize: 10,\r\n    filter_value: \"\",\r\n    sort_column: \"\",\r\n    sort_order: \"\",\r\n  });\r\n\r\n  const [bodyParam, setBodyParam] = useState({\r\n    user_id: localStorage.getItem(\"userId\"),\r\n    chk_all:false,\r\n    status: \"\",\r\n    approval:\"\",\r\n    sl_type:\"\"\r\n  });\r\n  const handleParams = (event) => {\r\n    debounce(     \r\n      setParams({...params, [event.target.name]: event.target.value }),\r\n      1000\r\n    );\r\n  };\r\n\r\n  const handleBodyParam = (sl) => {\r\n\r\n      setBodyParam({...bodyParam,sl_type:sl})\r\n     \r\n  };\r\n\r\n  const getBrowseListData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      await CommonController.commonApiCall(\r\n        \"logistics/dc/browseWip\",\r\n        params,\r\n        bodyParam,\r\n        \"node\"\r\n      ).then((data) => {\r\n    \r\n        if (data.status === 200) {\r\n          setBrowseListData(data.data);\r\n          setTotalRecords(data.totaldata);\r\n          \r\n        } else {\r\n          showErrorToast(\"Something went wrong\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      showErrorToast(err);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handlePageSizeChange = (param) => {\r\n    setParams({ ...params, pageSize: param });\r\n  };\r\n  const handleRowId=(e)=>{\r\n    console.log(e)\r\n  }\r\n  const handlePageChange = (param) => {\r\n    if (param !== 0) {\r\n      setParams({ ...params, pageNo: param });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    handleBodyParam(slType)\r\n  \r\n  }, [slType]);\r\n \r\n\r\n  useEffect(() => {\r\n    \r\n    getBrowseListData();\r\n  }, [params, bodyParam]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filter_box mb-5\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-1 d-flex align-items-center\">\r\n            <h4 className=\"mb-0\">Filters</h4>\r\n          </div>\r\n\r\n          <div className=\"col-md-2\">\r\n            <TextField\r\n              fullWidth\r\n              id=\"outlined-basic\"\r\n              size=\"small\"\r\n              onKeyUp={handleParams}\r\n              name=\"filter_value\"\r\n              label=\"Search\"\r\n              variant=\"outlined\"\r\n            />\r\n          </div>\r\n          <DateFilter onDateUpdate={() => getBrowseListData()} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: 400, width: \"100%\" }}>\r\n        <DataGrid\r\n          columns={[\r\n            {\r\n              field: \"tran_id\",\r\n              headerName: \"SR. no\",\r\n              flex: 0,\r\n            },\r\n            {\r\n                field: \"date\",\r\n                headerName: \"Date\",\r\n                width: 100,\r\n                renderCell: (params) => {\r\n                  return moment(params.row.date).format(\"DD/MM/YYYY\");\r\n                },\r\n              },\r\n\r\n            {\r\n              field: \"dc_no\",\r\n              headerName: \"DC No\",\r\n              width: 120,\r\n            },\r\n         \r\n            {\r\n              field: \"Company\",\r\n              headerName: \"Company Name\",\r\n              width: 120,\r\n            },\r\n          \r\n            {\r\n              field: \"Contact\",\r\n              headerName: \"Contact\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"sales_order\",\r\n              headerName: \"Sales Order\",\r\n              width: 120,\r\n            },\r\n            {\r\n                field: \"so_date\",\r\n                headerName: \"So Date\",\r\n                width: 120,\r\n                renderCell:(params)=>{\r\n                  return moment(params.row.so_date).format(\"DD/MM/YYYY\");\r\n                }\r\n              },\r\n              {\r\n                field: \"ref_date\",\r\n                headerName: \"Ref Date\",\r\n                width: 120,\r\n                renderCell:(params)=>{\r\n                  return moment(params.row.ref_date).format(\"DD/MM/YYYY\");\r\n                }\r\n              },\r\n            {\r\n              field: \"ref_no\",\r\n              headerName: \"Ref No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"di_no\",\r\n              headerName: \"DI No.\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"pi_no\",\r\n              headerName: \"PI No.\",\r\n              width: 150,\r\n            },\r\n            \r\n            {\r\n              field: \"dis_through\",\r\n              headerName: \"Dispatch Thr\",\r\n              width: 120,\r\n            }, {\r\n              field: \"Destination\",\r\n              headerName: \"Destination\",\r\n              width: 120,\r\n            }, {\r\n              field: \"vehicle_no\",\r\n              headerName: \"Vehicle No\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"amount\",\r\n              headerName: \"Amount\",\r\n              width: 120,\r\n            },{\r\n              field: \"mdc_amount\",\r\n              headerName: \"MDC Amount\",\r\n              width: 120,\r\n            },{\r\n              field: \"actual_amount\",\r\n              headerName: \"Actual Amount\",\r\n              width: 120,\r\n            },\r\n            {\r\n              field: \"action\",\r\n              headerName: \"Actions\",\r\n              width: 120,\r\n            },\r\n            \r\n          \r\n          ]}\r\n          \r\n          pagination\r\n          // getRowId={handleRowId}\r\n          disableColumnFilter\r\n          pageSize={params.pageSize}\r\n          page={params.pageNo}\r\n          rowsPerPageOptions={[10, 15, 25, 100]}\r\n          rowCount={totalRecord}\r\n          paginationMode=\"server\"\r\n          onPageSizeChange={handlePageSizeChange}\r\n          onPageChange={handlePageChange}\r\n          loading={loading}\r\n          rowHeight={30}\r\n          components={\r\n            browseListData.length > 0\r\n              ? {\r\n                  Pagination: CustomPagination,\r\n                  NoRowsOverlay: CustomNoRowsOverlay,\r\n                }\r\n              : {}\r\n          }\r\n          onSortModelChange={(sort) => {\r\n            if (sort.length > 0) {\r\n              setParams({\r\n                ...params,\r\n                sort_column: sort[0].field,\r\n                sort_order: sort[0].sort,\r\n              });\r\n            }\r\n          }}\r\n          rows={browseListData}\r\n          getRowId={(browseListData) =>  browseListData.tran_id}\r\n        />\r\n      </div>\r\n  \r\n    </>\r\n  );\r\n};\r\n\r\nexport default SlWipBrowse;\r\n","F:\\React code\\diagnostic\\src\\pages\\logistics\\delivery-challan\\slwip\\add.js",["2137","2138","2139","2140","2141","2142","2143","2144","2145","2146","2147","2148","2149","2150"],"import { Button, formatMs, MenuItem, TextField, Fab } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@mui/material\";\r\nimport { DatePicker } from \"@material-ui/pickers\";\r\n\r\nimport moment from \"moment\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { SimpleTable } from \"../../../../components/basic-table\";\r\nimport {\r\n    debounce,\r\n    showErrorToast,\r\n    showSuccessToast,\r\n} from \"../../../../components/common\";\r\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\r\n\r\nconst SlWipAdd = () => {\r\n    const [tableList, settableList] = useState([]);\r\n    const [formData, setFormData] = useState({\r\n        date: \"\",\r\n        dc_no: \"\",\r\n        po_no: \"\",\r\n        po_date: \"\",\r\n        courier: \"\",\r\n        vehicle_no: \"\",\r\n        contact_person: \"\",\r\n        cperson_id: \"\",\r\n        remarks: \"\",\r\n        no_of_box: \"\",\r\n        value: \"\",\r\n        box_no: \"\",\r\n        description: \"\",\r\n        qty: \"\",\r\n    });\r\n    const [contactlist, setcontactlist] = useState(null);\r\n    const [saleslist, setsaleslist] = useState(null);\r\n    const [showDIList, setShowDIList] = useState(false);\r\n    const [accountList, setaccountList] = useState([]);\r\n    const [salesOrderList, setsalesOrderList] = useState([]);\r\n    const toggleDIList = () => setShowDIList(!showDIList);\r\n    const submitAddBox = () => {\r\n        if (formData.box_no === \"\") {\r\n            showErrorToast(\"Please Enter Box No\");\r\n        } else if (formData.description === \"\") {\r\n            showErrorToast(\"Please Enter description\");\r\n        } else if (formData.qty === \"\") {\r\n            showErrorToast(\"Please Enter Quality\");\r\n        } else {\r\n            settableList([\r\n                ...tableList,\r\n                {\r\n                    box_no: formData.box_no,\r\n                    description: formData.description,\r\n                    qty: formData.qty,\r\n                },\r\n            ]);\r\n            setFormData({ ...formData, box_no: \"\", description: \"\", qty: \"\" });\r\n        }\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setFormData({ ...formData, [event.target.name]: event.target.value });\r\n    };\r\n    const handleDateChange = (name, date) => {\r\n        setFormData({ ...formData, [name]: date });\r\n    };\r\n\r\n    const handleDeleteTable = (e) => {\r\n        tableList.splice(tableList.indexOf(e), 1);\r\n        settableList([...tableList]);\r\n    };\r\n\r\n    const diListColumn = [\r\n        {\r\n            id: \"box_no\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Box No\",\r\n        },\r\n        {\r\n            id: \"description\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Description\",\r\n        },\r\n        {\r\n            id: \"qty\",\r\n            numeric: false,\r\n            disablePadding: false,\r\n            label: \"Qty\",\r\n        },\r\n    ];\r\n\r\n    const getDCNo = async () => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistics/dc/generateDc\",\r\n                {},\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                if (data.status === 200) {\r\n                    setFormData({ ...formData, dc_no: data.data.dc_no });\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //Party name\r\n    const getCompanyList = async (search) => {\r\n        // setLoading(true);\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountlist\",\r\n                { search: search },\r\n                \"get\",\r\n                \"node\"\r\n            ).then((data) => {\r\n                console.log(data);\r\n                if (data.status === 200) {\r\n                    setaccountList(data.result);\r\n                    console.log(accountList);\r\n                }\r\n            });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const getSalesOrder = async (search) => {\r\n        try {\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/picksomdc?search=\" + search,\r\n                \"\",\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setsalesOrderList(data.result);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err.message);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    //contact list\r\n    const getAccountContactList = async () => {\r\n        try {\r\n            let search = contactlist.company_id;\r\n            await CommonController.commonApiCallFilter(\r\n                \"logistic/mdc/accountcontactlist\",\r\n                { search: search },\r\n                \"post\",\r\n                \"node\"\r\n            )\r\n                .then((data) => {\r\n                    if (data.status === 200) {\r\n                        setFormData({\r\n                            ...formData,\r\n                            cperson_id: data.result.cperson_id,\r\n                            contact_person: data.result.cperson_name,\r\n                        });\r\n                    } else {\r\n                        showErrorToast(data.message);\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    showErrorToast(err);\r\n                });\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    const submitMdc = async () => {\r\n        try {\r\n            if (formData.po_no === \"\") {\r\n                showErrorToast(\"Please Enter Po No\");\r\n            } else if (formData.po_date === \"\") {\r\n                showErrorToast(\"Please Enter Po Date\");\r\n            } else if (tableList.length < 0) {\r\n                showErrorToast(\"Please add box\");\r\n            } else if (formData.remarks === \"\") {\r\n                showErrorToast(\"Please enter remarks\");\r\n            } else if (contactlist.company_name === \"\") {\r\n                showErrorToast(\"Please Select Party Name\");\r\n            } else if (formData.courier === \"\") {\r\n                showErrorToast(\"Please Enter Courier\");\r\n            } else if (formData.vehicle_no === \"\") {\r\n                showErrorToast(\"Please Enter Vehicle NO\");\r\n            } else if (formData.contact_person === \"\") {\r\n                showErrorToast(\"Please Enter Contact Person\");\r\n            } else if (formData.no_of_box === \"\") {\r\n                showErrorToast(\"Please Enter No Of Box\");\r\n            } else if (formData.value === \"\") {\r\n                showErrorToast(\"Please Enter Value\");\r\n            } else {\r\n                const body = {\r\n                    tran_id: \"0\",\r\n                    date: moment().format(\"MM/DD/YYYY\"),\r\n                    dc_no: formData.dc_no,\r\n                    so_id: saleslist.tran_id,\r\n                    company_id: contactlist.company_id,\r\n                    company_name: contactlist.company_name,\r\n                    cperson_id: formData.cperson_id,\r\n                    cperson_name: formData.contact_person,\r\n                    po_no: formData.po_no,\r\n                    po_date: formData.po_date,\r\n                    carrier: formData.courier,\r\n                    vehicle: formData.vehicle_no,\r\n                    remarks: formData.remarks,\r\n                    noofbox: formData.no_of_box,\r\n                    value: formData.value,\r\n                    user_name: localStorage.getItem(\"userName\"),\r\n                    manuDcDetail: tableList,\r\n                    user_id: localStorage.getItem(\"userId\"),\r\n                };\r\n                await CommonController.commonApiCallFilter(\r\n                    \"logistic/mdc/insertmdc\",\r\n                    body,\r\n                    \"post\",\r\n                    \"node\"\r\n                )\r\n                    .then((result) => {\r\n                        if (result.status === 200) {\r\n                            showSuccessToast(`${result.message} Entry No ${result.id_no}`);\r\n                            // window.location.reload();\r\n                            settableList([]);\r\n                            setFormData({\r\n                                ...formData,\r\n                                date: \"\",\r\n                                po_no: \"\",\r\n                                po_date: \"\",\r\n                                courier: \"\",\r\n                                vehicle_no: \"\",\r\n                                contact_person: \"\",\r\n                                cperson_id: \"\",\r\n                                remarks: \"\",\r\n                                no_of_box: \"\",\r\n\r\n                                value: \"\",\r\n                            });\r\n                            setsaleslist(null);\r\n                            setcontactlist(null);\r\n                        } else {\r\n                            showErrorToast(result.message.code);\r\n                        }\r\n                    })\r\n                    .catch((err) => {\r\n                        showErrorToast(err);\r\n                    });\r\n            }\r\n        } catch (err) {\r\n            showErrorToast(err);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getAccountContactList();\r\n    }, [contactlist]);\r\n\r\n    useEffect(() => {\r\n        getDCNo();\r\n    }, []);\r\n\r\n    const {\r\n        dc_no,\r\n        po_no,\r\n        courier,\r\n        po_date,\r\n        vehicle_no,\r\n        contact_person,\r\n        remarks,\r\n        no_of_box,\r\n        value,\r\n        box_no,\r\n        description,\r\n        qty,\r\n    } = formData;\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row mt-5\">\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN No\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        //   value={mrn_no}\r\n                        size=\"small\"\r\n                        name=\"mrn_no\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"MRN Date\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={moment().format(\"MM/DD/YYYY\")}\r\n                        size=\"small\"\r\n                        name=\"date\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"PO/DC No.\"\r\n                        disabled\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        value={dc_no}\r\n                        name={\"dc_no\"}\r\n                    />\r\n                </div>\r\n\r\n                {/* <div className=\"col-md-3 mb-3\">\r\n            <TextField\r\n              label=\"PO No.\"\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              value={po_no}\r\n              name=\"po_no\"\r\n              size=\"small\"\r\n              onChange={handleChange}\r\n            />\r\n          </div> */}\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <DatePicker\r\n                        label=\"PO/DC Date\"\r\n                        // value={po_date}\r\n                        format=\"dd/MM/yyyy\"\r\n                        onChange={(date) => handleDateChange(\"po_date\", date)}\r\n                        animateYearScrolling\r\n                        inputVariant=\"outlined\"\r\n                        size=\"small\"\r\n                        autoOk\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Party Name\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={po_no}\r\n                        name=\"po_no\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={accountList}\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        getOptionLabel={(option) => option.company_name}\r\n                        value={contactlist}\r\n                        onChange={(e, value) => setcontactlist(value)}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onInput={(e) => {\r\n                                    debounce(getCompanyList(e.target.value, 200));\r\n                                }}\r\n                                label=\"Employee Name\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Contact Person\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={contact_person}\r\n                        name={\"contact_person\"}\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    ></TextField>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Department\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Courier Name\"\r\n                        fullWidth\r\n                        onChange={handleChange}\r\n                        value={courier}\r\n                        variant=\"outlined\"\r\n                        name=\"courier\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Order for(PO)\"\r\n                        fullWidth\r\n                        value={vehicle_no}\r\n                        onChange={handleChange}\r\n                        name={\"vehicle_no\"}\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Status\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <Autocomplete\r\n                        id=\"combo-box-demo\"\r\n                        options={salesOrderList}\r\n                        fullWidth\r\n                        getOptionLabel={(option) => option.so_no}\r\n                        value={saleslist}\r\n                        onChange={(e, value) => setsaleslist(value)}\r\n                        sx={{ height: 20 }}\r\n                        renderInput={(params) => (\r\n                            <TextField\r\n                                {...params}\r\n                                onChange={(e) => {\r\n                                    debounce(getSalesOrder(e.target.value));\r\n                                }}\r\n                                label=\"Godown\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket No\"\r\n                        value={remarks}\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        name=\"remarks\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Docket Date\"\r\n                        value={no_of_box}\r\n                        name=\"no_of_box\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 mb-3\">\r\n                    <TextField\r\n                        label=\"Remarks\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice No\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <TextField\r\n                        label=\"Invoice Date\"\r\n                        fullWidth\r\n                        value={value}\r\n                        name=\"value\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        size=\"small\"\r\n                        multiline\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {/* {tableList.length > 0 ? (\r\n          <SimpleTable\r\n            columns={diListColumn}\r\n            rows={tableList}\r\n            onDelete={handleDeleteTable}\r\n          />\r\n        ) : null} */}\r\n            <hr />\r\n            {/* <div className=\"container-fluid\">\r\n                <h1>Add Box:</h1>\r\n                <div className=\"row mt-5\">\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Box No\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={box_no}\r\n                            variant=\"outlined\"\r\n                            name=\"box_no\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-4 mb-3\">\r\n                        <TextField\r\n                            label=\"Description\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={description}\r\n                            variant=\"outlined\"\r\n                            name=\"description\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-3 mb-3\">\r\n                        <TextField\r\n                            label=\"Qty\"\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={qty}\r\n                            variant=\"outlined\"\r\n                            name=\"qty\"\r\n                            type=\"number\"\r\n                            size=\"small\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-2 mb-3 pl-5\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            // className=\"mr-2\"\r\n                            // disableElevation\r\n                            variant=\"contained\"\r\n                            onClick={submitAddBox}\r\n                        >\r\n                            Add New\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div> */}\r\n\r\n            {/* <div className=\"float-action-btn\">\r\n            <Fab\r\n              variant=\"extended\"\r\n              onClick={addBox}\r\n              size=\"medium\"\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon />\r\n              Add Box\r\n            </Fab>\r\n          </div> */}\r\n\r\n            <hr />\r\n            <div className=\"w-100 mt-3 text-right\">\r\n                <Button\r\n                    color=\"primary\"\r\n                    className=\"mr-2\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={submitMdc}\r\n                >\r\n                    Save\r\n                </Button>\r\n                <Button color=\"primary\" disableElevation variant=\"contained\">\r\n                    Cancel\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SlWipAdd;\r\n","F:\\React code\\diagnostic\\src\\components\\third_menu.js",["2151"],"import React from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ThirdMenu = (props) => {\r\n  const { list, onMenuChange } = props;\r\n  const selectedMenu = window.location.pathname.split(\"/\")[1];\r\n  const selectedSubMenu = window.location.pathname.split(\"/\")[2];\r\n  const thirdMenu = window.location.pathname.split(\"/\")[3];\r\n\r\n  return (\r\n    <div className=\"header-bottom submenu\">\r\n      <div className=\"px-3\">\r\n        <div className=\"header-navs header-navs-left\">\r\n          <ul className=\"menu-nav mb-0 list-unstyled d-flex flex-wrap\">\r\n            {list.length > 0\r\n              ? list.map((item, index) => {\r\n                  if (item.level ===3) {\r\n                    // console.log(\r\n                    //   item.transaction_name\r\n                    //     .replace(/[^a-zA-Z ]/g, \"\")\r\n                    //     .replace(/\\s+/g, \"-\")\r\n                    //     .toLowerCase()\r\n                    // ); \r\n                  \r\n                    return (\r\n                      <li className=\"menu-item\" key={\"sublist\" + index}>\r\n                        <Link\r\n                          onClick={onMenuChange}\r\n                          className={\r\n                            \"menu-link py-2 px-4 rounded mr-2 d-inline-block \" +\r\n                            (thirdMenu ===\r\n                            item.transaction_name\r\n                              .replace(/[^a-zA-Z ]/g, \"\")\r\n                              .replace(/\\s+/g, \"-\")\r\n                              .toLowerCase()\r\n                              ? \"active\"\r\n                              : \"\")\r\n                          }\r\n                          to={`/${selectedMenu?.toLowerCase()}/${selectedSubMenu?.toLowerCase()}/${item.transaction_name\r\n                            .replace(/[^a-zA-Z ]/g, \"\")\r\n                            .replace(/\\s+/g, \"-\")\r\n                            .toLowerCase()}`}\r\n                        >\r\n                          {\" \"}\r\n                          <span className=\"menu-text\">\r\n                            {item.transaction_name}\r\n                          </span>\r\n                        </Link>\r\n                      </li>\r\n                    );\r\n                  }\r\n                })\r\n              : null}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ThirdMenu;\r\n\r\n// + (selectedSubMenu === (item.transaction_name.replace(/\\s+/g, '-').toLowerCase()) ? \"active\" : \"\")\r\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\index.js",["2152","2153","2154"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesQuotationBrowse from \"./browse\";\n\n\n\nconst SalesQuotationIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New Quotation\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesQuotationBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesQuotationIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\index.js",["2155","2156","2157"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSoAmdBrowse from \"./browse\";\n\nconst SalesSoAmdIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SO Amendment\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSoAmdBrowse/>\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSoAmdIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\quotation\\browse.js",["2158","2159","2160","2161","2162","2163","2164","2165","2166","2167","2168","2169","2170"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesQuotationBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesQuotationBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\soAmedment\\browse.js",["2171","2172","2173","2174","2175","2176","2177","2178","2179","2180","2181","2182","2183"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSoAmdBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSoAmdBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\index.js",["2184","2185","2186"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesMarketingBrowse from \"./browse\";\n\nconst SalesMarketingIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n\n            New Marketing Visit\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesMarketingBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesMarketingIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\marketingVisit\\browse.js",["2187","2188","2189","2190","2191","2192","2193","2194","2195","2196","2197","2198","2199"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesMarketingBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesMarketingBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\index.js",["2200","2201","2202"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesIssueBrowse from \"./browse\";\n\n\nconst SalesIssueIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n            >\n            New Marketing Visit\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesIssueBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesIssueIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\issues\\browse.js",["2203","2204","2205","2206","2207","2208","2209","2210","2211","2212","2213","2214","2215"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../components/common\";\nimport CustomPagination from \"../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../components/customRowComponent\";\nimport { Loader } from \"../../../components/loader\";\nimport { CommonController } from \"../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesIssueBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesIssueBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\index.js",["2216","2217","2218"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SoDetailBrowse from \"./browse\";\n\nconst SoDetail = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New So Detail\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SoDetailBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SoDetail;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\soDetail\\browse.js",["2219","2220","2221","2222","2223","2224","2225","2226","2227","2228","2229","2230","2231"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SoDetailBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SoDetailBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\index.js",["2232","2233","2234","2235"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSlSoPosSummariseBrowse from \"./browse\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesSlSoPosSummariseIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SO POS Summarize\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSlSoPosSummariseBrowse/>\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSlSoPosSummariseIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\index.js",["2236","2237","2238","2239"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSiDiBrowse from \"./browse\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesSiDiIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SL DI\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSiDiBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSiDiIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\index.js",["2240","2241","2242","2243"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport SalesSlSoPosBrowse from \"./browse\";\n\nimport SalesEnquiryBrowse from \"./browse\";\n\nconst SalesSlSoPosIndex = () => {\n  const dispatch = useDispatch();\n  const [selectedIndex, setSeletedIndex] = useState(0);\n\n  const handleIndex = (index) => {\n    setSeletedIndex(index);\n  };\n\n  return (\n    <div className=\"card card-custom gutter-b  px-7 py-3\">\n      <ul className=\"nav nav-tabs nav-tabs-line\">\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 0 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(0);\n            }}\n          >\n            Browse\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a\n            className={`nav-link ` + (selectedIndex === 1 ? \"active\" : \"\")}\n            onClick={() => {\n              // dispatch(clearSelectedGodownId());\n              handleIndex(1);\n            }}\n          >\n            New SO POS\n          </a>\n        </li>\n      </ul>\n      <div className=\"tab-content\">\n        {selectedIndex === 0 ? (\n          <SalesSlSoPosBrowse />\n        ) : (\n          <h2>Sales Enquiry Form</h2>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SalesSlSoPosIndex;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slDI\\browse.js",["2244","2245","2246","2247","2248","2249","2250","2251","2252","2253","2254","2255","2256"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSiDiBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSiDiBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPos\\browse.js",["2257","2258","2259","2260","2261","2262","2263","2264","2265","2266","2267","2268","2269"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSlSoPosBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                      \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                      \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSlSoPosBrowse;\n","F:\\React code\\diagnostic\\src\\pages\\Sales\\salesOrder\\slSoPosSummarise\\browse.js",["2270","2271","2272","2273","2274","2275","2276","2277","2278","2279","2280","2281","2282"],"import {\n  Checkbox,\n  TextField,\n  Button,\n  MenuItem,\n  List,\n  Avatar,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  getBrowseUserRight,\n  showErrorToast,\n  showSuccessToast,\n} from \"../../../../components/common\";\nimport CustomPagination from \"../../../../components/CustomPagination\";\nimport CustomNoRowsOverlay from \"../../../../components/customRowComponent\";\nimport { Loader } from \"../../../../components/loader\";\nimport { CommonController } from \"../../../../_redux/controller/common.controller\";\nimport ActionButtons from \"../../../../components/action-buttons\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectedEmployeeId } from \"../../../../_redux/actions/masters/all.action\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\n\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport moment from \"moment\";\nimport ImageIcon from \"@material-ui/icons/Image\";\nimport { DatePicker } from \"@material-ui/pickers\";\n\nconst user_id = {\n  user_id: localStorage.getItem(\"userId\"),\n};\n\nconst label = { inputProps: { \"aria-label\": \"Checkbox\" } };\nconst SalesSlSoPosSummariseBrowse = ({ onEdit }) => {\n  const dispatch = useDispatch();\n\n  const getuserRightListResponse = useSelector(\n    (state) => state.common.userRightList\n  );\n\n  const [browseListData, setBrowseListData] = useState([]);\n  const [totalRecord, setTotalRecords] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [remarksModal, setRemarksModal] = useState(false);\n  const [remarksList, setRemarksList] = useState(null);\n  const [remarkLoading, setRemarkLoading] = useState(false);\n  const [markEng, setMarkEng] = useState(null);\n  const [remarks, setRemarks] = useState({\n    status_id: \"\",\n    remarks: \"\",\n    user_id: localStorage.getItem(\"userId\"),\n  });\n  const [params, setParams] = useState({\n    pageNo: 1,\n    pageSize: 15,\n    filter_value: \"\",\n    sort_column: \"\",\n    sort_order: \"desc\",\n  });\n\n  const [bodyParam, setBodyParam] = useState({\n    user_id: localStorage.getItem(\"userId\"),\n    chk_All: \"1\",\n    company_name: \"\",\n    type: \"all\",\n    status: \"all\",\n    mark_engg: \"\",\n    fromDate: null,\n    toDate: null,\n  });\n\n  const toggleRemarks = () => {\n    setRemarksModal(!remarksModal);\n  };\n\n  const handleParams = (event) => {\n    setTimeout(() => {\n      setParams({ ...params, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const handleBodyParam = (event) => {\n    setTimeout(() => {\n      setBodyParam({ ...bodyParam, [event.target.name]: event.target.value });\n    }, 800);\n  };\n\n  const getBrowseListData = async () => {\n    setLoading(true);\n    await CommonController.commonApiCall(\n      \"Sales/SalesEnquiryBrowse\",\n      params,\n      bodyParam\n    )\n      .then((data) => {\n        setBrowseListData(data.data);\n        setTotalRecords(data.recordsFiltered);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setLoading(false);\n  };\n\n  const getRemarkList = async (id) => {\n    setRemarks({ ...remarks, tran_id: id });\n    setRemarkLoading(true);\n    await CommonController.commonApiCallFilter(\n      \"Sales/CloseSalesEnquiry\",\n      {\n        enquiry_id: id,\n      },\n      \"get\"\n    )\n      .then((data) => {\n        setRemarksList(data);\n        setRemarksModal(true);\n      })\n      .catch((err) => {\n        showErrorToast(err);\n      });\n    setRemarkLoading(false);\n  };\n\n  const getMarkEngList = () => {\n    CommonController.commonApiCallFilter(\"Dropdown/SalesEnquiryDropdown\").then(\n      (data) => setMarkEng(data.employeeList)\n    );\n  };\n\n  const onRemarkChange = (event) => {\n    setRemarks({ ...remarks, [event.target.name]: event.target.value });\n  };\n\n  const handlePageSizeChange = (param) => {\n    setParams({ ...params, pageSize: param.pageSize });\n  };\n  const handlePageChange = (param) => {\n    setParams({ ...params, pageNo: param.page });\n  };\n\n  const handleDateChange = (type, date) => {\n    setBodyParam({ ...bodyParam, [type]: date });\n  };\n\n  useEffect(() => {\n    getBrowseListData();\n    getMarkEngList();\n  }, []);\n\n  useEffect(() => {\n    getBrowseListData();\n  }, [params, getuserRightListResponse, bodyParam]);\n\n  const handleEdit = (id) => {\n    dispatch(selectedEmployeeId(id));\n    onEdit();\n  };\n\n  const handleDeleteRow = (id) => {\n    CommonController.commonApiCallFilter(\"Employee/EmployeeMasterDelete\", {\n      employee_id: id,\n    }).then((data) => {\n      if (data.valid) {\n        showSuccessToast(\"Record Deleted Successfully\");\n        getBrowseListData();\n      } else {\n        showErrorToast(\"Something went wrong\");\n      }\n    });\n  };\n\n  const saveRemarks = () => {\n    setLoading(true);\n    try {\n      CommonController.commonApiCallFilter(\n        \"Sales/UpdateSalesEnquiryRemarks\",\n        remarks\n      ).then((data) => {\n        if (data.valid) {\n          getBrowseListData();\n          showSuccessToast(\"Remarks Updated Successfully\");\n          setRemarksModal(false);\n        } else {\n          showErrorToast(data.msg);\n        }\n      });\n    } catch (err) {\n      showErrorToast(\"Something went wrong\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      {loading && <Loader />}\n\n      <div className=\"filter_box mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-1 d-flex align-items-center\">\n            <h4 className=\"mb-0\">Filters</h4>\n          </div>\n\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleParams(e);\n                }\n              }}\n              name=\"filter_value\"\n              label=\"Search\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"From Date\"\n              value={bodyParam.fromDate}\n              format=\"dd/MM/yyyy\"\n              onChange={(date) => handleDateChange(\"fromDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <DatePicker\n              label=\"To Date\"\n              value={bodyParam.toDate}\n              onChange={(date) => handleDateChange(\"toDate\", date)}\n              animateYearScrolling\n              inputVariant=\"outlined\"\n              size=\"small\"\n              fullWidth\n            />\n          </div>\n          <div className=\"col-md-2\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onKeyDown={(e) => {\n                if (e.keyCode === 13) {\n                  handleBodyParam(e);\n                }\n              }}\n              name=\"party_name\"\n              label=\"Company Name\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              name=\"type\"\n              select\n              label=\"Type\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Spares</MenuItem>\n              <MenuItem value={\"projects\"}>Projects</MenuItem>\n              <MenuItem value={\"service\"}>Service</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-1\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"status\"\n              label=\"Status\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"all\"}>All</MenuItem>\n              <MenuItem value={\"spares\"}>Close</MenuItem>\n              <MenuItem value={\"spares\"}>Open</MenuItem>\n            </TextField>\n          </div>\n          <div className=\"col-md-2 mt-3\">\n            <TextField\n              fullWidth\n              id=\"outlined-basic\"\n              size=\"small\"\n              onChange={(e) => {\n                handleBodyParam(e);\n              }}\n              select\n              name=\"mark_engg\"\n              label=\"Marketing Eng.\"\n              variant=\"outlined\"\n            >\n              <MenuItem value={\"\"}>None</MenuItem>\n              {markEng &&\n                markEng.map((eng, indx) => {\n                  return (\n                    <MenuItem value={eng.value} key={indx}>\n                      {eng.value}\n                    </MenuItem>\n                  );\n                })}\n            </TextField>\n          </div>\n        </div>\n      </div>\n      {/* Update remarks modal */}\n\n      <Dialog\n        open={remarksModal}\n        fullWidth\n        onClose={toggleRemarks}\n        aria-labelledby=\"responsive-dialog-title\"\n      >\n        <DialogTitle id=\"responsive-dialog-title\">Add Comment</DialogTitle>\n        <DialogContent>\n          <TextField\n            variant=\"outlined\"\n            className=\"mb-4\"\n            size=\"small\"\n            fullWidth\n            id=\"select-1\"\n            select\n            name=\"status_id\"\n            onChange={onRemarkChange}\n            label=\"Enquiry Status*\"\n          >\n            <MenuItem value={\"0\"}>Close</MenuItem>\n            <MenuItem value={\"1\"}>Open</MenuItem>\n          </TextField>\n          <TextField\n            variant=\"outlined\"\n            multiline\n            size=\"small\"\n            name=\"remarks\"\n            onChange={onRemarkChange}\n            label=\"Remarks*\"\n            fullWidth\n          />\n          <List>\n            {remarksList &&\n              remarksList.length > 0 &&\n              remarksList.map((remark, index) => {\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <Avatar>\n                        <ImageIcon />\n                      </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={remark.user_name}\n                      secondary={\n                        <p className=\"mb-0\">\n                          {remark.remarks}{\" \"}\n                          <span className=\"float-right\">{remark.datetime}</span>\n                        </p>\n                      }\n                    />\n                  </ListItem>\n                );\n              })}\n          </List>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggleRemarks} color=\"primary\">\n            Close\n          </Button>\n          <Button\n            onClick={saveRemarks}\n            disabled={\n              remarks.remarks == \"\" || remarks.status_id == \"\" || loading\n            }\n            color=\"primary\"\n          >\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <div style={{ height: 400, width: \"100%\" }}>\n        <DataGrid\n          columns={[\n            {\n              field: \"id\",\n              headerName: \"Sr. no\",\n              width: 80,\n            },\n            {\n              field: \"date\",\n              headerName: \"Date\",\n              width: 100,\n              renderCell: (params) => {\n                return moment(params.row.date).format(\"DD/MM/yyyy\");\n              },\n            },\n            {\n              field: \"enquiry_no\",\n              headerName: \"Enquiry No\",\n              width: 120,\n            },\n            {\n              field: \"company_id\",\n              headerName: \"Comp Id\",\n              width: 100,\n            },\n            {\n              field: \"company_name\",\n              headerName: \"Company Name\",\n              width: 200,\n            },\n            {\n              field: \"description\",\n              headerName: \"Description\",\n              width: 200,\n            },\n            {\n              field: \"type\",\n              headerName: \"Type\",\n              width: 100,\n            },\n            {\n              field: \"priority_name\",\n              headerName: \"Priority Name\",\n              width: 100,\n            },\n            {\n              field: \"reference_name\",\n              headerName: \"Reference\",\n              width: 120,\n            },\n            {\n              field: \"status\",\n              headerName: \"Status\",\n              width: 100,\n            },\n            {\n              field: \"employee_name\",\n              headerName: \"Employee Name\",\n              width: 150,\n            },\n            {\n              field: \"mark_engg\",\n              headerName: \"Marketing Eng.\",\n              width: 150,\n            },\n            {\n              field: \"remarks\",\n              headerName: \"Remarks\",\n              width: 150,\n              renderCell: (param) => {\n                return (\n                  <>\n                    {remarkLoading ? (\n                      <img src=\"/asset/images/circle.gif\" width={20} />\n                    ) : (\n                      <Button\n                        className=\"text-lowercase\"\n                        color=\"primary\"\n                        onClick={() => {\n                          getRemarkList(param.row.tran_id);\n                        }}\n                      >\n                        {param.row.remarks}\n                      </Button>\n                    )}\n                  </>\n                );\n              },\n            },\n\n            {\n              field: \"\",\n              headerName: \"Actions\",\n              renderCell: (params) => (\n                <ActionButtons\n                  onPreview={\n                    getBrowseUserRight(getuserRightListResponse)?.view_right ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onEdit={\n                    getBrowseUserRight(getuserRightListResponse)?.edit_button ==\n                    \"True\"\n                      ? () => handleEdit(params.row.id)\n                      : null\n                  }\n                  onDelete={\n                    getBrowseUserRight(getuserRightListResponse)\n                      ?.delete_right == \"True\"\n                      ? () => handleDeleteRow(params.row.id)\n                      : null\n                  }\n                />\n              ),\n              width: 100,\n            },\n          ]}\n          pagination\n          disableColumnFilter\n          pageSize={params.pageSize}\n          page={params.pageNo}\n          rowsPerPageOptions={[10, 15, 25, 100]}\n          rowCount={totalRecord}\n          paginationMode=\"server\"\n          onPageSizeChange={handlePageSizeChange}\n          onPageChange={handlePageChange}\n          loading={loading}\n          rowHeight={30}\n          //components={{\n          //Pagination: CustomPagination,\n          //NoRowsOverlay: CustomNoRowsOverlay,\n          //       }}\n          onSortModelChange={(sort) => {\n            if (sort.length > 0) {\n              setParams({\n                ...params,\n                sort_column: sort[0].field,\n                sort_order: sort[0].sort,\n              });\n            }\n          }}\n          rows={browseListData}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default SalesSlSoPosSummariseBrowse;\n",{"ruleId":"2283","replacedBy":"2284"},{"ruleId":"2285","replacedBy":"2286"},{"ruleId":"2287","severity":1,"message":"2288","line":7,"column":8,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2291","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2292","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2293","line":17,"column":22,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":35},{"ruleId":"2287","severity":1,"message":"2294","line":24,"column":10,"nodeType":"2289","messageId":"2290","endLine":24,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2295","line":25,"column":10,"nodeType":"2289","messageId":"2290","endLine":25,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2296","line":25,"column":25,"nodeType":"2289","messageId":"2290","endLine":25,"endColumn":41},{"ruleId":"2297","severity":1,"message":"2298","line":33,"column":6,"nodeType":"2299","endLine":33,"endColumn":8,"suggestions":"2300"},{"ruleId":"2287","severity":1,"message":"2301","line":49,"column":13,"nodeType":"2289","messageId":"2290","endLine":49,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2302","line":55,"column":9,"nodeType":"2289","messageId":"2290","endLine":55,"endColumn":25},{"ruleId":"2287","severity":1,"message":"2303","line":6,"column":10,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2304","line":13,"column":21,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2305","line":76,"column":4,"nodeType":"2299","endLine":76,"endColumn":27,"suggestions":"2306"},{"ruleId":"2297","severity":1,"message":"2305","line":98,"column":4,"nodeType":"2299","endLine":98,"endColumn":26,"suggestions":"2307"},{"ruleId":"2308","severity":1,"message":"2309","line":110,"column":8,"nodeType":"2310","endLine":110,"endColumn":50},{"ruleId":"2308","severity":1,"message":"2309","line":144,"column":11,"nodeType":"2310","endLine":144,"endColumn":86},{"ruleId":"2287","severity":1,"message":"2311","line":2,"column":8,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":18},{"ruleId":"2297","severity":1,"message":"2298","line":26,"column":3,"nodeType":"2299","endLine":26,"endColumn":22,"suggestions":"2312"},{"ruleId":"2297","severity":1,"message":"2298","line":35,"column":3,"nodeType":"2299","endLine":35,"endColumn":34,"suggestions":"2313"},{"ruleId":"2287","severity":1,"message":"2314","line":2,"column":117,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":132},{"ruleId":"2287","severity":1,"message":"2315","line":2,"column":134,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":156},{"ruleId":"2287","severity":1,"message":"2316","line":2,"column":198,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":227},{"ruleId":"2287","severity":1,"message":"2317","line":57,"column":15,"nodeType":"2289","messageId":"2290","endLine":57,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2317","line":68,"column":15,"nodeType":"2289","messageId":"2290","endLine":68,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2317","line":78,"column":15,"nodeType":"2289","messageId":"2290","endLine":78,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2318","line":40,"column":15,"nodeType":"2289","messageId":"2290","endLine":40,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2291","line":5,"column":3,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2319","line":7,"column":3,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":18},{"ruleId":"2287","severity":1,"message":"2295","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2296","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2297","severity":1,"message":"2298","line":164,"column":6,"nodeType":"2299","endLine":164,"endColumn":8,"suggestions":"2320"},{"ruleId":"2287","severity":1,"message":"2321","line":166,"column":9,"nodeType":"2289","messageId":"2290","endLine":166,"endColumn":16},{"ruleId":"2322","severity":1,"message":"2323","line":17,"column":9,"nodeType":"2310","endLine":21,"endColumn":11},{"ruleId":"2322","severity":1,"message":"2323","line":22,"column":9,"nodeType":"2310","endLine":26,"endColumn":11},{"ruleId":"2324","severity":1,"message":"2325","line":17,"column":40,"nodeType":"2326","messageId":"2327","endLine":17,"endColumn":42},{"ruleId":"2287","severity":1,"message":"2328","line":14,"column":8,"nodeType":"2289","messageId":"2290","endLine":14,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2329","line":66,"column":6,"nodeType":"2299","endLine":66,"endColumn":8,"suggestions":"2330"},{"ruleId":"2331","severity":1,"message":"2332","line":163,"column":23,"nodeType":"2333","messageId":"2334","endLine":163,"endColumn":42},{"ruleId":"2287","severity":1,"message":"2335","line":2,"column":10,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2336","line":8,"column":8,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2337","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2338","line":8,"column":8,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":20},{"ruleId":"2339","severity":1,"message":"2340","line":28,"column":24,"nodeType":"2341","messageId":"2342","endLine":28,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":28,"column":60,"nodeType":"2341","messageId":"2342","endLine":28,"endColumn":62},{"ruleId":"2339","severity":1,"message":"2340","line":45,"column":24,"nodeType":"2341","messageId":"2342","endLine":45,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":45,"column":60,"nodeType":"2341","messageId":"2342","endLine":45,"endColumn":62},{"ruleId":"2339","severity":1,"message":"2340","line":62,"column":24,"nodeType":"2341","messageId":"2342","endLine":62,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":62,"column":60,"nodeType":"2341","messageId":"2342","endLine":62,"endColumn":62},{"ruleId":"2339","severity":1,"message":"2340","line":79,"column":24,"nodeType":"2341","messageId":"2342","endLine":79,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":79,"column":60,"nodeType":"2341","messageId":"2342","endLine":79,"endColumn":62},{"ruleId":"2339","severity":1,"message":"2340","line":96,"column":24,"nodeType":"2341","messageId":"2342","endLine":96,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":96,"column":60,"nodeType":"2341","messageId":"2342","endLine":96,"endColumn":62},{"ruleId":"2339","severity":1,"message":"2340","line":116,"column":24,"nodeType":"2341","messageId":"2342","endLine":116,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":116,"column":60,"nodeType":"2341","messageId":"2342","endLine":116,"endColumn":62},{"ruleId":"2339","severity":1,"message":"2340","line":133,"column":24,"nodeType":"2341","messageId":"2342","endLine":133,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":133,"column":60,"nodeType":"2341","messageId":"2342","endLine":133,"endColumn":62},{"ruleId":"2297","severity":1,"message":"2344","line":89,"column":6,"nodeType":"2299","endLine":89,"endColumn":8,"suggestions":"2345"},{"ruleId":"2297","severity":1,"message":"2344","line":93,"column":6,"nodeType":"2299","endLine":93,"endColumn":14,"suggestions":"2346"},{"ruleId":"2297","severity":1,"message":"2344","line":65,"column":6,"nodeType":"2299","endLine":65,"endColumn":8,"suggestions":"2347"},{"ruleId":"2297","severity":1,"message":"2344","line":69,"column":6,"nodeType":"2299","endLine":69,"endColumn":17,"suggestions":"2348"},{"ruleId":"2287","severity":1,"message":"2349","line":2,"column":10,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2350","line":2,"column":18,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2351","line":5,"column":10,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2352","line":5,"column":28,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2353","line":5,"column":39,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":47},{"ruleId":"2297","severity":1,"message":"2344","line":60,"column":6,"nodeType":"2299","endLine":60,"endColumn":8,"suggestions":"2354"},{"ruleId":"2297","severity":1,"message":"2344","line":64,"column":6,"nodeType":"2299","endLine":64,"endColumn":17,"suggestions":"2355"},{"ruleId":"2339","severity":1,"message":"2343","line":76,"column":60,"nodeType":"2341","messageId":"2342","endLine":76,"endColumn":62},{"ruleId":"2339","severity":1,"message":"2343","line":217,"column":52,"nodeType":"2341","messageId":"2342","endLine":217,"endColumn":54},{"ruleId":"2339","severity":1,"message":"2343","line":230,"column":54,"nodeType":"2341","messageId":"2342","endLine":230,"endColumn":56},{"ruleId":"2339","severity":1,"message":"2343","line":243,"column":53,"nodeType":"2341","messageId":"2342","endLine":243,"endColumn":55},{"ruleId":"2339","severity":1,"message":"2343","line":256,"column":54,"nodeType":"2341","messageId":"2342","endLine":256,"endColumn":56},{"ruleId":"2339","severity":1,"message":"2343","line":269,"column":53,"nodeType":"2341","messageId":"2342","endLine":269,"endColumn":55},{"ruleId":"2339","severity":1,"message":"2343","line":282,"column":55,"nodeType":"2341","messageId":"2342","endLine":282,"endColumn":57},{"ruleId":"2339","severity":1,"message":"2343","line":295,"column":54,"nodeType":"2341","messageId":"2342","endLine":295,"endColumn":56},{"ruleId":"2339","severity":1,"message":"2343","line":308,"column":58,"nodeType":"2341","messageId":"2342","endLine":308,"endColumn":60},{"ruleId":"2339","severity":1,"message":"2343","line":321,"column":61,"nodeType":"2341","messageId":"2342","endLine":321,"endColumn":63},{"ruleId":"2339","severity":1,"message":"2343","line":334,"column":56,"nodeType":"2341","messageId":"2342","endLine":334,"endColumn":58},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2356","line":6,"column":10,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2357","line":97,"column":6,"nodeType":"2299","endLine":97,"endColumn":14,"suggestions":"2358"},{"ruleId":"2297","severity":1,"message":"2344","line":101,"column":6,"nodeType":"2299","endLine":101,"endColumn":25,"suggestions":"2359"},{"ruleId":"2297","severity":1,"message":"2344","line":61,"column":6,"nodeType":"2299","endLine":61,"endColumn":8,"suggestions":"2360"},{"ruleId":"2297","severity":1,"message":"2344","line":65,"column":6,"nodeType":"2299","endLine":65,"endColumn":14,"suggestions":"2361"},{"ruleId":"2287","severity":1,"message":"2362","line":7,"column":9,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":20,"column":11,"nodeType":"2310","endLine":26,"endColumn":12},{"ruleId":"2339","severity":1,"message":"2343","line":30,"column":54,"nodeType":"2341","messageId":"2342","endLine":30,"endColumn":56},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":13,"nodeType":"2310","endLine":38,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2364","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2362","line":9,"column":9,"nodeType":"2289","messageId":"2290","endLine":9,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2365","line":11,"column":9,"nodeType":"2289","messageId":"2290","endLine":11,"endColumn":18},{"ruleId":"2308","severity":1,"message":"2363","line":26,"column":11,"nodeType":"2310","endLine":32,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":37,"column":11,"nodeType":"2310","endLine":43,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2366","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2362","line":8,"column":9,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":19,"column":11,"nodeType":"2310","endLine":25,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":30,"column":11,"nodeType":"2310","endLine":36,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2362","line":7,"column":9,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":11,"nodeType":"2310","endLine":24,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":11,"nodeType":"2310","endLine":35,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2367","line":2,"column":10,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":21},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":11,"nodeType":"2310","endLine":24,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":11,"nodeType":"2310","endLine":35,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2368","line":46,"column":9,"nodeType":"2289","messageId":"2290","endLine":46,"endColumn":16},{"ruleId":"2339","severity":1,"message":"2340","line":46,"column":71,"nodeType":"2341","messageId":"2342","endLine":46,"endColumn":73},{"ruleId":"2287","severity":1,"message":"2362","line":7,"column":9,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":11,"nodeType":"2310","endLine":24,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":11,"nodeType":"2310","endLine":35,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":19,"column":11,"nodeType":"2310","endLine":22,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":27,"column":11,"nodeType":"2310","endLine":30,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":13,"nodeType":"2310","endLine":20,"endColumn":14},{"ruleId":"2308","severity":1,"message":"2363","line":25,"column":13,"nodeType":"2310","endLine":28,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2362","line":11,"column":9,"nodeType":"2289","messageId":"2290","endLine":11,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":22,"column":11,"nodeType":"2310","endLine":28,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":33,"column":11,"nodeType":"2310","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2369","line":69,"column":5,"nodeType":"2299","endLine":69,"endColumn":7,"suggestions":"2370"},{"ruleId":"2297","severity":1,"message":"2371","line":75,"column":6,"nodeType":"2299","endLine":75,"endColumn":18,"suggestions":"2372"},{"ruleId":"2287","severity":1,"message":"2373","line":1,"column":8,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2374","line":2,"column":8,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2375","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2376","line":21,"column":10,"nodeType":"2289","messageId":"2290","endLine":21,"endColumn":16},{"ruleId":"2297","severity":1,"message":"2344","line":119,"column":6,"nodeType":"2299","endLine":119,"endColumn":8,"suggestions":"2377"},{"ruleId":"2297","severity":1,"message":"2344","line":123,"column":6,"nodeType":"2299","endLine":123,"endColumn":25,"suggestions":"2378"},{"ruleId":"2287","severity":1,"message":"2379","line":125,"column":9,"nodeType":"2289","messageId":"2290","endLine":125,"endColumn":25},{"ruleId":"2322","severity":1,"message":"2323","line":305,"column":25,"nodeType":"2310","endLine":310,"endColumn":27},{"ruleId":"2339","severity":1,"message":"2343","line":338,"column":31,"nodeType":"2341","messageId":"2342","endLine":338,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":338,"column":58,"nodeType":"2341","messageId":"2342","endLine":338,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":419,"column":23,"nodeType":"2310","endLine":419,"endColumn":72},{"ruleId":"2287","severity":1,"message":"2291","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2380","line":17,"column":19,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":29},{"ruleId":"2297","severity":1,"message":"2298","line":36,"column":6,"nodeType":"2299","endLine":36,"endColumn":8,"suggestions":"2381"},{"ruleId":"2287","severity":1,"message":"2301","line":52,"column":13,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2297","severity":1,"message":"2382","line":99,"column":6,"nodeType":"2299","endLine":99,"endColumn":8,"suggestions":"2383"},{"ruleId":"2339","severity":1,"message":"2343","line":164,"column":23,"nodeType":"2341","messageId":"2342","endLine":164,"endColumn":25},{"ruleId":"2339","severity":1,"message":"2343","line":171,"column":23,"nodeType":"2341","messageId":"2342","endLine":171,"endColumn":25},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2376","line":9,"column":10,"nodeType":"2289","messageId":"2290","endLine":9,"endColumn":16},{"ruleId":"2297","severity":1,"message":"2344","line":76,"column":6,"nodeType":"2299","endLine":76,"endColumn":8,"suggestions":"2384"},{"ruleId":"2297","severity":1,"message":"2344","line":80,"column":6,"nodeType":"2299","endLine":80,"endColumn":25,"suggestions":"2385"},{"ruleId":"2287","severity":1,"message":"2386","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":21},{"ruleId":"2339","severity":1,"message":"2343","line":39,"column":26,"nodeType":"2341","messageId":"2342","endLine":39,"endColumn":28},{"ruleId":"2339","severity":1,"message":"2343","line":45,"column":26,"nodeType":"2341","messageId":"2342","endLine":45,"endColumn":28},{"ruleId":"2297","severity":1,"message":"2387","line":103,"column":6,"nodeType":"2299","endLine":103,"endColumn":17,"suggestions":"2388"},{"ruleId":"2339","severity":1,"message":"2340","line":203,"column":54,"nodeType":"2341","messageId":"2342","endLine":203,"endColumn":56},{"ruleId":"2339","severity":1,"message":"2340","line":214,"column":59,"nodeType":"2341","messageId":"2342","endLine":214,"endColumn":61},{"ruleId":"2339","severity":1,"message":"2340","line":225,"column":62,"nodeType":"2341","messageId":"2342","endLine":225,"endColumn":64},{"ruleId":"2339","severity":1,"message":"2340","line":236,"column":54,"nodeType":"2341","messageId":"2342","endLine":236,"endColumn":56},{"ruleId":"2339","severity":1,"message":"2340","line":247,"column":61,"nodeType":"2341","messageId":"2342","endLine":247,"endColumn":63},{"ruleId":"2339","severity":1,"message":"2340","line":258,"column":54,"nodeType":"2341","messageId":"2342","endLine":258,"endColumn":56},{"ruleId":"2339","severity":1,"message":"2340","line":269,"column":58,"nodeType":"2341","messageId":"2342","endLine":269,"endColumn":60},{"ruleId":"2339","severity":1,"message":"2340","line":280,"column":57,"nodeType":"2341","messageId":"2342","endLine":280,"endColumn":59},{"ruleId":"2339","severity":1,"message":"2340","line":328,"column":63,"nodeType":"2341","messageId":"2342","endLine":328,"endColumn":65},{"ruleId":"2339","severity":1,"message":"2340","line":339,"column":66,"nodeType":"2341","messageId":"2342","endLine":339,"endColumn":68},{"ruleId":"2339","severity":1,"message":"2340","line":350,"column":66,"nodeType":"2341","messageId":"2342","endLine":350,"endColumn":68},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2375","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2389","line":5,"column":26,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":42},{"ruleId":"2287","severity":1,"message":"2376","line":8,"column":10,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2390","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2391","line":23,"column":19,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":29},{"ruleId":"2297","severity":1,"message":"2344","line":75,"column":6,"nodeType":"2299","endLine":75,"endColumn":8,"suggestions":"2392"},{"ruleId":"2297","severity":1,"message":"2344","line":79,"column":6,"nodeType":"2299","endLine":79,"endColumn":25,"suggestions":"2393"},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2375","line":33,"column":10,"nodeType":"2289","messageId":"2290","endLine":33,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2396","line":36,"column":7,"nodeType":"2289","messageId":"2290","endLine":36,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":40,"column":7,"nodeType":"2289","messageId":"2290","endLine":40,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2379","line":149,"column":9,"nodeType":"2289","messageId":"2290","endLine":149,"endColumn":25},{"ruleId":"2297","severity":1,"message":"2344","line":156,"column":6,"nodeType":"2299","endLine":156,"endColumn":8,"suggestions":"2398"},{"ruleId":"2297","severity":1,"message":"2344","line":160,"column":6,"nodeType":"2299","endLine":160,"endColumn":51,"suggestions":"2399"},{"ruleId":"2339","severity":1,"message":"2343","line":371,"column":31,"nodeType":"2341","messageId":"2342","endLine":371,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":371,"column":58,"nodeType":"2341","messageId":"2342","endLine":371,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":454,"column":23,"nodeType":"2310","endLine":454,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":477,"column":78,"nodeType":"2341","messageId":"2342","endLine":477,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":483,"column":79,"nodeType":"2341","messageId":"2342","endLine":483,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":490,"column":38,"nodeType":"2341","messageId":"2342","endLine":490,"endColumn":40},{"ruleId":"2297","severity":1,"message":"2400","line":121,"column":6,"nodeType":"2299","endLine":121,"endColumn":26,"suggestions":"2401"},{"ruleId":"2308","severity":1,"message":"2363","line":128,"column":11,"nodeType":"2310","endLine":131,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":136,"column":11,"nodeType":"2310","endLine":139,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2394","line":16,"column":8,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2402","line":53,"column":23,"nodeType":"2289","messageId":"2290","endLine":53,"endColumn":38},{"ruleId":"2297","severity":1,"message":"2403","line":109,"column":6,"nodeType":"2299","endLine":109,"endColumn":8,"suggestions":"2404"},{"ruleId":"2297","severity":1,"message":"2298","line":113,"column":6,"nodeType":"2299","endLine":113,"endColumn":35,"suggestions":"2405"},{"ruleId":"2287","severity":1,"message":"2406","line":3,"column":8,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2407","line":13,"column":3,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":22},{"ruleId":"2297","severity":1,"message":"2344","line":65,"column":6,"nodeType":"2299","endLine":65,"endColumn":8,"suggestions":"2408"},{"ruleId":"2297","severity":1,"message":"2344","line":69,"column":6,"nodeType":"2299","endLine":69,"endColumn":14,"suggestions":"2409"},{"ruleId":"2287","severity":1,"message":"2410","line":51,"column":23,"nodeType":"2289","messageId":"2290","endLine":51,"endColumn":37},{"ruleId":"2297","severity":1,"message":"2411","line":108,"column":6,"nodeType":"2299","endLine":108,"endColumn":26,"suggestions":"2412"},{"ruleId":"2287","severity":1,"message":"2386","line":5,"column":23,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":34},{"ruleId":"2287","severity":1,"message":"2396","line":18,"column":7,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":14},{"ruleId":"2297","severity":1,"message":"2344","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":8,"suggestions":"2413"},{"ruleId":"2297","severity":1,"message":"2344","line":63,"column":6,"nodeType":"2299","endLine":63,"endColumn":22,"suggestions":"2414"},{"ruleId":"2287","severity":1,"message":"2415","line":51,"column":10,"nodeType":"2289","messageId":"2290","endLine":51,"endColumn":30},{"ruleId":"2287","severity":1,"message":"2416","line":51,"column":32,"nodeType":"2289","messageId":"2290","endLine":51,"endColumn":55},{"ruleId":"2324","severity":1,"message":"2417","line":116,"column":52,"nodeType":"2326","messageId":"2327","endLine":116,"endColumn":54},{"ruleId":"2297","severity":1,"message":"2298","line":191,"column":6,"nodeType":"2299","endLine":191,"endColumn":8,"suggestions":"2418"},{"ruleId":"2419","severity":1,"message":"2420","line":336,"column":11,"nodeType":"2289","messageId":"2421","endLine":336,"endColumn":18},{"ruleId":"2419","severity":1,"message":"2420","line":358,"column":11,"nodeType":"2289","messageId":"2421","endLine":358,"endColumn":18},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2422","line":15,"column":9,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2423","line":39,"column":9,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":24},{"ruleId":"2297","severity":1,"message":"2344","line":79,"column":6,"nodeType":"2299","endLine":79,"endColumn":8,"suggestions":"2424"},{"ruleId":"2297","severity":1,"message":"2344","line":83,"column":6,"nodeType":"2299","endLine":83,"endColumn":25,"suggestions":"2425"},{"ruleId":"2297","severity":1,"message":"2426","line":37,"column":6,"nodeType":"2299","endLine":37,"endColumn":8,"suggestions":"2427"},{"ruleId":"2297","severity":1,"message":"2428","line":57,"column":6,"nodeType":"2299","endLine":57,"endColumn":15,"suggestions":"2429"},{"ruleId":"2287","severity":1,"message":"2430","line":20,"column":7,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2431","line":34,"column":5,"nodeType":"2289","messageId":"2290","endLine":34,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2432","line":37,"column":5,"nodeType":"2289","messageId":"2290","endLine":37,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2433","line":38,"column":5,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":13},{"ruleId":"2324","severity":1,"message":"2325","line":51,"column":35,"nodeType":"2326","messageId":"2327","endLine":51,"endColumn":37},{"ruleId":"2297","severity":1,"message":"2434","line":143,"column":13,"nodeType":"2326","endLine":162,"endColumn":4},{"ruleId":"2297","severity":1,"message":"2435","line":162,"column":6,"nodeType":"2299","endLine":162,"endColumn":8,"suggestions":"2436"},{"ruleId":"2297","severity":1,"message":"2434","line":164,"column":13,"nodeType":"2326","endLine":182,"endColumn":4},{"ruleId":"2297","severity":1,"message":"2437","line":182,"column":6,"nodeType":"2299","endLine":182,"endColumn":14,"suggestions":"2438"},{"ruleId":"2324","severity":1,"message":"2325","line":268,"column":42,"nodeType":"2326","messageId":"2327","endLine":268,"endColumn":44},{"ruleId":"2339","severity":1,"message":"2343","line":276,"column":41,"nodeType":"2341","messageId":"2342","endLine":276,"endColumn":43},{"ruleId":"2324","severity":1,"message":"2325","line":292,"column":54,"nodeType":"2326","messageId":"2327","endLine":292,"endColumn":56},{"ruleId":"2287","severity":1,"message":"2439","line":3,"column":3,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":11},{"ruleId":"2297","severity":1,"message":"2440","line":140,"column":6,"nodeType":"2299","endLine":140,"endColumn":8,"suggestions":"2441"},{"ruleId":"2339","severity":1,"message":"2343","line":275,"column":36,"nodeType":"2341","messageId":"2342","endLine":275,"endColumn":38},{"ruleId":"2339","severity":1,"message":"2343","line":283,"column":42,"nodeType":"2341","messageId":"2342","endLine":283,"endColumn":44},{"ruleId":"2339","severity":1,"message":"2343","line":288,"column":42,"nodeType":"2341","messageId":"2342","endLine":288,"endColumn":44},{"ruleId":"2287","severity":1,"message":"2442","line":5,"column":3,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":8},{"ruleId":"2339","severity":1,"message":"2343","line":50,"column":38,"nodeType":"2341","messageId":"2342","endLine":50,"endColumn":40},{"ruleId":"2339","severity":1,"message":"2343","line":55,"column":44,"nodeType":"2341","messageId":"2342","endLine":55,"endColumn":46},{"ruleId":"2339","severity":1,"message":"2343","line":63,"column":40,"nodeType":"2341","messageId":"2342","endLine":63,"endColumn":42},{"ruleId":"2339","severity":1,"message":"2343","line":69,"column":49,"nodeType":"2341","messageId":"2342","endLine":69,"endColumn":51},{"ruleId":"2339","severity":1,"message":"2340","line":110,"column":36,"nodeType":"2341","messageId":"2342","endLine":110,"endColumn":38},{"ruleId":"2339","severity":1,"message":"2340","line":131,"column":35,"nodeType":"2341","messageId":"2342","endLine":131,"endColumn":37},{"ruleId":"2339","severity":1,"message":"2340","line":151,"column":32,"nodeType":"2341","messageId":"2342","endLine":151,"endColumn":34},{"ruleId":"2339","severity":1,"message":"2340","line":173,"column":30,"nodeType":"2341","messageId":"2342","endLine":173,"endColumn":32},{"ruleId":"2339","severity":1,"message":"2340","line":238,"column":31,"nodeType":"2341","messageId":"2342","endLine":238,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":23,"column":26,"nodeType":"2341","messageId":"2342","endLine":23,"endColumn":28},{"ruleId":"2339","severity":1,"message":"2343","line":28,"column":26,"nodeType":"2341","messageId":"2342","endLine":28,"endColumn":28},{"ruleId":"2339","severity":1,"message":"2343","line":33,"column":27,"nodeType":"2341","messageId":"2342","endLine":33,"endColumn":29},{"ruleId":"2287","severity":1,"message":"2443","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":22},{"ruleId":"2297","severity":1,"message":"2344","line":45,"column":6,"nodeType":"2299","endLine":45,"endColumn":8,"suggestions":"2444"},{"ruleId":"2297","severity":1,"message":"2344","line":49,"column":6,"nodeType":"2299","endLine":49,"endColumn":17,"suggestions":"2445"},{"ruleId":"2287","severity":1,"message":"2386","line":4,"column":23,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":34},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":11,"nodeType":"2310","endLine":32,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":37,"column":11,"nodeType":"2310","endLine":40,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":45,"column":11,"nodeType":"2310","endLine":48,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":23,"column":11,"nodeType":"2310","endLine":29,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":34,"column":11,"nodeType":"2310","endLine":40,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2446","line":1,"column":8,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2447","line":18,"column":7,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2448","line":5,"column":3,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2336","line":10,"column":8,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":20},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":11,"nodeType":"2310","endLine":34,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":39,"column":11,"nodeType":"2310","endLine":45,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2362","line":6,"column":9,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":11,"nodeType":"2310","endLine":23,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":11,"nodeType":"2310","endLine":34,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2449","line":5,"column":3,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":30},{"ruleId":"2287","severity":1,"message":"2450","line":6,"column":3,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":26},{"ruleId":"2339","severity":1,"message":"2343","line":223,"column":65,"nodeType":"2341","messageId":"2342","endLine":223,"endColumn":67},{"ruleId":"2339","severity":1,"message":"2343","line":228,"column":65,"nodeType":"2341","messageId":"2342","endLine":228,"endColumn":67},{"ruleId":"2297","severity":1,"message":"2344","line":264,"column":6,"nodeType":"2299","endLine":264,"endColumn":8,"suggestions":"2451"},{"ruleId":"2297","severity":1,"message":"2344","line":301,"column":6,"nodeType":"2299","endLine":301,"endColumn":35,"suggestions":"2452"},{"ruleId":"2287","severity":1,"message":"2453","line":8,"column":10,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":24},{"ruleId":"2339","severity":1,"message":"2340","line":108,"column":21,"nodeType":"2341","messageId":"2342","endLine":108,"endColumn":23},{"ruleId":"2339","severity":1,"message":"2340","line":112,"column":21,"nodeType":"2341","messageId":"2342","endLine":112,"endColumn":23},{"ruleId":"2308","severity":1,"message":"2363","line":146,"column":11,"nodeType":"2310","endLine":149,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":154,"column":11,"nodeType":"2310","endLine":157,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":162,"column":11,"nodeType":"2310","endLine":165,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2443","line":2,"column":10,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":12,"column":10,"nodeType":"2289","messageId":"2290","endLine":12,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":14,"column":8,"nodeType":"2289","messageId":"2290","endLine":14,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2455","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2304","line":24,"column":21,"nodeType":"2289","messageId":"2290","endLine":24,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":52,"column":6,"nodeType":"2299","endLine":52,"endColumn":26,"suggestions":"2457"},{"ruleId":"2297","severity":1,"message":"2344","line":63,"column":6,"nodeType":"2299","endLine":63,"endColumn":8,"suggestions":"2458"},{"ruleId":"2297","severity":1,"message":"2344","line":67,"column":6,"nodeType":"2299","endLine":67,"endColumn":14,"suggestions":"2459"},{"ruleId":"2287","severity":1,"message":"2460","line":8,"column":10,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":21},{"ruleId":"2297","severity":1,"message":"2400","line":86,"column":6,"nodeType":"2299","endLine":86,"endColumn":26,"suggestions":"2461"},{"ruleId":"2308","severity":1,"message":"2363","line":175,"column":11,"nodeType":"2310","endLine":178,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":183,"column":11,"nodeType":"2310","endLine":186,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2394","line":9,"column":8,"nodeType":"2289","messageId":"2290","endLine":9,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":10,"column":8,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2406","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2375","line":19,"column":10,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2379","line":96,"column":9,"nodeType":"2289","messageId":"2290","endLine":96,"endColumn":25},{"ruleId":"2297","severity":1,"message":"2344","line":104,"column":6,"nodeType":"2299","endLine":104,"endColumn":8,"suggestions":"2462"},{"ruleId":"2297","severity":1,"message":"2344","line":108,"column":6,"nodeType":"2299","endLine":108,"endColumn":51,"suggestions":"2463"},{"ruleId":"2339","severity":1,"message":"2343","line":297,"column":78,"nodeType":"2341","messageId":"2342","endLine":297,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":303,"column":79,"nodeType":"2341","messageId":"2342","endLine":303,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":310,"column":38,"nodeType":"2341","messageId":"2342","endLine":310,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2406","line":3,"column":8,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":14},{"ruleId":"2297","severity":1,"message":"2344","line":62,"column":6,"nodeType":"2299","endLine":62,"endColumn":8,"suggestions":"2464"},{"ruleId":"2297","severity":1,"message":"2344","line":66,"column":6,"nodeType":"2299","endLine":66,"endColumn":14,"suggestions":"2465"},{"ruleId":"2287","severity":1,"message":"2304","line":17,"column":21,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2434","line":40,"column":13,"nodeType":"2326","endLine":70,"endColumn":4},{"ruleId":"2297","severity":1,"message":"2466","line":70,"column":6,"nodeType":"2299","endLine":70,"endColumn":52,"suggestions":"2467"},{"ruleId":"2287","severity":1,"message":"2349","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":9},{"ruleId":"2287","severity":1,"message":"2468","line":3,"column":3,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2469","line":4,"column":3,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2350","line":5,"column":3,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2470","line":6,"column":3,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":9},{"ruleId":"2287","severity":1,"message":"2471","line":43,"column":5,"nodeType":"2289","messageId":"2290","endLine":43,"endColumn":15},{"ruleId":"2331","severity":1,"message":"2332","line":73,"column":15,"nodeType":"2333","messageId":"2334","endLine":73,"endColumn":38},{"ruleId":"2339","severity":1,"message":"2340","line":133,"column":33,"nodeType":"2341","messageId":"2342","endLine":133,"endColumn":35},{"ruleId":"2339","severity":1,"message":"2340","line":332,"column":34,"nodeType":"2341","messageId":"2342","endLine":332,"endColumn":36},{"ruleId":"2339","severity":1,"message":"2340","line":354,"column":35,"nodeType":"2341","messageId":"2342","endLine":354,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2349","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":9},{"ruleId":"2287","severity":1,"message":"2468","line":3,"column":3,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2469","line":4,"column":3,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2350","line":5,"column":3,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2470","line":6,"column":3,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":9},{"ruleId":"2472","severity":1,"message":"2473","line":35,"column":9,"nodeType":"2474","messageId":"2475","endLine":35,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":38,"column":9,"nodeType":"2474","messageId":"2475","endLine":38,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":41,"column":9,"nodeType":"2474","messageId":"2475","endLine":41,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":39,"column":9,"nodeType":"2474","messageId":"2475","endLine":39,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":42,"column":9,"nodeType":"2474","messageId":"2475","endLine":42,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":45,"column":9,"nodeType":"2474","messageId":"2475","endLine":45,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":48,"column":9,"nodeType":"2474","messageId":"2475","endLine":48,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2476","line":10,"column":10,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":22},{"ruleId":"2472","severity":1,"message":"2473","line":46,"column":9,"nodeType":"2474","messageId":"2475","endLine":46,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":49,"column":9,"nodeType":"2474","messageId":"2475","endLine":49,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":52,"column":9,"nodeType":"2474","messageId":"2475","endLine":52,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":55,"column":9,"nodeType":"2474","messageId":"2475","endLine":55,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":58,"column":9,"nodeType":"2474","messageId":"2475","endLine":58,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":41,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":47},{"ruleId":"2339","severity":1,"message":"2343","line":148,"column":33,"nodeType":"2341","messageId":"2342","endLine":148,"endColumn":35},{"ruleId":"2339","severity":1,"message":"2343","line":294,"column":42,"nodeType":"2341","messageId":"2342","endLine":294,"endColumn":44},{"ruleId":"2339","severity":1,"message":"2343","line":307,"column":42,"nodeType":"2341","messageId":"2342","endLine":307,"endColumn":44},{"ruleId":"2472","severity":1,"message":"2473","line":59,"column":9,"nodeType":"2474","messageId":"2475","endLine":59,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":62,"column":9,"nodeType":"2474","messageId":"2475","endLine":62,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":65,"column":9,"nodeType":"2474","messageId":"2475","endLine":65,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":68,"column":9,"nodeType":"2474","messageId":"2475","endLine":68,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":71,"column":9,"nodeType":"2474","messageId":"2475","endLine":71,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":74,"column":9,"nodeType":"2474","messageId":"2475","endLine":74,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":77,"column":9,"nodeType":"2474","messageId":"2475","endLine":77,"endColumn":15},{"ruleId":"2472","severity":1,"message":"2473","line":80,"column":9,"nodeType":"2474","messageId":"2475","endLine":80,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2353","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":18},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":20,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":41,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":47},{"ruleId":"2287","severity":1,"message":"2443","line":2,"column":10,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2479","line":16,"column":11,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":19},{"ruleId":"2287","severity":1,"message":"2480","line":21,"column":11,"nodeType":"2289","messageId":"2290","endLine":21,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2362","line":9,"column":11,"nodeType":"2289","messageId":"2290","endLine":9,"endColumn":19},{"ruleId":"2287","severity":1,"message":"2479","line":19,"column":15,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2480","line":24,"column":15,"nodeType":"2289","messageId":"2290","endLine":24,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2477","line":1,"column":10,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":13},{"ruleId":"2287","severity":1,"message":"2478","line":1,"column":15,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":21,"column":11,"nodeType":"2310","endLine":27,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":32,"column":11,"nodeType":"2310","endLine":38,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2481","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2482"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2484"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2485"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2486","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":31},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":61,"column":6,"nodeType":"2299","endLine":61,"endColumn":26,"suggestions":"2487"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2488"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2489"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2490"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2491"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2492","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2493"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2494","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2495"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2496"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2497"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2498"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2499"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2500","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":30},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2501"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2502","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":30},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2503"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2504"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2505"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2506"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2507"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2508","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2509"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2510","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":31},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2511"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2512","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2513"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2514"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2515"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2516","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2517"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2518"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2519"},{"ruleId":"2287","severity":1,"message":"2520","line":13,"column":26,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":36},{"ruleId":"2339","severity":1,"message":"2343","line":36,"column":21,"nodeType":"2341","messageId":"2342","endLine":36,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2521","line":52,"column":7,"nodeType":"2299","endLine":52,"endColumn":9,"suggestions":"2522"},{"ruleId":"2339","severity":1,"message":"2343","line":96,"column":37,"nodeType":"2341","messageId":"2342","endLine":96,"endColumn":39},{"ruleId":"2339","severity":1,"message":"2340","line":98,"column":35,"nodeType":"2341","messageId":"2342","endLine":98,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2523"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2524"},{"ruleId":"2287","severity":1,"message":"2349","line":2,"column":21,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":2,"column":29,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":8,"column":3,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2526","line":13,"column":8,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":18},{"ruleId":"2287","severity":1,"message":"2406","line":14,"column":8,"nodeType":"2289","messageId":"2290","endLine":14,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2527","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":21,"column":10,"nodeType":"2289","messageId":"2290","endLine":21,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":21,"column":25,"nodeType":"2289","messageId":"2290","endLine":21,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":43,"column":9,"nodeType":"2289","messageId":"2290","endLine":43,"endColumn":24},{"ruleId":"2339","severity":1,"message":"2343","line":82,"column":21,"nodeType":"2341","messageId":"2342","endLine":82,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2530","line":97,"column":9,"nodeType":"2289","messageId":"2290","endLine":97,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":112,"column":6,"nodeType":"2299","endLine":112,"endColumn":14,"suggestions":"2531"},{"ruleId":"2287","severity":1,"message":"2520","line":17,"column":26,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":36},{"ruleId":"2339","severity":1,"message":"2343","line":40,"column":25,"nodeType":"2341","messageId":"2342","endLine":40,"endColumn":27},{"ruleId":"2297","severity":1,"message":"2532","line":61,"column":11,"nodeType":"2299","endLine":61,"endColumn":13,"suggestions":"2533"},{"ruleId":"2339","severity":1,"message":"2343","line":117,"column":36,"nodeType":"2341","messageId":"2342","endLine":117,"endColumn":38},{"ruleId":"2339","severity":1,"message":"2340","line":119,"column":35,"nodeType":"2341","messageId":"2342","endLine":119,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2534","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":61,"column":6,"nodeType":"2299","endLine":61,"endColumn":26,"suggestions":"2535"},{"ruleId":"2287","severity":1,"message":"2349","line":2,"column":21,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":2,"column":29,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":11,"column":3,"nodeType":"2289","messageId":"2290","endLine":11,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2526","line":16,"column":8,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":18},{"ruleId":"2287","severity":1,"message":"2406","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2527","line":18,"column":8,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":45,"column":9,"nodeType":"2289","messageId":"2290","endLine":45,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":77,"column":9,"nodeType":"2289","messageId":"2290","endLine":77,"endColumn":20},{"ruleId":"2339","severity":1,"message":"2343","line":95,"column":27,"nodeType":"2341","messageId":"2342","endLine":95,"endColumn":29},{"ruleId":"2297","severity":1,"message":"2344","line":111,"column":6,"nodeType":"2299","endLine":111,"endColumn":14,"suggestions":"2536"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2537"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2538"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2539","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2540"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2541"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2542"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2543","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":25},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2544"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2545"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2546"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2547","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2548"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2549","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":29},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2550"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2551"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2552"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2553"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2554"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2555","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2556"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2557"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2558"},{"ruleId":"2287","severity":1,"message":"2443","line":3,"column":10,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":4,"column":10,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":13,"column":10,"nodeType":"2289","messageId":"2290","endLine":13,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":15,"column":8,"nodeType":"2289","messageId":"2290","endLine":15,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":17,"column":10,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2559","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":29},{"ruleId":"2287","severity":1,"message":"2304","line":27,"column":21,"nodeType":"2289","messageId":"2290","endLine":27,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":59,"column":6,"nodeType":"2299","endLine":59,"endColumn":26,"suggestions":"2560"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2561"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2562"},{"ruleId":"2287","severity":1,"message":"2483","line":16,"column":10,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":15},{"ruleId":"2297","severity":1,"message":"2344","line":68,"column":6,"nodeType":"2299","endLine":68,"endColumn":8,"suggestions":"2563"},{"ruleId":"2297","severity":1,"message":"2344","line":72,"column":6,"nodeType":"2299","endLine":72,"endColumn":14,"suggestions":"2564"},{"ruleId":"2287","severity":1,"message":"2353","line":4,"column":3,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2351","line":5,"column":3,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":19},{"ruleId":"2287","severity":1,"message":"2443","line":8,"column":10,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2375","line":9,"column":10,"nodeType":"2289","messageId":"2290","endLine":9,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2454","line":18,"column":10,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2406","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2376","line":22,"column":10,"nodeType":"2289","messageId":"2290","endLine":22,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2565","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2304","line":32,"column":21,"nodeType":"2289","messageId":"2290","endLine":32,"endColumn":33},{"ruleId":"2297","severity":1,"message":"2456","line":64,"column":6,"nodeType":"2299","endLine":64,"endColumn":26,"suggestions":"2566"},{"ruleId":"2287","severity":1,"message":"2367","line":2,"column":10,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":21},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":11,"nodeType":"2310","endLine":23,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":11,"nodeType":"2310","endLine":34,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":86,"column":9,"nodeType":"2289","messageId":"2290","endLine":86,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":97,"column":6,"nodeType":"2299","endLine":97,"endColumn":8,"suggestions":"2567"},{"ruleId":"2297","severity":1,"message":"2344","line":101,"column":6,"nodeType":"2299","endLine":101,"endColumn":25,"suggestions":"2568"},{"ruleId":"2287","severity":1,"message":"2439","line":3,"column":3,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2350","line":4,"column":3,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2569","line":6,"column":3,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":6},{"ruleId":"2287","severity":1,"message":"2570","line":46,"column":9,"nodeType":"2289","messageId":"2290","endLine":46,"endColumn":21},{"ruleId":"2297","severity":1,"message":"2571","line":271,"column":6,"nodeType":"2299","endLine":271,"endColumn":19,"suggestions":"2572"},{"ruleId":"2297","severity":1,"message":"2440","line":275,"column":6,"nodeType":"2299","endLine":275,"endColumn":8,"suggestions":"2573"},{"ruleId":"2287","severity":1,"message":"2574","line":284,"column":5,"nodeType":"2289","messageId":"2290","endLine":284,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":11,"nodeType":"2310","endLine":24,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":11,"nodeType":"2310","endLine":35,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":16,"column":21,"nodeType":"2310","endLine":22,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":27,"column":21,"nodeType":"2310","endLine":33,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2578"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2579"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":85,"column":9,"nodeType":"2289","messageId":"2290","endLine":85,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":96,"column":6,"nodeType":"2299","endLine":96,"endColumn":8,"suggestions":"2583"},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":25,"suggestions":"2584"},{"ruleId":"2287","severity":1,"message":"2585","line":9,"column":11,"nodeType":"2289","messageId":"2290","endLine":9,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":21,"nodeType":"2310","endLine":31,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":36,"column":21,"nodeType":"2310","endLine":47,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2586"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2587"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":85,"column":9,"nodeType":"2289","messageId":"2290","endLine":85,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":96,"column":6,"nodeType":"2299","endLine":96,"endColumn":8,"suggestions":"2588"},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":25,"suggestions":"2589"},{"ruleId":"2287","severity":1,"message":"2590","line":3,"column":8,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2591","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":21,"nodeType":"2310","endLine":24,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":21,"nodeType":"2310","endLine":35,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2590","line":3,"column":8,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2591","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":21,"nodeType":"2310","endLine":24,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":21,"nodeType":"2310","endLine":35,"endColumn":22},{"ruleId":"2283","replacedBy":"2592"},{"ruleId":"2285","replacedBy":"2593"},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2594"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2595"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":84,"column":9,"nodeType":"2289","messageId":"2290","endLine":84,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":95,"column":6,"nodeType":"2299","endLine":95,"endColumn":8,"suggestions":"2596"},{"ruleId":"2297","severity":1,"message":"2344","line":99,"column":6,"nodeType":"2299","endLine":99,"endColumn":25,"suggestions":"2597"},{"ruleId":"2287","severity":1,"message":"2590","line":3,"column":8,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2591","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":21,"nodeType":"2310","endLine":24,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":21,"nodeType":"2310","endLine":35,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":16,"column":21,"nodeType":"2310","endLine":22,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":27,"column":21,"nodeType":"2310","endLine":33,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2590","line":3,"column":8,"nodeType":"2289","messageId":"2290","endLine":3,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2591","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":21,"nodeType":"2310","endLine":24,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":21,"nodeType":"2310","endLine":35,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2598"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2599"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":85,"column":9,"nodeType":"2289","messageId":"2290","endLine":85,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":96,"column":6,"nodeType":"2299","endLine":96,"endColumn":8,"suggestions":"2600"},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":25,"suggestions":"2601"},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2602"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2603"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":84,"column":9,"nodeType":"2289","messageId":"2290","endLine":84,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":95,"column":6,"nodeType":"2299","endLine":95,"endColumn":8,"suggestions":"2604"},{"ruleId":"2297","severity":1,"message":"2344","line":99,"column":6,"nodeType":"2299","endLine":99,"endColumn":25,"suggestions":"2605"},{"ruleId":"2287","severity":1,"message":"2606","line":2,"column":8,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2590","line":4,"column":8,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2607","line":6,"column":8,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2591","line":7,"column":8,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":20,"column":21,"nodeType":"2310","endLine":26,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":31,"column":21,"nodeType":"2310","endLine":37,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2608"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2609"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":18,"column":8,"nodeType":"2289","messageId":"2290","endLine":18,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":24,"column":10,"nodeType":"2289","messageId":"2290","endLine":24,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":24,"column":25,"nodeType":"2289","messageId":"2290","endLine":24,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":53,"column":9,"nodeType":"2289","messageId":"2290","endLine":53,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":85,"column":9,"nodeType":"2289","messageId":"2290","endLine":85,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":96,"column":6,"nodeType":"2299","endLine":96,"endColumn":8,"suggestions":"2610"},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":25,"suggestions":"2611"},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":21,"nodeType":"2310","endLine":23,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":21,"nodeType":"2310","endLine":34,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":15,"column":21,"nodeType":"2310","endLine":21,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":26,"column":21,"nodeType":"2310","endLine":32,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":85,"column":9,"nodeType":"2289","messageId":"2290","endLine":85,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":96,"column":6,"nodeType":"2299","endLine":96,"endColumn":8,"suggestions":"2612"},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":25,"suggestions":"2613"},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2614"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2615"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2616"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2617"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2406","line":16,"column":8,"nodeType":"2289","messageId":"2290","endLine":16,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":85,"column":9,"nodeType":"2289","messageId":"2290","endLine":85,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":96,"column":6,"nodeType":"2299","endLine":96,"endColumn":8,"suggestions":"2618"},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":25,"suggestions":"2619"},{"ruleId":"2308","severity":1,"message":"2363","line":16,"column":21,"nodeType":"2310","endLine":22,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":27,"column":21,"nodeType":"2310","endLine":33,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2620"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2621"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":84,"column":9,"nodeType":"2289","messageId":"2290","endLine":84,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":95,"column":6,"nodeType":"2299","endLine":95,"endColumn":8,"suggestions":"2622"},{"ruleId":"2297","severity":1,"message":"2344","line":99,"column":6,"nodeType":"2299","endLine":99,"endColumn":25,"suggestions":"2623"},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":21,"nodeType":"2310","endLine":23,"endColumn":22},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":21,"nodeType":"2310","endLine":34,"endColumn":22},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2624"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2625"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":24,"column":10,"nodeType":"2289","messageId":"2290","endLine":24,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":24,"column":25,"nodeType":"2289","messageId":"2290","endLine":24,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2423","line":53,"column":9,"nodeType":"2289","messageId":"2290","endLine":53,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":85,"column":9,"nodeType":"2289","messageId":"2290","endLine":85,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":96,"column":6,"nodeType":"2299","endLine":96,"endColumn":8,"suggestions":"2626"},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":25,"suggestions":"2627"},{"ruleId":"2287","severity":1,"message":"2628","line":2,"column":8,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2590","line":4,"column":8,"nodeType":"2289","messageId":"2290","endLine":4,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2629","line":6,"column":8,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":19},{"ruleId":"2287","severity":1,"message":"2591","line":7,"column":8,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":19},{"ruleId":"2308","severity":1,"message":"2363","line":20,"column":11,"nodeType":"2310","endLine":26,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":31,"column":11,"nodeType":"2310","endLine":37,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2630"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2631"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2423","line":52,"column":9,"nodeType":"2289","messageId":"2290","endLine":52,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2530","line":89,"column":9,"nodeType":"2289","messageId":"2290","endLine":89,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2344","line":100,"column":6,"nodeType":"2299","endLine":100,"endColumn":8,"suggestions":"2632"},{"ruleId":"2297","severity":1,"message":"2344","line":104,"column":6,"nodeType":"2299","endLine":104,"endColumn":25,"suggestions":"2633"},{"ruleId":"2287","severity":1,"message":"2349","line":1,"column":21,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":29,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":37},{"ruleId":"2287","severity":1,"message":"2525","line":10,"column":3,"nodeType":"2289","messageId":"2290","endLine":10,"endColumn":17},{"ruleId":"2287","severity":1,"message":"2527","line":17,"column":8,"nodeType":"2289","messageId":"2290","endLine":17,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2528","line":23,"column":10,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2529","line":23,"column":25,"nodeType":"2289","messageId":"2290","endLine":23,"endColumn":41},{"ruleId":"2287","severity":1,"message":"2530","line":86,"column":9,"nodeType":"2289","messageId":"2290","endLine":86,"endColumn":20},{"ruleId":"2297","severity":1,"message":"2357","line":97,"column":6,"nodeType":"2299","endLine":97,"endColumn":14,"suggestions":"2634"},{"ruleId":"2297","severity":1,"message":"2344","line":103,"column":6,"nodeType":"2299","endLine":103,"endColumn":25,"suggestions":"2635"},{"ruleId":"2287","severity":1,"message":"2439","line":1,"column":18,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2350","line":1,"column":28,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":36},{"ruleId":"2287","severity":1,"message":"2569","line":1,"column":49,"nodeType":"2289","messageId":"2290","endLine":1,"endColumn":52},{"ruleId":"2287","severity":1,"message":"2454","line":7,"column":10,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":21},{"ruleId":"2287","severity":1,"message":"2570","line":38,"column":11,"nodeType":"2289","messageId":"2290","endLine":38,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2575","line":39,"column":11,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":23},{"ruleId":"2287","severity":1,"message":"2576","line":66,"column":11,"nodeType":"2289","messageId":"2290","endLine":66,"endColumn":28},{"ruleId":"2287","severity":1,"message":"2577","line":71,"column":11,"nodeType":"2289","messageId":"2290","endLine":71,"endColumn":23},{"ruleId":"2297","severity":1,"message":"2571","line":260,"column":8,"nodeType":"2299","endLine":260,"endColumn":21,"suggestions":"2636"},{"ruleId":"2297","severity":1,"message":"2440","line":264,"column":8,"nodeType":"2299","endLine":264,"endColumn":10,"suggestions":"2637"},{"ruleId":"2287","severity":1,"message":"2574","line":270,"column":9,"nodeType":"2289","messageId":"2290","endLine":270,"endColumn":16},{"ruleId":"2287","severity":1,"message":"2580","line":276,"column":9,"nodeType":"2289","messageId":"2290","endLine":276,"endColumn":15},{"ruleId":"2287","severity":1,"message":"2581","line":277,"column":9,"nodeType":"2289","messageId":"2290","endLine":277,"endColumn":20},{"ruleId":"2287","severity":1,"message":"2582","line":278,"column":9,"nodeType":"2289","messageId":"2290","endLine":278,"endColumn":12},{"ruleId":"2324","severity":1,"message":"2325","line":17,"column":40,"nodeType":"2326","messageId":"2327","endLine":17,"endColumn":42},{"ruleId":"2287","severity":1,"message":"2362","line":8,"column":9,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":19,"column":11,"nodeType":"2310","endLine":25,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":30,"column":11,"nodeType":"2310","endLine":36,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2362","line":6,"column":9,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":11,"nodeType":"2310","endLine":23,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":11,"nodeType":"2310","endLine":34,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2638"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2639"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2640"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2641"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2362","line":6,"column":9,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":11,"nodeType":"2310","endLine":23,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":11,"nodeType":"2310","endLine":34,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2642"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2643"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2362","line":7,"column":9,"nodeType":"2289","messageId":"2290","endLine":7,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":18,"column":11,"nodeType":"2310","endLine":24,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":29,"column":11,"nodeType":"2310","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2644"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2645"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2362","line":6,"column":9,"nodeType":"2289","messageId":"2290","endLine":6,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":17,"column":11,"nodeType":"2310","endLine":23,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":28,"column":11,"nodeType":"2310","endLine":34,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2646"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2647"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2648","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2362","line":8,"column":9,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":19,"column":11,"nodeType":"2310","endLine":25,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":30,"column":11,"nodeType":"2310","endLine":36,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2648","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2362","line":8,"column":9,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":19,"column":11,"nodeType":"2310","endLine":25,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":30,"column":11,"nodeType":"2310","endLine":36,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2648","line":5,"column":8,"nodeType":"2289","messageId":"2290","endLine":5,"endColumn":26},{"ruleId":"2287","severity":1,"message":"2362","line":8,"column":9,"nodeType":"2289","messageId":"2290","endLine":8,"endColumn":17},{"ruleId":"2308","severity":1,"message":"2363","line":19,"column":11,"nodeType":"2310","endLine":25,"endColumn":12},{"ruleId":"2308","severity":1,"message":"2363","line":30,"column":11,"nodeType":"2310","endLine":36,"endColumn":12},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2649"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2650"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2651"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2652"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},{"ruleId":"2287","severity":1,"message":"2353","line":2,"column":3,"nodeType":"2289","messageId":"2290","endLine":2,"endColumn":11},{"ruleId":"2287","severity":1,"message":"2394","line":19,"column":8,"nodeType":"2289","messageId":"2290","endLine":19,"endColumn":24},{"ruleId":"2287","severity":1,"message":"2395","line":20,"column":8,"nodeType":"2289","messageId":"2290","endLine":20,"endColumn":27},{"ruleId":"2287","severity":1,"message":"2396","line":35,"column":7,"nodeType":"2289","messageId":"2290","endLine":35,"endColumn":14},{"ruleId":"2287","severity":1,"message":"2397","line":39,"column":7,"nodeType":"2289","messageId":"2290","endLine":39,"endColumn":12},{"ruleId":"2297","severity":1,"message":"2344","line":155,"column":6,"nodeType":"2299","endLine":155,"endColumn":8,"suggestions":"2653"},{"ruleId":"2297","severity":1,"message":"2344","line":159,"column":6,"nodeType":"2299","endLine":159,"endColumn":51,"suggestions":"2654"},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":31,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":33},{"ruleId":"2339","severity":1,"message":"2343","line":391,"column":58,"nodeType":"2341","messageId":"2342","endLine":391,"endColumn":60},{"ruleId":"2322","severity":1,"message":"2323","line":474,"column":23,"nodeType":"2310","endLine":474,"endColumn":72},{"ruleId":"2339","severity":1,"message":"2343","line":497,"column":78,"nodeType":"2341","messageId":"2342","endLine":497,"endColumn":80},{"ruleId":"2339","severity":1,"message":"2343","line":503,"column":79,"nodeType":"2341","messageId":"2342","endLine":503,"endColumn":81},{"ruleId":"2339","severity":1,"message":"2343","line":510,"column":38,"nodeType":"2341","messageId":"2342","endLine":510,"endColumn":40},"no-native-reassign",["2655"],"no-negated-in-lhs",["2656"],"no-unused-vars","'Sidebar' is defined but never used.","Identifier","unusedVar","'getUserFilterList' is defined but never used.","'pinSidebar' is assigned a value but never used.","'setPinSidebar' is assigned a value but never used.","'subMenuList' is assigned a value but never used.","'selectedItems' is assigned a value but never used.","'setSelectedItems' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["2657"],"'groupedMenu' is assigned a value but never used.","'handleMenuChange' is assigned a value but never used.","'connect' is defined but never used.","'setValidator' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'messageAlert'. Either include it or remove the dependency array. You can also do a functional update 'setMessageAlert(m => ...)' if you only need 'messageAlert' in the 'setMessageAlert' call.",["2658"],["2659"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'MainLayout' is defined but never used.",["2660"],["2661"],"'getCategoryList' is defined but never used.","'getCategoryListSuccess' is defined but never used.","'updateProductListPriceSuccess' is defined but never used.","'response' is assigned a value but never used.","'accountEdit' is assigned a value but never used.","'setSelectedMenu' is defined but never used.",["2662"],"'groupBy' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'logo' is defined but never used.","React Hook useEffect has a missing dependency: 'calculateTime'. Either include it or remove the dependency array.",["2663"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'BrowserRouter' is defined but never used.","'GodownBrowse' is defined but never used.","'CcrIndex' is defined but never used.","'CourierIndex' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'getBrowseListData'. Either include it or remove the dependency array.",["2664"],["2665"],["2666"],["2667"],"'Button' is defined but never used.","'MenuItem' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'Checkbox' is defined but never used.",["2668"],["2669"],"'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'handleBodyParam'. Either include it or remove the dependency array.",["2670"],["2671"],["2672"],["2673"],"'dispatch' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'getBrowseUserRight' is defined but never used.","'userRight' is assigned a value but never used.","'SalesCostingBrowse' is defined but never used.","'useDispatch' is defined but never used.","'pathArr' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getDateFilter'. Either include it or remove the dependency array.",["2674"],"React Hook useEffect has missing dependencies: 'from_date', 'to_date', and 'updateDateFilter'. Either include them or remove the dependency array.",["2675"],"'React' is defined but never used.","'loaderImg' is defined but never used.","'DatePicker' is defined but never used.","'Loader' is defined but never used.",["2676"],["2677"],"'handleDateChange' is assigned a value but never used.","'setLoading' is assigned a value but never used.",["2678"],"React Hook useEffect has a missing dependency: 'getSupportTicketData'. Either include it or remove the dependency array.",["2679"],["2680"],["2681"],"'useSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'getTicketById'. Either include it or remove the dependency array.",["2682"],"'showSuccessToast' is defined but never used.","'empList' is assigned a value but never used.","'setEmpList' is assigned a value but never used.",["2683"],["2684"],"'CustomPagination' is defined but never used.","'CustomNoRowsOverlay' is defined but never used.","'user_id' is assigned a value but never used.","'label' is assigned a value but never used.",["2685"],["2686"],"React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array.",["2687"],"'setTempVerified' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'params', and 'productMasterFilter'. Either include them or remove the dependency array.",["2688"],["2689"],"'moment' is defined but never used.","'selectedComboMLFBId' is defined but never used.",["2690"],["2691"],"'setDataLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addDropDownList' and 'dropdownList'. Either include them or remove the dependency array. You can also do a functional update 'setDropDownList(d => ...)' if you only need 'dropdownList' in the 'setDropDownList' call.",["2692"],["2693"],["2694"],"'selectedMaterialData' is assigned a value but never used.","'setSelectedMaterialData' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.",["2695"],"no-redeclare","'element' is already defined.","redeclared","'history' is assigned a value but never used.","'handleBodyParam' is assigned a value but never used.",["2696"],["2697"],"React Hook useEffect has a missing dependency: 'getEntryNo'. Either include it or remove the dependency array.",["2698"],"React Hook useEffect has a missing dependency: 'selectedPackingList'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setItemListBody' needs the current value of 'selectedPackingList'.",["2699"],"'StyledTableCell' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'rowCount' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'apiBody', 'isNode', 'params', and 'url'. Either include them or remove the dependency array.",["2700"],"React Hook useEffect has missing dependencies: 'apiBody', 'isNode', and 'url'. Either include them or remove the dependency array.",["2701"],"'formatMs' is defined but never used.","React Hook useEffect has a missing dependency: 'getDCNo'. Either include it or remove the dependency array.",["2702"],"'Paper' is defined but never used.","'Autocomplete' is defined but never used.",["2703"],["2704"],"'react' is defined but never used.","'panel' is assigned a value but never used.","'clearSelectedGodownId' is defined but never used.","'getAccountMasterFiltersList' is defined but never used.","'searchAccountMasterData' is defined but never used.",["2705"],["2706"],"'showErrorToast' is defined but never used.","'SimpleTable' is defined but never used.","'selectedGodownId' is defined but never used.","React Hook useEffect has a missing dependency: 'insertParams'. Either include it or remove the dependency array. You can also do a functional update 'setInsertParams(i => ...)' if you only need 'insertParams' in the 'setInsertParams' call.",["2707"],["2708"],["2709"],"'ifStatement' is defined but never used.",["2710"],["2711"],["2712"],["2713"],["2714"],"React Hook useEffect has missing dependencies: 'insertParams' and 'selectedParams'. Either include them or remove the dependency array. You can also do a functional update 'setSelectedParams(s => ...)' if you only need 'selectedParams' in the 'setSelectedParams' call.",["2715"],"'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'regionList' is assigned a value but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'buttonLoader' is defined but never used.","'Tab' is defined but never used.","'Tabs' is defined but never used.","'editData' is assigned a value but never used.","'previewData' is assigned a value but never used.","'selectedLedgerId' is defined but never used.",["2716"],"'Alert' is defined but never used.",["2717"],["2718"],"'selectedCostingTabsId' is defined but never used.",["2719"],["2720"],["2721"],["2722"],["2723"],"'selectedFinanceId' is defined but never used.",["2724"],"'selectedTypeId' is defined but never used.",["2725"],["2726"],["2727"],["2728"],["2729"],"'selectedSupplyItemId' is defined but never used.",["2730"],"'selectedDepartmentId' is defined but never used.",["2731"],["2732"],["2733"],["2734"],["2735"],"'selectedSiemensId' is defined but never used.",["2736"],"'selectedDesignationId' is defined but never used.",["2737"],"'selectedRegionId' is defined but never used.",["2738"],["2739"],["2740"],"'selectedRatingId' is defined but never used.",["2741"],["2742"],["2743"],"'setMessage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.editData'. Either include it or remove the dependency array. If 'setGroupValues' needs the current value of 'props.editData', you can also switch to useReducer instead of useState and read 'props.editData' in the reducer.",["2744"],["2745"],["2746"],"'currenyMasking' is defined but never used.","'DateFilter' is defined but never used.","'ActionButtons' is defined but never used.","'amountFigures' is assigned a value but never used.","'setAmountFigures' is assigned a value but never used.","'handleRowId' is assigned a value but never used.",["2747"],"React Hook useEffect has a missing dependency: 'props.editData'. Either include it or remove the dependency array. If 'setFormValues' needs the current value of 'props.editData', you can also switch to useReducer instead of useState and read 'props.editData' in the reducer.",["2748"],"'selectedGGId' is defined but never used.",["2749"],["2750"],["2751"],["2752"],"'selectedUnitId' is defined but never used.",["2753"],["2754"],["2755"],"'selectedGroupId' is defined but never used.",["2756"],["2757"],["2758"],"'selectedItemId' is defined but never used.",["2759"],"'selectedEnqStatusId' is defined but never used.",["2760"],["2761"],["2762"],["2763"],["2764"],"'selectedPriorityId' is defined but never used.",["2765"],["2766"],["2767"],"'selectedReferenceId' is defined but never used.",["2768"],["2769"],["2770"],["2771"],["2772"],"'selectedCategoryId' is defined but never used.",["2773"],["2774"],["2775"],"'Fab' is defined but never used.","'toggleDIList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAccountContactList'. Either include it or remove the dependency array.",["2776"],["2777"],"'po_date' is assigned a value but never used.","'submitAddBox' is assigned a value but never used.","'handleDeleteTable' is assigned a value but never used.","'diListColumn' is assigned a value but never used.",["2778"],["2779"],"'box_no' is assigned a value but never used.","'description' is assigned a value but never used.","'qty' is assigned a value but never used.",["2780"],["2781"],"'challanType' is assigned a value but never used.",["2782"],["2783"],["2784"],["2785"],"'MrnAddDc' is defined but never used.","'MrnBrowseDc' is defined but never used.",["2655"],["2656"],["2786"],["2787"],["2788"],["2789"],["2790"],["2791"],["2792"],["2793"],["2794"],["2795"],["2796"],["2797"],"'CcrAdd' is defined but never used.","'CcrBrowse' is defined but never used.",["2798"],["2799"],["2800"],["2801"],["2802"],["2803"],["2804"],["2805"],["2806"],["2807"],["2808"],["2809"],["2810"],["2811"],["2812"],["2813"],["2814"],["2815"],["2816"],["2817"],"'RgpAdd' is defined but never used.","'RgpBrowseDc' is defined but never used.",["2818"],["2819"],["2820"],["2821"],["2822"],["2823"],["2824"],["2825"],["2826"],["2827"],["2828"],["2829"],["2830"],["2831"],["2832"],["2833"],["2834"],["2835"],"'SalesEnquiryBrowse' is defined but never used.",["2836"],["2837"],["2838"],["2839"],["2840"],["2841"],"no-global-assign","no-unsafe-negation",{"desc":"2842","fix":"2843"},{"desc":"2844","fix":"2845"},{"desc":"2846","fix":"2847"},{"desc":"2848","fix":"2849"},{"desc":"2850","fix":"2851"},{"desc":"2842","fix":"2852"},{"desc":"2853","fix":"2854"},{"desc":"2855","fix":"2856"},{"desc":"2857","fix":"2858"},{"desc":"2855","fix":"2859"},{"desc":"2860","fix":"2861"},{"desc":"2855","fix":"2862"},{"desc":"2860","fix":"2863"},{"desc":"2864","fix":"2865"},{"desc":"2866","fix":"2867"},{"desc":"2855","fix":"2868"},{"desc":"2857","fix":"2869"},{"desc":"2870","fix":"2871"},{"desc":"2872","fix":"2873"},{"desc":"2855","fix":"2874"},{"desc":"2866","fix":"2875"},{"desc":"2842","fix":"2876"},{"desc":"2877","fix":"2878"},{"desc":"2855","fix":"2879"},{"desc":"2866","fix":"2880"},{"desc":"2881","fix":"2882"},{"desc":"2855","fix":"2883"},{"desc":"2866","fix":"2884"},{"desc":"2855","fix":"2885"},{"desc":"2886","fix":"2887"},{"desc":"2888","fix":"2889"},{"desc":"2890","fix":"2891"},{"desc":"2892","fix":"2893"},{"desc":"2855","fix":"2894"},{"desc":"2857","fix":"2895"},{"desc":"2896","fix":"2897"},{"desc":"2855","fix":"2898"},{"desc":"2899","fix":"2900"},{"desc":"2842","fix":"2901"},{"desc":"2855","fix":"2902"},{"desc":"2866","fix":"2903"},{"desc":"2904","fix":"2905"},{"desc":"2906","fix":"2907"},{"desc":"2908","fix":"2909"},{"desc":"2908","fix":"2910"},{"desc":"2911","fix":"2912"},{"desc":"2855","fix":"2913"},{"desc":"2860","fix":"2914"},{"desc":"2855","fix":"2915"},{"desc":"2916","fix":"2917"},{"desc":"2918","fix":"2919"},{"desc":"2855","fix":"2920"},{"desc":"2857","fix":"2921"},{"desc":"2888","fix":"2922"},{"desc":"2855","fix":"2923"},{"desc":"2886","fix":"2924"},{"desc":"2855","fix":"2925"},{"desc":"2857","fix":"2926"},{"desc":"2927","fix":"2928"},{"desc":"2918","fix":"2929"},{"desc":"2855","fix":"2930"},{"desc":"2857","fix":"2931"},{"desc":"2918","fix":"2932"},{"desc":"2855","fix":"2933"},{"desc":"2857","fix":"2934"},{"desc":"2855","fix":"2935"},{"desc":"2857","fix":"2936"},{"desc":"2918","fix":"2937"},{"desc":"2918","fix":"2938"},{"desc":"2855","fix":"2939"},{"desc":"2857","fix":"2940"},{"desc":"2855","fix":"2941"},{"desc":"2857","fix":"2942"},{"desc":"2918","fix":"2943"},{"desc":"2918","fix":"2944"},{"desc":"2855","fix":"2945"},{"desc":"2857","fix":"2946"},{"desc":"2855","fix":"2947"},{"desc":"2857","fix":"2948"},{"desc":"2918","fix":"2949"},{"desc":"2918","fix":"2950"},{"desc":"2918","fix":"2951"},{"desc":"2855","fix":"2952"},{"desc":"2857","fix":"2953"},{"desc":"2918","fix":"2954"},{"desc":"2855","fix":"2955"},{"desc":"2857","fix":"2956"},{"desc":"2957","fix":"2958"},{"desc":"2855","fix":"2959"},{"desc":"2857","fix":"2960"},{"desc":"2857","fix":"2961"},{"desc":"2957","fix":"2962"},{"desc":"2918","fix":"2963"},{"desc":"2857","fix":"2964"},{"desc":"2855","fix":"2965"},{"desc":"2857","fix":"2966"},{"desc":"2918","fix":"2967"},{"desc":"2855","fix":"2968"},{"desc":"2857","fix":"2969"},{"desc":"2918","fix":"2970"},{"desc":"2855","fix":"2971"},{"desc":"2857","fix":"2972"},{"desc":"2918","fix":"2973"},{"desc":"2918","fix":"2974"},{"desc":"2855","fix":"2975"},{"desc":"2857","fix":"2976"},{"desc":"2855","fix":"2977"},{"desc":"2857","fix":"2978"},{"desc":"2918","fix":"2979"},{"desc":"2855","fix":"2980"},{"desc":"2857","fix":"2981"},{"desc":"2918","fix":"2982"},{"desc":"2855","fix":"2983"},{"desc":"2857","fix":"2984"},{"desc":"2855","fix":"2985"},{"desc":"2857","fix":"2986"},{"desc":"2918","fix":"2987"},{"desc":"2855","fix":"2988"},{"desc":"2866","fix":"2989"},{"desc":"2990","fix":"2991"},{"desc":"2911","fix":"2992"},{"desc":"2990","fix":"2993"},{"desc":"2911","fix":"2994"},{"desc":"2855","fix":"2995"},{"desc":"2866","fix":"2996"},{"desc":"2990","fix":"2997"},{"desc":"2911","fix":"2998"},{"desc":"2855","fix":"2999"},{"desc":"2866","fix":"3000"},{"desc":"2990","fix":"3001"},{"desc":"2911","fix":"3002"},{"desc":"2855","fix":"3003"},{"desc":"2866","fix":"3004"},{"desc":"2990","fix":"3005"},{"desc":"2911","fix":"3006"},{"desc":"2855","fix":"3007"},{"desc":"2866","fix":"3008"},{"desc":"2990","fix":"3009"},{"desc":"2911","fix":"3010"},{"desc":"2855","fix":"3011"},{"desc":"2866","fix":"3012"},{"desc":"2990","fix":"3013"},{"desc":"2911","fix":"3014"},{"desc":"2855","fix":"3015"},{"desc":"2866","fix":"3016"},{"desc":"2855","fix":"3017"},{"desc":"2866","fix":"3018"},{"desc":"2990","fix":"3019"},{"desc":"2911","fix":"3020"},{"desc":"2990","fix":"3021"},{"desc":"2911","fix":"3022"},{"desc":"2855","fix":"3023"},{"desc":"2866","fix":"3024"},{"desc":"2990","fix":"3025"},{"desc":"2911","fix":"3026"},{"desc":"2855","fix":"3027"},{"desc":"2866","fix":"3028"},{"desc":"2990","fix":"3029"},{"desc":"2911","fix":"3030"},{"desc":"2855","fix":"3031"},{"desc":"2866","fix":"3032"},{"desc":"2990","fix":"3033"},{"desc":"2911","fix":"3034"},{"desc":"2855","fix":"3035"},{"desc":"2866","fix":"3036"},{"desc":"2864","fix":"3037"},{"desc":"2866","fix":"3038"},{"desc":"2990","fix":"3039"},{"desc":"2911","fix":"3040"},{"desc":"2855","fix":"3041"},{"desc":"2886","fix":"3042"},{"desc":"2855","fix":"3043"},{"desc":"2886","fix":"3044"},{"desc":"2855","fix":"3045"},{"desc":"2886","fix":"3046"},{"desc":"2855","fix":"3047"},{"desc":"2886","fix":"3048"},{"desc":"2855","fix":"3049"},{"desc":"2886","fix":"3050"},{"desc":"2855","fix":"3051"},{"desc":"2886","fix":"3052"},{"desc":"2855","fix":"3053"},{"desc":"2886","fix":"3054"},{"desc":"2855","fix":"3055"},{"desc":"2886","fix":"3056"},"Update the dependencies array to be: [dispatch]",{"range":"3057","text":"3058"},"Update the dependencies array to be: [checkAuthCredResponse, messageAlert]",{"range":"3059","text":"3060"},"Update the dependencies array to be: [checkAuthOtpResponse, messageAlert]",{"range":"3061","text":"3062"},"Update the dependencies array to be: [dispatch, isAuthorisedByUrl]",{"range":"3063","text":"3064"},"Update the dependencies array to be: [dispatch, getDecryptUserDetailsResponse]",{"range":"3065","text":"3066"},{"range":"3067","text":"3058"},"Update the dependencies array to be: [calculateTime]",{"range":"3068","text":"3069"},"Update the dependencies array to be: [getBrowseListData]",{"range":"3070","text":"3071"},"Update the dependencies array to be: [getBrowseListData, params]",{"range":"3072","text":"3073"},{"range":"3074","text":"3071"},"Update the dependencies array to be: [bodyParam, getBrowseListData]",{"range":"3075","text":"3076"},{"range":"3077","text":"3071"},{"range":"3078","text":"3076"},"Update the dependencies array to be: [handleBodyParam, slType]",{"range":"3079","text":"3080"},"Update the dependencies array to be: [params, bodyParam, getBrowseListData]",{"range":"3081","text":"3082"},{"range":"3083","text":"3071"},{"range":"3084","text":"3073"},"Update the dependencies array to be: [getDateFilter]",{"range":"3085","text":"3086"},"Update the dependencies array to be: [dateUpdate, from_date, to_date, updateDateFilter]",{"range":"3087","text":"3088"},{"range":"3089","text":"3071"},{"range":"3090","text":"3082"},{"range":"3091","text":"3058"},"Update the dependencies array to be: [getSupportTicketData]",{"range":"3092","text":"3093"},{"range":"3094","text":"3071"},{"range":"3095","text":"3082"},"Update the dependencies array to be: [getTicketById, previewId]",{"range":"3096","text":"3097"},{"range":"3098","text":"3071"},{"range":"3099","text":"3082"},{"range":"3100","text":"3071"},"Update the dependencies array to be: [params, getuserRightListResponse, bodyParam, getBrowseListData]",{"range":"3101","text":"3102"},"Update the dependencies array to be: [formData, selectedIdResponse]",{"range":"3103","text":"3104"},"Update the dependencies array to be: [dispatch, params, productMasterFilter]",{"range":"3105","text":"3106"},"Update the dependencies array to be: [productMasterFilter, params, dispatch]",{"range":"3107","text":"3108"},{"range":"3109","text":"3071"},{"range":"3110","text":"3073"},"Update the dependencies array to be: [addDropDownList, dropdownList, selectedIdResponse]",{"range":"3111","text":"3112"},{"range":"3113","text":"3071"},"Update the dependencies array to be: [params, filter, getBrowseListData]",{"range":"3114","text":"3115"},{"range":"3116","text":"3058"},{"range":"3117","text":"3071"},{"range":"3118","text":"3082"},"Update the dependencies array to be: [getEntryNo]",{"range":"3119","text":"3120"},"Update the dependencies array to be: [boxList, selectedPackingList]",{"range":"3121","text":"3122"},"Update the dependencies array to be: [apiBody, isNode, params, url]",{"range":"3123","text":"3124"},{"range":"3125","text":"3124"},"Update the dependencies array to be: [getDCNo]",{"range":"3126","text":"3127"},{"range":"3128","text":"3071"},{"range":"3129","text":"3076"},{"range":"3130","text":"3071"},"Update the dependencies array to be: [params, accountMasterFilter, getBrowseListData]",{"range":"3131","text":"3132"},"Update the dependencies array to be: [insertParams, selectedIdResponse]",{"range":"3133","text":"3134"},{"range":"3135","text":"3071"},{"range":"3136","text":"3073"},{"range":"3137","text":"3104"},{"range":"3138","text":"3071"},{"range":"3139","text":"3102"},{"range":"3140","text":"3071"},{"range":"3141","text":"3073"},"Update the dependencies array to be: [selectedComboMLFBIdResponse, mlfbProductList, selectedParams, insertParams]",{"range":"3142","text":"3143"},{"range":"3144","text":"3134"},{"range":"3145","text":"3071"},{"range":"3146","text":"3073"},{"range":"3147","text":"3134"},{"range":"3148","text":"3071"},{"range":"3149","text":"3073"},{"range":"3150","text":"3071"},{"range":"3151","text":"3073"},{"range":"3152","text":"3134"},{"range":"3153","text":"3134"},{"range":"3154","text":"3071"},{"range":"3155","text":"3073"},{"range":"3156","text":"3071"},{"range":"3157","text":"3073"},{"range":"3158","text":"3134"},{"range":"3159","text":"3134"},{"range":"3160","text":"3071"},{"range":"3161","text":"3073"},{"range":"3162","text":"3071"},{"range":"3163","text":"3073"},{"range":"3164","text":"3134"},{"range":"3165","text":"3134"},{"range":"3166","text":"3134"},{"range":"3167","text":"3071"},{"range":"3168","text":"3073"},{"range":"3169","text":"3134"},{"range":"3170","text":"3071"},{"range":"3171","text":"3073"},"Update the dependencies array to be: [props.editData]",{"range":"3172","text":"3173"},{"range":"3174","text":"3071"},{"range":"3175","text":"3073"},{"range":"3176","text":"3073"},{"range":"3177","text":"3173"},{"range":"3178","text":"3134"},{"range":"3179","text":"3073"},{"range":"3180","text":"3071"},{"range":"3181","text":"3073"},{"range":"3182","text":"3134"},{"range":"3183","text":"3071"},{"range":"3184","text":"3073"},{"range":"3185","text":"3134"},{"range":"3186","text":"3071"},{"range":"3187","text":"3073"},{"range":"3188","text":"3134"},{"range":"3189","text":"3134"},{"range":"3190","text":"3071"},{"range":"3191","text":"3073"},{"range":"3192","text":"3071"},{"range":"3193","text":"3073"},{"range":"3194","text":"3134"},{"range":"3195","text":"3071"},{"range":"3196","text":"3073"},{"range":"3197","text":"3134"},{"range":"3198","text":"3071"},{"range":"3199","text":"3073"},{"range":"3200","text":"3071"},{"range":"3201","text":"3073"},{"range":"3202","text":"3134"},{"range":"3203","text":"3071"},{"range":"3204","text":"3082"},"Update the dependencies array to be: [contactlist, getAccountContactList]",{"range":"3205","text":"3206"},{"range":"3207","text":"3127"},{"range":"3208","text":"3206"},{"range":"3209","text":"3127"},{"range":"3210","text":"3071"},{"range":"3211","text":"3082"},{"range":"3212","text":"3206"},{"range":"3213","text":"3127"},{"range":"3214","text":"3071"},{"range":"3215","text":"3082"},{"range":"3216","text":"3206"},{"range":"3217","text":"3127"},{"range":"3218","text":"3071"},{"range":"3219","text":"3082"},{"range":"3220","text":"3206"},{"range":"3221","text":"3127"},{"range":"3222","text":"3071"},{"range":"3223","text":"3082"},{"range":"3224","text":"3206"},{"range":"3225","text":"3127"},{"range":"3226","text":"3071"},{"range":"3227","text":"3082"},{"range":"3228","text":"3206"},{"range":"3229","text":"3127"},{"range":"3230","text":"3071"},{"range":"3231","text":"3082"},{"range":"3232","text":"3071"},{"range":"3233","text":"3082"},{"range":"3234","text":"3206"},{"range":"3235","text":"3127"},{"range":"3236","text":"3206"},{"range":"3237","text":"3127"},{"range":"3238","text":"3071"},{"range":"3239","text":"3082"},{"range":"3240","text":"3206"},{"range":"3241","text":"3127"},{"range":"3242","text":"3071"},{"range":"3243","text":"3082"},{"range":"3244","text":"3206"},{"range":"3245","text":"3127"},{"range":"3246","text":"3071"},{"range":"3247","text":"3082"},{"range":"3248","text":"3206"},{"range":"3249","text":"3127"},{"range":"3250","text":"3071"},{"range":"3251","text":"3082"},{"range":"3252","text":"3080"},{"range":"3253","text":"3082"},{"range":"3254","text":"3206"},{"range":"3255","text":"3127"},{"range":"3256","text":"3071"},{"range":"3257","text":"3102"},{"range":"3258","text":"3071"},{"range":"3259","text":"3102"},{"range":"3260","text":"3071"},{"range":"3261","text":"3102"},{"range":"3262","text":"3071"},{"range":"3263","text":"3102"},{"range":"3264","text":"3071"},{"range":"3265","text":"3102"},{"range":"3266","text":"3071"},{"range":"3267","text":"3102"},{"range":"3268","text":"3071"},{"range":"3269","text":"3102"},{"range":"3270","text":"3071"},{"range":"3271","text":"3102"},[1110,1112],"[dispatch]",[2227,2250],"[checkAuthCredResponse, messageAlert]",[3106,3128],"[checkAuthOtpResponse, messageAlert]",[861,880],"[dispatch, isAuthorisedByUrl]",[1196,1227],"[dispatch, getDecryptUserDetailsResponse]",[4260,4262],[1712,1714],"[calculateTime]",[2531,2533],"[getBrowseListData]",[2587,2595],"[getBrowseListData, params]",[1842,1844],[1898,1909],"[bodyParam, getBrowseListData]",[1847,1849],[1903,1914],[2613,2621],"[handleBodyParam, slType]",[2679,2698],"[params, bodyParam, getBrowseListData]",[1918,1920],[1974,1982],[1929,1931],"[getDateFilter]",[2031,2043],"[dateUpdate, from_date, to_date, updateDateFilter]",[3316,3318],[3372,3391],[1052,1054],[2707,2709],"[getSupportTicketData]",[2135,2137],[2191,2210],[2628,2639],"[getTicketById, previewId]",[2276,2278],[2332,2351],[4321,4323],[4377,4422],"[params, getuserRightListResponse, bodyParam, getBrowseListData]",[2954,2974],"[formData, selectedIdResponse]",[3492,3494],"[dispatch, params, productMasterFilter]",[3592,3621],"[productMasterFilter, params, dispatch]",[1985,1987],[2041,2049],[2757,2777],"[addDropDownList, dropdownList, selectedIdResponse]",[1915,1917],[1975,1991],"[params, filter, getBrowseListData]",[5696,5698],[2135,2137],[2191,2210],[1192,1194],"[getEntryNo]",[1671,1680],"[boxList, selectedPackingList]",[4206,4208],"[apiBody, isNode, params, url]",[4717,4725],[3023,3025],"[getDCNo]",[1348,1350],[1404,1415],[7016,7018],[7892,7921],"[params, accountMasterFilter, getBrowseListData]",[1700,1720],"[insertParams, selectedIdResponse]",[1992,1994],[2048,2056],[2176,2196],[2865,2867],[2921,2966],[1953,1955],[2009,2017],[2391,2437],"[selectedComboMLFBIdResponse, mlfbProductList, selectedParams, insertParams]",[1935,1955],[2100,2102],[2160,2168],[1983,2003],[2123,2125],[2183,2191],[2106,2108],[2166,2174],[1947,1967],[1929,1949],[2089,2091],[2149,2157],[2093,2095],[2153,2161],[1922,1942],[1976,1996],[2117,2119],[2177,2185],[2099,2101],[2159,2167],[1894,1914],[1988,2008],[1928,1948],[2123,2125],[2183,2191],[1928,1948],[2099,2101],[2159,2167],[1371,1373],"[props.editData]",[2093,2095],[2153,2161],[2894,2902],[1694,1696],[1955,1975],[2882,2890],[2076,2078],[2136,2144],[1888,1908],[2088,2090],[2148,2156],[1939,1959],[2094,2096],[2154,2162],[1911,1931],[1945,1965],[2088,2090],[2148,2156],[2116,2118],[2176,2184],[1977,1997],[2123,2125],[2183,2191],[1935,1955],[2106,2108],[2166,2174],[2107,2109],[2167,2175],[2012,2032],[2586,2588],[2646,2665],[7715,7728],"[contactlist, getAccountContactList]",[7776,7778],[9367,9380],[9436,9438],[2497,2499],[2557,2576],[9350,9363],[9419,9421],[2487,2489],[2547,2566],[9354,9367],[9423,9425],[2489,2491],[2549,2568],[9354,9367],[9423,9425],[2503,2505],[2563,2582],[9350,9363],[9419,9421],[2484,2486],[2544,2563],[9362,9375],[9431,9433],[2584,2586],[2644,2663],[2554,2556],[2614,2633],[9366,9379],[9435,9437],[9370,9383],[9439,9441],[2561,2563],[2621,2640],[9366,9379],[9435,9437],[2511,2513],[2571,2590],[9376,9389],[9445,9447],[2508,2510],[2568,2587],[9360,9373],[9429,9431],[2664,2666],[2724,2743],[2475,2483],[2550,2569],[9361,9374],[9430,9432],[4266,4268],[4322,4367],[4262,4264],[4318,4363],[4266,4268],[4322,4367],[4262,4264],[4318,4363],[4281,4283],[4337,4382],[4282,4284],[4338,4383],[4285,4287],[4341,4386],[4294,4296],[4350,4395]]