{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { AccountMasterController } from \"../../controller/Masters/account.controller\";\nimport { getAccountMasterFiltersList, getAccountMasterFiltersListSuccess, previewSelectedAccount, previewSelectedAccountSuccess, searchAccountMasterData, searchAccountMasterDataSuccess, setAccountHide, setAccountVerified } from '../../actions/masters/account.action';\nfunction* searchAccountMasterSaga(action) {\n  try {\n    const browseAccountMaster = yield AccountMasterController.browseAccountData(action.payload.filters, action.payload.params);\n    yield put(searchAccountMasterDataSuccess(browseAccountMaster));\n  } catch (error) {\n    yield null;\n    yield put(searchAccountMasterDataSuccess(error));\n  }\n}\nfunction* getAccountFilterSaga(action) {\n  try {\n    const filterList = yield AccountMasterController.getAccountMasterFilters();\n    yield put(getAccountMasterFiltersListSuccess(filterList));\n  } catch (error) {\n    yield null;\n    yield put(getAccountMasterFiltersListSuccess(error));\n  }\n}\nfunction* previewSelectedAccountSaga(action) {\n  try {\n    const accountDetails = yield AccountMasterController.getSelectedAccountDetails(action.payload);\n    yield put(previewSelectedAccountSuccess(accountDetails));\n  } catch (error) {\n    yield null;\n    yield put(previewSelectedAccountSuccess(error));\n  }\n}\nfunction* setAccountHideSaga(action) {\n  try {\n    const accountEdit = yield AccountMasterController.accountHideUpdate(action.payload);\n  } catch (error) {\n    yield null;\n    yield put(previewSelectedAccountSuccess(error));\n  }\n}\nfunction* setAccountVerifiedSaga(action) {\n  try {\n    const accountEdit = yield AccountMasterController.updateAccountVerified(action.payload);\n    if (!accountEdit.valid) {\n      alert(\"something went wrong\");\n    }\n  } catch (error) {\n    yield null;\n    yield put(previewSelectedAccountSuccess(error));\n  }\n}\nexport default function* AccountMasterSaga() {\n  try {\n    yield takeLatest(searchAccountMasterData, searchAccountMasterSaga);\n    yield takeLatest(getAccountMasterFiltersList, getAccountFilterSaga);\n    yield takeLatest(previewSelectedAccount, previewSelectedAccountSaga);\n    yield takeLatest(setAccountHide, setAccountHideSaga);\n    yield takeLatest(setAccountVerified, setAccountVerifiedSaga);\n  } catch (e) {\n    yield null;\n  }\n}\n_c = AccountMasterSaga;\nvar _c;\n$RefreshReg$(_c, \"AccountMasterSaga\");","map":{"version":3,"names":["put","takeLatest","AccountMasterController","getAccountMasterFiltersList","getAccountMasterFiltersListSuccess","previewSelectedAccount","previewSelectedAccountSuccess","searchAccountMasterData","searchAccountMasterDataSuccess","setAccountHide","setAccountVerified","searchAccountMasterSaga","action","browseAccountMaster","browseAccountData","payload","filters","params","error","getAccountFilterSaga","filterList","getAccountMasterFilters","previewSelectedAccountSaga","accountDetails","getSelectedAccountDetails","setAccountHideSaga","accountEdit","accountHideUpdate","setAccountVerifiedSaga","updateAccountVerified","valid","alert","AccountMasterSaga","e"],"sources":["F:/React code/diagnostic/src/_redux/middleware/Masters/account.saga.js"],"sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { AccountMasterController } from \"../../controller/Masters/account.controller\";\r\nimport { getAccountMasterFiltersList, getAccountMasterFiltersListSuccess, previewSelectedAccount, previewSelectedAccountSuccess, searchAccountMasterData, searchAccountMasterDataSuccess, setAccountHide, setAccountVerified } from '../../actions/masters/account.action';\r\nfunction* searchAccountMasterSaga (action) {\r\n    try {   \r\n        const browseAccountMaster = yield AccountMasterController.browseAccountData(action.payload.filters, action.payload.params);\r\n        yield put(searchAccountMasterDataSuccess(browseAccountMaster));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(searchAccountMasterDataSuccess(error));\r\n    }\r\n}\r\nfunction* getAccountFilterSaga (action) {\r\n    try {   \r\n        const filterList = yield AccountMasterController.getAccountMasterFilters();\r\n        yield put(getAccountMasterFiltersListSuccess(filterList));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getAccountMasterFiltersListSuccess(error));\r\n    }\r\n}\r\nfunction* previewSelectedAccountSaga (action) {\r\n    try {   \r\n        const accountDetails = yield AccountMasterController.getSelectedAccountDetails(action.payload);\r\n        yield put(previewSelectedAccountSuccess(accountDetails));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\nfunction* setAccountHideSaga (action) {\r\n    try {   \r\n        const accountEdit = yield AccountMasterController.accountHideUpdate(action.payload);\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\nfunction* setAccountVerifiedSaga (action) {\r\n    try {   \r\n        const accountEdit = yield AccountMasterController.updateAccountVerified(action.payload);\r\n        if(!accountEdit.valid){\r\n            alert(\"something went wrong\");\r\n        }\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(previewSelectedAccountSuccess(error));\r\n    }\r\n}\r\nexport default function* AccountMasterSaga () {\r\n    try {\r\n        yield takeLatest(searchAccountMasterData, searchAccountMasterSaga);\r\n        yield takeLatest(getAccountMasterFiltersList, getAccountFilterSaga);\r\n        yield takeLatest(previewSelectedAccount, previewSelectedAccountSaga);\r\n        yield takeLatest(setAccountHide, setAccountHideSaga);\r\n        yield takeLatest(setAccountVerified, setAccountVerifiedSaga);\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AACpD,SAASC,uBAAuB,QAAQ,6CAA6C;AACrF,SAASC,2BAA2B,EAAEC,kCAAkC,EAAEC,sBAAsB,EAAEC,6BAA6B,EAAEC,uBAAuB,EAAEC,8BAA8B,EAAEC,cAAc,EAAEC,kBAAkB,QAAQ,sCAAsC;AAC1Q,UAAUC,uBAAuB,CAAEC,MAAM,EAAE;EACvC,IAAI;IACA,MAAMC,mBAAmB,GAAG,MAAMX,uBAAuB,CAACY,iBAAiB,CAACF,MAAM,CAACG,OAAO,CAACC,OAAO,EAAEJ,MAAM,CAACG,OAAO,CAACE,MAAM,CAAC;IAC1H,MAAMjB,GAAG,CAACQ,8BAA8B,CAACK,mBAAmB,CAAC,CAAC;EAClE,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMlB,GAAG,CAACQ,8BAA8B,CAACU,KAAK,CAAC,CAAC;EACpD;AACJ;AACA,UAAUC,oBAAoB,CAAEP,MAAM,EAAE;EACpC,IAAI;IACA,MAAMQ,UAAU,GAAG,MAAMlB,uBAAuB,CAACmB,uBAAuB,EAAE;IAC1E,MAAMrB,GAAG,CAACI,kCAAkC,CAACgB,UAAU,CAAC,CAAC;EAC7D,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMlB,GAAG,CAACI,kCAAkC,CAACc,KAAK,CAAC,CAAC;EACxD;AACJ;AACA,UAAUI,0BAA0B,CAAEV,MAAM,EAAE;EAC1C,IAAI;IACA,MAAMW,cAAc,GAAG,MAAMrB,uBAAuB,CAACsB,yBAAyB,CAACZ,MAAM,CAACG,OAAO,CAAC;IAC9F,MAAMf,GAAG,CAACM,6BAA6B,CAACiB,cAAc,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOL,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMlB,GAAG,CAACM,6BAA6B,CAACY,KAAK,CAAC,CAAC;EACnD;AACJ;AACA,UAAUO,kBAAkB,CAAEb,MAAM,EAAE;EAClC,IAAI;IACA,MAAMc,WAAW,GAAG,MAAMxB,uBAAuB,CAACyB,iBAAiB,CAACf,MAAM,CAACG,OAAO,CAAC;EACvF,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMlB,GAAG,CAACM,6BAA6B,CAACY,KAAK,CAAC,CAAC;EACnD;AACJ;AACA,UAAUU,sBAAsB,CAAEhB,MAAM,EAAE;EACtC,IAAI;IACA,MAAMc,WAAW,GAAG,MAAMxB,uBAAuB,CAAC2B,qBAAqB,CAACjB,MAAM,CAACG,OAAO,CAAC;IACvF,IAAG,CAACW,WAAW,CAACI,KAAK,EAAC;MAClBC,KAAK,CAAC,sBAAsB,CAAC;IACjC;EACJ,CAAC,CAAC,OAAOb,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMlB,GAAG,CAACM,6BAA6B,CAACY,KAAK,CAAC,CAAC;EACnD;AACJ;AACA,eAAe,UAAUc,iBAAiB,GAAI;EAC1C,IAAI;IACA,MAAM/B,UAAU,CAACM,uBAAuB,EAAEI,uBAAuB,CAAC;IAClE,MAAMV,UAAU,CAACE,2BAA2B,EAAEgB,oBAAoB,CAAC;IACnE,MAAMlB,UAAU,CAACI,sBAAsB,EAAEiB,0BAA0B,CAAC;IACpE,MAAMrB,UAAU,CAACQ,cAAc,EAAEgB,kBAAkB,CAAC;IACpD,MAAMxB,UAAU,CAACS,kBAAkB,EAAEkB,sBAAsB,CAAC;EAChE,CAAC,CACD,OAAMK,CAAC,EAAC;IACJ,MAAM,IAAI;EACd;AACJ;AAAC,KAXwBD,iBAAiB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}