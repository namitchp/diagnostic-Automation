{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { getCategoryList, getCategoryListSuccess, getGGNameList, getGGNameListSuccess, getLPRefList, getLPRefListSuccess, getProductListBrowse, getProductListBrowseSuccess, updateProductListPrice, updateProductListPriceSuccess, updateProductLPRef, updateProductMovingNonMoving, updateProductVerifiedStatus } from \"../../actions/masters/product.action\";\nimport { ProductMasterController } from \"../../controller/Masters/product.controller\";\nfunction* getProductBrowseSaga(action) {\n  try {\n    const listValue = yield ProductMasterController.getProductBrowse(action.payload.params, action.payload.filters);\n    console.log(listValue);\n    yield put(getProductListBrowseSuccess(listValue));\n  } catch (error) {\n    yield null;\n    yield put(getProductListBrowseSuccess(error));\n  }\n}\nfunction* getCategoryListSaga(action) {\n  try {\n    const response = yield ProductMasterController.getCategoryList();\n    yield put(getCategoryListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getCategoryListSuccess(error));\n  }\n}\nfunction* getLPRefListSaga(action) {\n  try {\n    const response = yield ProductMasterController.getLPRefList();\n    yield put(getLPRefListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getLPRefListSuccess(error));\n  }\n}\nfunction* getGGNameListSaga(action) {\n  try {\n    const response = yield ProductMasterController.getGGNameList();\n    yield put(getGGNameListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getGGNameListSuccess(error));\n  }\n}\nfunction* updateProductVerifiedStatusSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductVerifyStatus(action.payload.param);\n    yield put(getGGNameListSuccess(response));\n  } catch (error) {\n    yield null;\n    yield put(getGGNameListSuccess(error));\n  }\n}\nfunction* updateProductListPriceSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductListPrice(action.payload.param);\n    yield null;\n  } catch (error) {\n    yield null;\n    // yield put(updateProductListPriceSuccess(error));\n  }\n}\n\nfunction* updateProductLPRefSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductLpRef(action.payload.param);\n    yield null;\n  } catch (error) {\n    yield null;\n    // yield put(updateProductListPriceSuccess(error));\n  }\n}\n\nfunction* updateProductMovingSaga(action) {\n  try {\n    const response = yield ProductMasterController.updateProductMovingNonMoving(action.payload.param);\n    yield null;\n  } catch (error) {\n    yield null;\n    // yield put(updateProductListPriceSuccess(error));\n  }\n}\n\nexport default function* ProductMasterSaga() {\n  try {\n    yield takeLatest(getProductListBrowse, getProductBrowseSaga);\n    yield takeLatest(getCategoryList, getCategoryListSaga);\n    yield takeLatest(getLPRefList, getLPRefListSaga);\n    yield takeLatest(getGGNameList, getGGNameListSaga);\n    yield takeLatest(updateProductVerifiedStatus, updateProductVerifiedStatusSaga);\n    yield takeLatest(updateProductListPrice, updateProductListPriceSaga);\n    yield takeLatest(updateProductLPRef, updateProductLPRefSaga);\n    yield takeLatest(updateProductMovingNonMoving, updateProductMovingSaga);\n  } catch (e) {\n    yield null;\n  }\n}\n_c = ProductMasterSaga;\nvar _c;\n$RefreshReg$(_c, \"ProductMasterSaga\");","map":{"version":3,"names":["put","takeLatest","getCategoryList","getCategoryListSuccess","getGGNameList","getGGNameListSuccess","getLPRefList","getLPRefListSuccess","getProductListBrowse","getProductListBrowseSuccess","updateProductListPrice","updateProductListPriceSuccess","updateProductLPRef","updateProductMovingNonMoving","updateProductVerifiedStatus","ProductMasterController","getProductBrowseSaga","action","listValue","getProductBrowse","payload","params","filters","console","log","error","getCategoryListSaga","response","getLPRefListSaga","getGGNameListSaga","updateProductVerifiedStatusSaga","updateProductVerifyStatus","param","updateProductListPriceSaga","updateProductLPRefSaga","updateProductLpRef","updateProductMovingSaga","ProductMasterSaga","e"],"sources":["F:/React code/diagnostic/src/_redux/middleware/Masters/product.saga.js"],"sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getCategoryList, getCategoryListSuccess, getGGNameList, getGGNameListSuccess, getLPRefList, getLPRefListSuccess, getProductListBrowse, getProductListBrowseSuccess, updateProductListPrice, updateProductListPriceSuccess, updateProductLPRef, updateProductMovingNonMoving, updateProductVerifiedStatus } from \"../../actions/masters/product.action\";\r\nimport { ProductMasterController } from \"../../controller/Masters/product.controller\";\r\n\r\nfunction* getProductBrowseSaga (action) {\r\n    try {   \r\n        const listValue = yield ProductMasterController.getProductBrowse(action.payload.params, action.payload.filters);\r\n        console.log(listValue)\r\n        yield put(getProductListBrowseSuccess(listValue));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getProductListBrowseSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getCategoryListSaga (action) {\r\n    try {    \r\n        const response = yield ProductMasterController.getCategoryList();\r\n        yield put(getCategoryListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getCategoryListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getLPRefListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getLPRefList();\r\n        yield put(getLPRefListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getLPRefListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* getGGNameListSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.getGGNameList();\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductVerifiedStatusSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductVerifyStatus(action.payload.param);\r\n        yield put(getGGNameListSuccess(response));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getGGNameListSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductListPriceSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductListPrice(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nfunction* updateProductLPRefSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductLpRef(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\nfunction* updateProductMovingSaga (action) {\r\n    try {   \r\n        const response = yield ProductMasterController.updateProductMovingNonMoving(action.payload.param);\r\n        yield null;\r\n    } catch (error) {\r\n        yield null;\r\n        // yield put(updateProductListPriceSuccess(error));\r\n    }\r\n}\r\n\r\n\r\nexport default function* ProductMasterSaga () {\r\n    try {\r\n        yield takeLatest(getProductListBrowse, getProductBrowseSaga);\r\n        yield takeLatest(getCategoryList, getCategoryListSaga);   \r\n        yield takeLatest(getLPRefList, getLPRefListSaga);   \r\n        yield takeLatest(getGGNameList, getGGNameListSaga);   \r\n        yield takeLatest(updateProductVerifiedStatus, updateProductVerifiedStatusSaga);   \r\n        yield takeLatest(updateProductListPrice, updateProductListPriceSaga);   \r\n        yield takeLatest(updateProductLPRef, updateProductLPRefSaga);   \r\n        yield takeLatest(updateProductMovingNonMoving, updateProductMovingSaga);   \r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}