{"ast":null,"code":"import { put, takeLatest } from \"redux-saga/effects\";\nimport { checkAuthCred, requestStatus, checkAuthCredResponse, checkAuthOTP, checkAuthOTPResponse, getDecryptUserIdResponse, getDecryptUserId } from '../actions/auth.action';\nimport { AuthController } from \"../controller/auth.controller\";\nfunction* CheckUserCredSaga(action) {\n  try {\n    yield put(requestStatus(true));\n    const _checkUserCred = yield AuthController.checkUserCred(action.payload);\n    yield put(checkAuthCredResponse(_checkUserCred));\n    yield put(requestStatus(false));\n  } catch (error) {\n    yield null;\n    yield put(checkAuthCredResponse(error));\n  }\n}\n_c = CheckUserCredSaga;\nfunction* CheckUserCredOTP(action) {\n  try {\n    const _checkUserOtp = yield AuthController.checkAuthOTP(action.payload);\n    yield put(checkAuthOTPResponse(_checkUserOtp));\n  } catch (error) {\n    yield null;\n    yield put(checkAuthOTPResponse(error));\n  }\n}\n_c2 = CheckUserCredOTP;\nfunction* getDecryptUserIdSaga(action) {\n  try {\n    const decryptUserDetails = yield AuthController.getDecryptUserDetails(action.payload);\n    yield put(getDecryptUserIdResponse(decryptUserDetails));\n  } catch (error) {\n    yield null;\n    yield put(getDecryptUserIdResponse(error));\n  }\n}\nexport default function* AuthSaga() {\n  try {\n    yield takeLatest(checkAuthCred, CheckUserCredSaga);\n    yield takeLatest(checkAuthOTP, CheckUserCredOTP);\n    yield takeLatest(getDecryptUserId, getDecryptUserIdSaga);\n  } catch (e) {\n    yield null;\n  }\n}\n_c3 = AuthSaga;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CheckUserCredSaga\");\n$RefreshReg$(_c2, \"CheckUserCredOTP\");\n$RefreshReg$(_c3, \"AuthSaga\");","map":{"version":3,"names":["put","takeLatest","checkAuthCred","requestStatus","checkAuthCredResponse","checkAuthOTP","checkAuthOTPResponse","getDecryptUserIdResponse","getDecryptUserId","AuthController","CheckUserCredSaga","action","_checkUserCred","checkUserCred","payload","error","CheckUserCredOTP","_checkUserOtp","getDecryptUserIdSaga","decryptUserDetails","getDecryptUserDetails","AuthSaga","e"],"sources":["F:/React code/diagnostic/src/_redux/middleware/auth.saga.js"],"sourcesContent":["import { put, takeLatest } from \"redux-saga/effects\";\r\nimport { checkAuthCred , requestStatus , checkAuthCredResponse, checkAuthOTP , checkAuthOTPResponse, getDecryptUserIdResponse, getDecryptUserId } from '../actions/auth.action';\r\nimport { AuthController } from \"../controller/auth.controller\";\r\n\r\n\r\nfunction* CheckUserCredSaga (action) {\r\n    try {   \r\n        yield put(requestStatus(true));\r\n        const _checkUserCred = yield AuthController.checkUserCred(action.payload);\r\n        yield put(checkAuthCredResponse(_checkUserCred));\r\n        yield put(requestStatus(false));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(checkAuthCredResponse(error));\r\n    }\r\n}\r\n\r\nfunction* CheckUserCredOTP (action) {\r\n    try {\r\n        const _checkUserOtp = yield AuthController.checkAuthOTP(action.payload);\r\n        yield put(checkAuthOTPResponse(_checkUserOtp));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(checkAuthOTPResponse(error));\r\n    }\r\n}\r\n\r\nfunction* getDecryptUserIdSaga (action) {\r\n    try {\r\n        const decryptUserDetails = yield AuthController.getDecryptUserDetails(action.payload);\r\n        yield put(getDecryptUserIdResponse(decryptUserDetails));\r\n    } catch (error) {\r\n        yield null;\r\n        yield put(getDecryptUserIdResponse(error));\r\n    }\r\n}\r\n\r\n\r\nexport default function* AuthSaga () {\r\n    try {\r\n        yield takeLatest(checkAuthCred, CheckUserCredSaga);\r\n        yield takeLatest(checkAuthOTP, CheckUserCredOTP);\r\n        yield takeLatest(getDecryptUserId, getDecryptUserIdSaga);\r\n    }\r\n    catch(e){\r\n        yield null;\r\n    }\r\n}"],"mappings":"AAAA,SAASA,GAAG,EAAEC,UAAU,QAAQ,oBAAoB;AACpD,SAASC,aAAa,EAAGC,aAAa,EAAGC,qBAAqB,EAAEC,YAAY,EAAGC,oBAAoB,EAAEC,wBAAwB,EAAEC,gBAAgB,QAAQ,wBAAwB;AAC/K,SAASC,cAAc,QAAQ,+BAA+B;AAG9D,UAAUC,iBAAiB,CAAEC,MAAM,EAAE;EACjC,IAAI;IACA,MAAMX,GAAG,CAACG,aAAa,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMS,cAAc,GAAG,MAAMH,cAAc,CAACI,aAAa,CAACF,MAAM,CAACG,OAAO,CAAC;IACzE,MAAMd,GAAG,CAACI,qBAAqB,CAACQ,cAAc,CAAC,CAAC;IAChD,MAAMZ,GAAG,CAACG,aAAa,CAAC,KAAK,CAAC,CAAC;EACnC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMf,GAAG,CAACI,qBAAqB,CAACW,KAAK,CAAC,CAAC;EAC3C;AACJ;AAAC,KAVSL,iBAAiB;AAY3B,UAAUM,gBAAgB,CAAEL,MAAM,EAAE;EAChC,IAAI;IACA,MAAMM,aAAa,GAAG,MAAMR,cAAc,CAACJ,YAAY,CAACM,MAAM,CAACG,OAAO,CAAC;IACvE,MAAMd,GAAG,CAACM,oBAAoB,CAACW,aAAa,CAAC,CAAC;EAClD,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMf,GAAG,CAACM,oBAAoB,CAACS,KAAK,CAAC,CAAC;EAC1C;AACJ;AAAC,MARSC,gBAAgB;AAU1B,UAAUE,oBAAoB,CAAEP,MAAM,EAAE;EACpC,IAAI;IACA,MAAMQ,kBAAkB,GAAG,MAAMV,cAAc,CAACW,qBAAqB,CAACT,MAAM,CAACG,OAAO,CAAC;IACrF,MAAMd,GAAG,CAACO,wBAAwB,CAACY,kBAAkB,CAAC,CAAC;EAC3D,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZ,MAAM,IAAI;IACV,MAAMf,GAAG,CAACO,wBAAwB,CAACQ,KAAK,CAAC,CAAC;EAC9C;AACJ;AAGA,eAAe,UAAUM,QAAQ,GAAI;EACjC,IAAI;IACA,MAAMpB,UAAU,CAACC,aAAa,EAAEQ,iBAAiB,CAAC;IAClD,MAAMT,UAAU,CAACI,YAAY,EAAEW,gBAAgB,CAAC;IAChD,MAAMf,UAAU,CAACO,gBAAgB,EAAEU,oBAAoB,CAAC;EAC5D,CAAC,CACD,OAAMI,CAAC,EAAC;IACJ,MAAM,IAAI;EACd;AACJ;AAAC,MATwBD,QAAQ;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}